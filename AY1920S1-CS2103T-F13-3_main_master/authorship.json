[
  {
    "path": ".gitignore",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Storage/log files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/data/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/config.json"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/preferences.json"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/*.log.*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Test sandbox files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "src/test/data/sandbox/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".DS_Store"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 20
    }
  },
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d MoneyGoWhere"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F13-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-F13-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "https://ci.appveyor.com/project/Nanosync/main[image:https://ci.appveyor.com/api/projects/status/4iypl48boafotycx?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F13-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F13-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "https://www.codacy.com/app/Nanosync/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dNanosync/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/85ca001eb7f443d4874432f8800362f6[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*MoneyGoWhere* is a personal finance application targeted at students at the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "It allows students to keep track of all their spending and their related information such as date, cost and tags."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Users can also set budget goals, view statistics, set reminders for bills and export their data to a .csv file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "With an easy-to-use Graphical User Interface (GUI) and employment of Command Line Interface (CLI), users can easily navigate through the application, contributing to its user-friendliness and efficiency."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "What are you waiting for? Start tracking your finances now!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* This application was built upon the AddressBook-Level3 project created by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5], https://github.com/joestelmach/natty[Natty]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 9,
      "choongyx": 4,
      "-": 24
    }
  },
  {
    "path": "_reposense/config.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"authors\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"githubId\": \"austinsantoso\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"displayName\": \"AUSTI ... NTOSO\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"austinsantoso\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"Austin Santoso\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"githubId\": \"Nanosync\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"displayName\": \"BENED ... G JUN\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"Nanosync\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"Benedict Pak\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"githubId\": \"choongyx\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"displayName\": \"CHOON ... G XIN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"choongyx\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"Choong Yong Xin\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"githubId\": \"jonathantjendana\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"displayName\": \"JONAT ... NDANA\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"jonathantjendana\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"Jonathan Tjendana\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"githubId\": \"minpyaemoe\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"displayName\": \"MIN P ... E MOE\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"minpyaemoe\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \"Min Pyae Moe\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"ignoreCommitList\": ["
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"88c30918cfab8c17aa0e232ee816bebb5dfe8079\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"ede2e749105e4e2f273a67c727393c3a2005d02b\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"f917f5b99a0127a6d60157a2967e2879bb4f4980\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"ef59f9108329752f8a4776ca3b9568ebe68b751a\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"3c35e58609b7576b83297edfe10066c6adf0a56b\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 51
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "mainClassName \u003d \u0027seedu.moneygowhere.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.dataformat\u0027, name: \u0027jackson-dataformat-csv\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    compile group: \u0027org.slf4j\u0027, name: \u0027slf4j-nop\u0027, version: \u00271.7.28\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    archiveBaseName.set(\"moneygowhere\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    destinationDirectory.set(file(\"${buildDir}/jar/\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \u0027site-name\u0027: \u0027MoneyGoWhere\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F13-3/main\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "task precommit {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    dependsOn \u0027checkstyleMain\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    dependsOn \u0027checkstyleTest\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    dependsOn \u0027test\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    tasks.findByName(\u0027checkstyleTest\u0027).mustRunAfter \u0027checkstyleMain\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    tasks.findByName(\u0027test\u0027).mustRunAfter \u0027checkstyleTest\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 1,
      "Nanosync": 15,
      "-": 148,
      "austinsantoso": 1
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "- address_book_32.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "- AddressApp.ico"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Copyright by Twitter - https://twemoji.twitter.com/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "- moneygowhere_32.png"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "MoneyGoWhere was developed by the AY2019/20 Semester 1 CS2103T https://github.com/AY1920S1-CS2103T-F13-3[F13-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Benedict Pak Hong Jun"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::nanosync.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "{empty} [https://github.com/Nanosync[github]] [\u003c\u003cnanosync#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Role*: Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Responsibilities*: Integration, IntelliJ/Git Expert"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Austin Santoso"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::austinsantoso.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "{empty}[https://github.com/austinsantoso[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Role*: Developer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Responsibilities*: Code Quality"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Choong Yong Xin"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::choongyx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "{empty}[https://github.com/choongyx[github]]  [\u003c\u003cchoongyx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Role*: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Responsibilities*: Documentation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Jonathan Tjendana"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::jonathantjendana.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "{empty}[https://github.com/jonathantjendana[github]]    [\u003c\u003cjonathantjendana#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Role*: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Responsibilities*: Scheduling and Tracking, JavaFX expert"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Min Pyae Moe"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::minpyaemoe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "{empty}[https://github.com/minpyaemoe[github]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Role*: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Responsibilities*: Testing, Deliverables and Deadlines"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 1,
      "Nanosync": 3,
      "choongyx": 25,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F13-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* *Email us* : You can also reach us at +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Benedict: `e0310919 [at] u.nus.edu` +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Austin: `e0313583 [at] u.nus.edu` +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Min: `e0311058 [at] u.nus.edu` +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Jonathan: `e0318840 [at] u.nus.edu` +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Yong Xin: `e0201166 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "choongyx": 2,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d MoneyGoWhere - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "By: `Team CS2103T-F13-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Run the `seedu.moneygowhere.Main` and try a few commands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `AY1920S1-CS2103T-F13-3/main` repo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choongyx"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `AY1920S1-CS2103T-F13-3/main`), you should do the following:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:https://github.com/AY1920S1-CS2103T-F13-3/main/blob/master/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:https://github.com/AY1920S1-CS2103T-F13-3/main/blob/master/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:https://github.com/ay1920s1-cs2103t-f13-3/main/blob/master/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choongyx"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choongyx"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, Section 2.1 Architecture\u003e\u003e."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/moneygowhere/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/moneygowhere/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/moneygowhere/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `SpendingListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/moneygowhere/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following class diagram shows the structure of the Logic component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "link:{repoURL}/src/main/java/seedu/moneygowhere/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".  `Logic` uses the `SpendingBookParser` class to parse the user command."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a Spending)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following class diagram shows the structure of the Model component."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/moneygowhere/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* stores the Spending Book data."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cSpending\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Spending Book`, which `Spending` can reference. This would allow `Spending Book` to only require one `Tag` object per unique `Tag`, instead of each `Spending` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following class diagram below displays the structure of the Storage Component."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/moneygowhere/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* can save the Spending Book data in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Classes used by multiple components are in the `seedu.moneygowhere.commons` package."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "// tag::updown[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "[[Implementation-UpDown]]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d Up/Down key"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Similar to a typical Command Line Interface(CLI), the up and down key allows the users to through their previous commands."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The up and down key mechanism is facilitated by the `logic` component of `MoneyGoWhere`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "When ever a user inputted command is entered, it is stored internally as an `ArrayList` in the `commandHistory` component of `Storage`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "`CommandHistory` uses an internal index to keep track of its current position in the list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "* `Logic#getNextCommand()` -- Retrieves the more recent user input command with respect to the current index."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "* `Logic#getPrevCommand()` -- Retrieves the earliest user input command with respect to the current index."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The index is initially set to -1, to indicate that that no user input has been inputted."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "When ever a user inputs a command, the command is stored at the end of the list and"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "the index is set to the size of the list, to indicate that there are no commands beyond after this point."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "When the up key is pressed, the index will decrement by 1 and show the user input command stored at that index."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "When the index is currently 0, the first user command inputted, pressing the up key will cause the index to move to -1."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "this returns the empty string, since there are no commands before this point. Any further up key press will have the same"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "outcome, but the index will stay at -1."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "When the down key is pressed, the index will increment by 1 and the user inputted command at that index will be returned."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "If the index is currently the last possible value, the last user inputted command, pressing the down key will cause the"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "index to increment by 1, which is beyond the index of the list, the empty string will be returned. Any further down key press"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "will have the same outcome but the index will stay the list size or last possible index + 1."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Given below is an example usage scenario and how the up/down mechanism behaves at each step:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "1. The user launches the application for the first time. The `commandHistory` will be initialized with an empty storage ,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "and the `commandHistoryIndex` will have value -1."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "image::UpDownState0.png[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Initially the storage is empty and the index is set to -1, as shown in the picture above."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "2. The user executes `delete 5` command to delete the 5th Spending in the spending book."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The `delete 5` command is added to the back of  `commandHistory`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "image::UpDownState1.png[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The user input is stored as a string in the commandHistoryList,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "and the index is set to the size of the list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The index is the same as the size of the list,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "but the index does not point to any particular command, since it is out of bounds"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "3. The user executes `add n/David ...` to add a new Spending."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The `add n/David ...` command is added to the back of  `commandHistory`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "image::UpDownState2.png[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The user input is stored as a string in the commandHistoryList,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "and the index is set to the size of the list, in this case 2."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Any command, whether it is valid or not will be stored in `CommandHistory`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "4. The user presses the up key."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "image::UpDownState3.png[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The index is decremented by 1, and the user input command at that point is returned"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "5. The user presses the down key."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "image::UpDownState4.png[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The index is incremented by 1, resulting it to be out of bounds in the list,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "the empty string is returned."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The following sequence diagram shows how the up/down key mechanism works:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "image::UpDownSequenceDiagram.png[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "`getPrevCommand()` works the same way as the the sequence diagram above for `getNextCommand()`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The only difference is which commands get returned."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How up \u0026 undo executes"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "[width\u003d\"90%\", cols\u003d\"1,2,2\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|Aspect |Alternative 1 (current choice)|Alternative 2"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|Where the commands stored."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|commands are stored in storage. +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Intuitive. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Follows current Architecture."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "more lines of code."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|Commands are stored in logic. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "less oop."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Does not follow single responsibility principle"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Option 1 was chosen due to it staying with the current Architecture."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "// end::updown[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[[Implementation-Find]]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The find feature allows the user to search for a spending based on specified field. If search results are too broad, fields may be combined to increase specificity."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "For example, `find n/Apple c/2.50-3.00` will find an `Apple` of cost range $`2.50` to $`3.00`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Find is supported by having a `Predicate` implemented for every field in Spending. Predicates are added based on valid input entered by the user."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The `FindCommandParser` class stores these predicates, which are combined using Java 8 streams with an `AND` operation to form a more specific search query."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The sequence diagram below demonstrates how the `find` command is executed:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".Sequence diagram for an example `find` command"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::FindSequenceDiagram.png[Find Sequence Diagram,width\u003d75%]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following steps explain the sequence diagram:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1. The user enters `find n/apple`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2. `LogicManager` calls `SpendingBookParser#parseCommand()`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "3. `FindCommandParser` is created and validates user input, creating a list of `predicates`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "4. `FindCommand` receives `predicates` and stores it in a list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "5. On `execute()`, `predicates` are reduced and `Model#updateFilteredSpendingList(predicate)` is called to refresh the displayed list."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `FindCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "To summarise what happens when the user uses the `find` command, the following activity diagram is shown below:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".Activity diagram for an example `find` command"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::FindActivityDiagram.png[Find Activity Diagram,width\u003d75%]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following steps explain the activity diagram:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1. The user executes the `find` command."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2. If there are valid inputs, each field from the input is saved as predicates into a predicate list."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "3. Else, there are two cases."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".. If there is an invalid field, display an error message for the invalid field."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".. If there is a missing field, display an error message for the missing field."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Listed in the table below are the design considerations for the `find` command."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".Design considerations for `find` command"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[width\u003d\"90%\", cols\u003d\"1,2,2\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Aspect |Alternative 1 (current choice) |Alternative 2"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|How find is executed"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Save all predicates to a list +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Easy to implement +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Obeys Open-Closed Principle (OCP) +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "All fields require a predicate"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Access the underlying list and check all related objects. +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Able to manipulate objects directly +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Poor abstraction +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Change in comparison requires prior knowledge of the structure of the entire code  +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Difficult to implement"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Alternative 1 was chosen as it was the easiest to implement and obeys the Open-Closed Principle (OCP) of the SOLID principles. Although Alternative 2 enables checking of the related objects directly, it has poor abstraction and changes in the function require prior knowledge of the structure of the entire code. It is also difficult to implement"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Sort]]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "The sort feature allows users to sort all currently displayed Spending entries automatically. The default sorting sequence is by Date, followed by Cost. Both are in descending order."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "The user may choose to modify how the displayed entries are sorted using the `sort` command."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `sort n/ASC d/DESC` applies sorting by name in ascending order, followed by Date in descending order. This applies to any future commands entered."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "The sorting feature is supported by `SpendingComparator`, a custom comparator to facilitate different sort ordering, and implements the following operation:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* `updateSortedSpendingList(comparator)` -- Updates the sorted spending list with a new comparator."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#updateSortedSpendingList(comparator)`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "At a high level view, `SpendingComparator` and `SortField` interacts in the manner shown below."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ".High-level view of package interaction"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "image::SortPackageDiagram.png[Sort Package Diagram]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below demonstrates how the `sort` command is executed:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".Sequence diagram for an example `sort` command"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::SortSequenceDiagram.png[Sort Sequence Diagram,width\u003d75%]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following steps explain the sequence diagram:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1. The user enters `sort n/ASC`."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2. `LogicManager` calls `SpendingBookParser#parseCommand()`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "3. `SortCommandParser` is created and validates user input, creating a set of `fields`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "4. `SortCommand` receives `fields` and stores it."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "5. On `execute()`, `fields` are passed into a `SpendingComparator` object and `Model#updateSortedSpendingList(comparator)` is called to refresh the displayed list."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `SortCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarises what happens when the user uses the `sort` command:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".Activity diagram for an example `sort` command"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::SortActivityDiagram.png[Sort Activity Diagram,width\u003d75%]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following steps explain the activity diagram:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1. The user executes the `sort` command."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2. If there are valid fields from the input, each field is saved into a list and determines sort order for `Model`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "3. Else, there are two cases."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".. If there is an invalid field, display an error message for the invalid field."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".. If there is a missing field, display an error message for the missing field."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".Design considerations for `sort` command"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"90%\", cols\u003d\"1,2,2\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Aspect |Alternative 1 (current choice) |Alternative 2"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "|How sort is executed"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "|Set a new comparator +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* Easy to implement +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* `Comparator` is coupled to many field classes"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "|Sort the underlying list without a comparator +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* Able to manipulate objects directly +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* Violates fundamental Object Oriented Principles"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "|Method design for sort"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "|Create filtered list from sorted list +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* Easy to implement +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* Minor structure changes"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "|Create sorted list from filtered list +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* Able to test large sorting side effects +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* Large code structure changes"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Alternative 1 was chosen as it was the easiest to implement and it does not violate Single Responsibility Principle (SRP) of the SOLID framework. The only downside of this approach is that changing any field classes might require a change in the Comparator."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "In contrast, for Alternative 2, manipulating the internal elements of the list directly is dangerous and can cause unintended side effects."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "There was also a huge difference for the method design for sort, and Alternative 1 was the easier approach to avoid side effects in Alternative 2."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "// tag::reminder[]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003d\u003d\u003d Reminder feature"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "With this reminder feature, users can set the reminders of their tasks with deadlines and delete them when completed."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "A reminder is constructed with"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* Deadline `d/DATE`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* Reminder Message `m/MESSAGE`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "The recorded reminders sorted with deadline in descending order, are displayed on the User Interface(UI) for notification."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This feature is implemented with the following operations:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* Adding a reminder `reminder add d/DATE m/MESSAGE` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "e.g. `reminder add d/30/08/2020 m/Pay school fee` - set reminder to pay school fee by 30th of August 2020"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* Deleting a reminder `reminder delete INDEX` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "e.g. `reminder delete 1` - delete the first reminder in the reminder list shown in UI."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Below is the activity diagram describing the steps take by MoneyGoWhere when it receives `AddReminderCommand`."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".Activity diagram for adding a reminder"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::AddReminderActivityDiagram.png[width\u003d75%]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "In the above diagram, it can be seen that respective error messages will be shown for invalid inputs."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Shown below is the sequence diagram containing the interactions between respective components in MoneyGoWHere when user inputs `AddReminderCommand`."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".Sequence diagram while user attempts to add a new reminder"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::AddReminderSequenceDiagram.png[width\u003d75%]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "The above sequence diagram demonstrates how a new reminder is constructed from valid user input."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Following is the activity diagram including the series of actions performed by MoneyGoWhere when it receives `DeleteReminderCommand`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".Activity diagram for removing a reminder"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::DeleteReminderActivityDiagram.png[width\u003d75%]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "The negative index from user input will leads to invalid command format error."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "The below sequence diagram summarize the interactions between different components when user enter `DeleteReminderCommand`."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".Sequence diagram while user attempt to remove a reminder"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::DeleteReminderSequenceDiagram.png[width\u003d75%]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "The above diagram also highlights how logic and model components interact with each other while deleting a reminder."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d Import Feature"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The import feature allows our users to import data from a comma-separated values (`.csv`) files."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "It allows users to add their spending in bulk."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`execute(\"import p/validSpending.csv\")`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".Interactions Inside the Logic Component for the `import` Command"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "image::ImportSequenceDiagram.png[width\u003d100%]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The Import Feature has one main component, which is the `ImportCommand.java` file. This file contains the main logic behind the feature."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The `ImportCommand#readSpendingFromCsv()` method utilises the `FasterXML/jackson` library to read in `.csv` files and convert it into maps of objects."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The maps will then be processed and parsed into `Spending` objects which will be added into a `Spending` list."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Those maps that do not pass the parse conditions will then be thrown as an exception and its message will be saved inside an error list."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "After all the maps are processed, the application will then go through the valid spending list and save them by calling the `Model#addSpending()` method."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Following that, the application will then prints an output, showing the result of the command execution."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an import command:"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".Import Feature Activity Diagram"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::ImportActivityDiagram.png[width\u003d25%]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "When a user calls the `import` command and inputs a valid `.csv` file, the application will read and parses all the data inside the file and save them to the `SpendingBookList` and `moneygowhere.json`."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d\u003d CSV File Format and Constraints"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "In order for data to be imported into MoneyGoWhere, it must be in a properly formatted CSV file."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "There should be 5 columns specified for `Name`, `Cost`, `Date`, `Tag` and `Remark`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Header Constraints"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* The first row is read in as the header and is *required*."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Cell Formatting"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* There should not be any leading and trailing spaces in a cell."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* To specify a comma within a cell, the value of the cell should be inside double quotes. Eg:"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** \"yummy, juicy\""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** \"fresh, clean\""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* To specify double quotes within a cell, in addition to start and end double quotes, escape the double quote with another double quote. Eg:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** \"\"\"yummy\"\", \"\"juicy\"\"\""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** \"\"\"fresh\"\", \"\"clean\"\"\""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d Export Feature"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The export feature allows our  users to export their spending into a comma-separated values(`.csv`) files."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "It allows users to export their spending allowing the spending data to be portable."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Given below is the Sequence Diagram for the interactions withing the `Logic` component for the `execute(\"export p/Documents\")`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".Interactions Inside the Logic Component for the `export\u0027 Command"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "image::ExportSequenceDiagram.png[width\u003d100%]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The export feature has one main component, which is the `ExportCommand.java` file. This file contains the main logic behind the feature."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The \u0027ExportCommand#execute()\u0027 method utilises the `FasterXML/jackson` library to read in the `.json` file where the application keeps the spending data."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "After the data has been read successfully, it is converted and written into `moneygowhere.csv` file. This file will be created at wherever the user specifies."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "After the data has been successfully exported, the application will then prints an output, showing the result of the command execution."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an export command:"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".Export Feature Activity Diagram"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "image::ExportActivityDiagram.png[width\u003d25%]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "When a user calls the `export` command and inputs a valid folder path, the application will convert all the spending data into a `.csv` file and export it to `moneygowhere.csv`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// tag::statistics[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Statistics feature"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "choongyx"
        },
        "content": "For the current `statistics` feature, there are 2 main commands that the user can execute."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "choongyx"
        },
        "content": "1. `stats` - display statistics for all spending"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "choongyx"
        },
        "content": "2. `stats d/DATE_START d/DATE_END` - display statistics for spending within a date range"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The `StatsCommandParser` differentiates these 2 commands based on whether a valid date range is provided as illustrated in the diagram below."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Activity Diagram showing behaviour of StatsCommandParser"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::StatsActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The implementation of the Statistics feature can be split into 2 phases, preparation and execution. Given below is an explanation of how the Statistics mechanism behaves at each phase."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Preparation"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "choongyx"
        },
        "content": "During the preparation phase, the program parses the command for Statistics and verifies the arguments."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The following sequence diagram shows how `stats` command works during the preparation phase."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Sequence Diagram demonstrating the preparation stage of Statistics feature"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::StatsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "choongyx"
        },
        "content": "NOTE: The lifeline for `StatsCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "choongyx"
        },
        "content": "1. User first enters the command `stats d/01/01/2019 d/07/01/2019`."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "choongyx"
        },
        "content": "2. `SpendingBookParser` will parse and identify the command as a `StatsCommand` and pass on the argument to `StatsCommandParser`."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "choongyx"
        },
        "content": "3. If no arguments were provided by the user, `StatsCommand#StatsCommand()` is called to create a `StatsCommand` with no parameters."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Otherwise, `StatsCommandParser` will verify whether the arguments provided were valid."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".. If they are valid, `StatsCommand#StatsCommand(DATE_START, DATE_END)` is called to create a `StatsCommand` with the specified parameters."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".. Else, a `ParseException` will be thrown and an error message will be shown to the user."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "choongyx"
        },
        "content": "4. `StatsCommand` is returned to `LogicManager` which then calls `StatsCommand#execute()`, which updates the `statsPredicate` in `Model`."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "choongyx"
        },
        "content": "In the execution phase, the program processes and retrieves the data to be displayed and finally displaying it."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Below is the UML sequence diagram and a step-by-step explanation."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Sequence Diagram demonstrating the execution stage of Statistics feature"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::StatsDataSequenceDiagram.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "choongyx"
        },
        "content": "1. Upon checking that the boolean `isShowStats` \u003d true, the `MainWindow` calls `LogicManager#getStatsData()`."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "choongyx"
        },
        "content": "2. `LogicManager` then gets the filtered list by calling `Model#getStatsList`, which returns an unmodifiable `ObservableList`, containing only spending within the specified date range."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "choongyx"
        },
        "content": "3. `LogicManager#getStatsData()` then processes the spending and organise the data into a `LinkedHashMap\u003cString, Double\u003e` where the key value pairs represents tag and cost respectively."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "choongyx"
        },
        "content": "4. Finally, the `statsData` is returned to the `MainWindow`. The data will be displayed on the Ui through `StatsPanel#loadData(statsData)` call."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[width\u003d\"90%\", cols\u003d\"1,2,2\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|Aspect |Alternative 1 (Current choice) |Alternative 2 (Planned for future releases)"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|How to handle statistics data and parameters"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|Data and each parameter is handled as separate objects +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* Easy to implement +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* Need to call multiple methods to get parameters"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|Create Statistics object which contains data and all the parameters +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* More scalable. Less method calls to get parameters +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* None"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// tag::graph[]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Graph feature"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "choongyx"
        },
        "content": "For the current `graph` feature, there are 2 main commands that the user can execute."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "choongyx"
        },
        "content": "1. `graph` - generates graph for all spending"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "choongyx"
        },
        "content": "2. `graph d/DATE_START d/DATE_END` - generates graph for spending within a date range"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The `GraphCommandParser` differentiates these 2 commands based on whether a valid date range is provided as illustrated in the diagram below."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Activity Diagram showing behaviour of GraphCommandParser"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::GraphActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The implementation of the Graph feature can be split into 2 phases, preparation and execution. Given below is an explanation of how the Graph mechanism behaves at each phase."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Preparation"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "choongyx"
        },
        "content": "During the preparation phase, the program parses the command for Graph and verifies the arguments."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The following sequence diagram shows how `graph` command works during the preparation phase."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Sequence Diagram demonstrating the preparation stage of Graph feature"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::GraphSequenceDiagram.png[]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "choongyx"
        },
        "content": "NOTE: The lifeline for `GraphCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "choongyx"
        },
        "content": "1. User first enters the command `graph d/01/01/2019 d/07/01/2019`."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "choongyx"
        },
        "content": "2. `SpendingBookParser` will parse and identify the command as a `GraphCommand` and pass on the argument to `GraphCommandParser`."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "choongyx"
        },
        "content": "3. If no arguments were provided by the user, `GraphCommand#GraphCommand()` is called to create a GraphCommand with no parameters."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Otherwise, `GraphCommandParser` will verify whether the arguments provided were valid."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".. If they are valid, `GraphCommand#GraphCommand(DATE_START, DATE_END)` is called to create a `GraphCommand` with the specified parameters."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".. Else, a `ParseException` will be thrown and an error message will be shown to the user."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "choongyx"
        },
        "content": "4. `GraphCommand` is returned to `LogicManager` which then calls `GraphCommand#execute()`, which updates the `statsPredicate` in `Model`."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "choongyx"
        },
        "content": "In the execution phase, the program processes and retrieves the data to be displayed and finally displaying it."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Below is the UML sequence diagram and a step-by-step explanation."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Sequence Diagram demonstrating the execution stage of Graph feature"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::GraphDataSequenceDiagram.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "choongyx"
        },
        "content": "1. Upon checking that the boolean `isShowGraph` \u003d true, the `MainWindow` calls `LogicManager#getGraphData()`."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "choongyx"
        },
        "content": "2. `LogicManager` then gets the filtered list by calling `Model#getStatsList`, which returns an unmodifiable `ObservableList`, containing only spending within the specified date range."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "choongyx"
        },
        "content": "3. `LogicManager#getGraphData()` then processes the spending and organise the data into a `LinkedHashMap\u003cString, Double\u003e` where the key value pairs represents date and cost respectively."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "choongyx"
        },
        "content": "4. Finally, the `graphData` is returned to the `MainWindow`. The data will be displayed on the Ui through `GraphPanel#loadData(graphData)` call."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// end::graph[]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d Budget Feature"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The `Budget` component has two core features:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "1. Allowing the user to set the monthly budget"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "2. Calculating the remanding budget after all the spending in the same month."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The budget component allows the users to modify the current monthly budget `budget AMOUNT` command, where AMOUNT is a"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "double representing the desired monthly budget."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "For example `budget 10000` sets the current monthly budget to 10000."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The second functionality is done automatically by the program, which finds the total spending in the month and reduces"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "the sum from the budget."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The current `Budget` component keeps track of three variables:"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "1. the monthly budget"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "2. the current month"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "3. the sum of all spending in the same month."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "All of which are saved with the SpendingBook."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Upon initialization, if a save file is found it will automatically set the monthly budget based on the"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "save file\u0027s options. If the current month is different from the current month"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "the total spending will reset to 0, but the monthly budget will remain the same."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The sum of spending will only be modified when `add` and `delete` commands are called."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The sequence diagram below demonstrates how the budget command is executed:"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ".Sequence Diagram when setting Budget"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "image::SetBudgetSequenceDiagram.png[]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The figure above shows the sequence of events that occur to set the monthly budget."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The `LogicManager` receives the user input and passes it to the `SpendingBookParser` to parse the user input,"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "resulting in a `BudgetCommand`."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "If the user input is valid, the command is then executed to access the Budget in Model and modify the value."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "[width\u003d\"90%\", cols\u003d\"1,2,2\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Aspect |Alternative 1 (current choice) |Alternative 2"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|Method to calculate total spending"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|Keep track of the sum and modifies the sum when `add` and `delete` commands are added +"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Pros: does not waste time to calculate sum, easy to implement +"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Cons: none"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|Calculate from `SpendingList` each time +"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Pros: seems intuitive +"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Cons: not efficient, requires Budget to access Model, resulting in circular dependency"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "The first option is chosen to prevent circular dependency."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedSpendingBook`."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "It extends `SpendingBook` with an undo/redo history, stored internally as an `spendingBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `VersionedSpendingBook#commit()` -- Saves the current spending book state in its history."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `VersionedSpendingBook#undo()` -- Restores the previous spending book state from its history."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `VersionedSpendingBook#redo()` -- Restores a previously undone spending book state from its history."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitSpendingBook()`, `Model#undoSpendingBook()` and `Model#redoSpendingBook()` respectively."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedSpendingBook` will be initialized with the initial spending book state, and the `currentStatePointer` pointing to that single spending book state."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th Spending in the spending book. The `delete` command calls `Model#commitSpendingBook()`, causing the modified state of the spending book after the `delete 5` command executes to be saved in the `spendingBookStateList`, and the `currentStatePointer` is shifted to the newly inserted spending book state."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new Spending. The `add` command also calls `Model#commitSpendingBook()`, causing another modified spending book state to be saved into the `spendingBookStateList`."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "If a command fails its execution, it will not call `Model#commitSpendingBook()`, so the spending book state will not be saved into the `spendingBookStateList`."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Step 4. The user now decides that adding the Spending was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#spendingBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous spending book state, and restores the spending book to that state."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial spending book state, then there are no previous spending book states to restore. The `undo` command uses `Model#canUndoSpendingBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoSpendingBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the spending book to that state."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "If the `currentStatePointer` is at index `spendingBookStateList.size() - 1`, pointing to the latest spending book state, then there are no undone spending book states to restore. The `redo` command uses `Model#canRedoSpendingBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the spending book, such as `list`, will usually not call `Model#commitSpendingBook()`, `Model#undoSpendingBook()` or `Model#redoSpendingBook()`. Thus, the `SpendingBookStateList` remains unchanged."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitSpendingBook()`. Since the `currentStatePointer` is not pointing at the end of the `SpendingBookStateList`, all spending book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[width\u003d\"90%\", cols\u003d\"1,2,2\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Aspect |Alternative 1 (current choice)|Alternative 2"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|How undo \u0026 redo executes"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Saves the entire spending book. +"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Easy to implement. +"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Individual command knows how to undo/redo by itself. +"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Will use less memory (e.g. for `delete`, just save the Spending being deleted). +"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " +"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Use a list to store the history of spending book states. +"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project. +"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " +"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Logic is duplicated twice. For example, when a new command is executed, it requires remembering to update both `HistoryManager` and `VersionedSpendingBook`."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|Use `HistoryManager` for undo/redo +"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Pros:* +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Do not need to maintain a separate list, and just reuse what is already in the codebase. +"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Cons:* +"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Requires dealing with commands that have already been undone: Requires remembering to skip these commands. +"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::productscope[]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* students who have yet to earn a stable income"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* has a need to store and track personal finances"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* wants to set a budget"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* wishes to import or export their data to a .csv file"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Value proposition*: manage budget quickly compared to a typical mouse/GUI driven app which saves time and makes it more convenient."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::productscope[]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* * *` |user |add a spending |keep track of how much I spent on a particular item"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* * *` |user |update my spending | correct any mistakes"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* * *` |user |delete a spending |remove spending that I keyed in wrongly"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* * *` |user |view my current monthly spending on different categories|keep track of my spending"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* * *` |budget conscious user |set budget goals|make sure I do not overspend"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* * *` |user |see the difference between my budget and spending|be aware of my finances"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|`* * *` |new user |view more information about a particular command|learn how to use the command"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* * *` |user |calculate my total spending |keep track of my total spending"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* *` |user |import data |have different data from external source"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|`* *` |user |export data |view my spending in another device"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* *` |user |undo my previous action | revert my mistakes"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* *` |user |redo my previous action | move forward in history"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|`* *` |user |view daily/monthly/yearly expenditure |have a projected view of all my spending"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* *` |advanced user |search partial keywords from the description of my spending |view more refined search results"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* *` |user |sort my spending | view my spending in a clear order"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`* *` |user |use natural human language to type commands to the program |do not have to type in a specific format"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |user who likes to keep notes |add a note for my spending |add additional information to my spending"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |user who likes to keep notes |update my notes |modify the notes as needed"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |user who likes to keep notes |delete my notes |delete the note as needed"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |user |generate statistics |have an overview of my spending"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |user |view my future outlook |reflect on my current spending habits"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |user |view my monthly spending in a graph |do not have to see confusing numbers"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |user |view my spending based on a date range |fine-tune my spending based on a time period"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |user |filter my spending based on tag |view my spending on that tag"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |advanced user |use a shorter version of the command | type faster"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|`*` |forgetful user |set a reminder |reminded of my payment deadlines"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "(For all use cases below, the *System* is the `MoneyGoWhere` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d UC01 Add a spending"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User enters a spending."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere adds the specified spending inside the list of spending."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC02 Edit a spending"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to view the list of spending."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere shows a list of spending."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "3.  User requests to update name/cost/date of purchase/tag/remark of a spending."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "4.  MoneyGoWhere updates the specified fields(s) of the spending."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 3a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d UC03 Delete a spending"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to view the list of spending."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere shows a list of spending."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "3.  User requests to delete a specific spending from the list."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "4.  MoneyGoWhere deletes the spending."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 3a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC04 List all spending"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to list all spending."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere shows list of spending in the default order of date in descending order, followed by cost in descending order and name in ascending order."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC05 Find a spending"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to find all occurrences of entered keywords, optionally within the spending name, a cost range, date range, remark and tag in a spending."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere shows spending found with the keywords contained within its cost range, date range, remark and tag specified."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC06 Sort displayed spending"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to sort based on optionally provided fields such as spending name, cost range, date range or remark, in ascending or descending order."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere displays current spending entries with the given order."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC07 Set a monthly budget"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "1.  User requests to set a monthly budget"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "2.  MoneyGoWhere sets a specific monthly budget"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1a. The given budget value is invalid."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 1a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC08 Generate statistics"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "choongyx"
        },
        "content": "1.  User requests to generate statistics for a specific date range."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere generates statistical analysis such as total spending of each tag."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* 1a. The given date range is invalid."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "choongyx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** 1a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "choongyx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC09 List all tags"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to list all the recorded tags."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere lists all the recorded tags."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC10 Add a reminder"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "1.  User enters a reminder."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "2.  MoneyGoWhere adds the specified reminder inside the list of reminders."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC11 Delete a reminder"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "1.  User requests to view the list of spending."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "2.  MoneyGoWhere shows a list of spending."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "3.  User requests to delete a specific spending from the list."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "4.  MoneyGoWhere deletes the reminder."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 3a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC12 Import external data from a CSV file"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to import data from CSV file by specifying the file path."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere imports the data from the CSV file located at specified file path."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1a. The file path is invalid."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 1a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC13 Export data to a CSV file"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to export data from CSV file by specifying the file path."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere exports the data into the CSV file located at specified file path."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1a. The file path is invalid."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 1a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC14 Undo a command"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to undo a command."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere restores the list of spending to the state before the previous command was executed."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1a. There are no undo commands executed previously."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 1a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC15 Redo a command"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to redo a command."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere executes the previous command that was undone."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1a. There are no undo commands executed previously."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 1a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC16 Graphing the data"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "choongyx"
        },
        "content": "1.  User requests to display spending in the form of a graph for a specific date range."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "2.  MoneyGoWhere displays spending in graph form."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* 1a. The given date range is invalid."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "choongyx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** 1a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "choongyx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC17 Clear all spending"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "1.  User requests to clear all entries in the list of spending."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere deletes all spending entries."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* 1a. The list of spending is empty."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "** 1a1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC18 View exchange rates"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to view exchange rates"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere shows all exchange rates available for supported currencies."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1a. There is an amount and currency specified."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** 1a1. MoneyGoWhere converts the amount and currency specified to SGD."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1b. The amount is invalid or the currency entered does not exist."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** 1b1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Step 1b1 is repeated until the amount and currency entered is correct. +"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Use case resumes from step 1a."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d UC19 Set the displayed currency"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "1.  User requests to set the displayed currency"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "2.  MoneyGoWhere displays the specified currency for all spending in the list."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1a. There is no currency specified."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** 1a1. MoneyGoWhere shows the current currency used."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* 1b. The currency entered does not exist."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** 1b1. MoneyGoWhere shows an error message."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "+"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Step 1b1 is repeated until the currency entered is correct. +"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".  Should be able to hold up to 1000 spending without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".  Should not require user to install."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".  Features implemented should be testable using automated and manual testing."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".  Should work for a single user only."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".  Should be able to run with or without internet connection."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Budget:: The maximum amount of money set by the user to spend."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Cost:: Money spent by the user."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Deficit:: The user has spent more than his budget set."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Safe:: The user has spent less or equal to his budget set."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Spending:: An expense incurred by the user."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003d\u003d\u003d Deleting a Spending"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ". Deleting a spending while all spending are listed"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".. Prerequisites: List all Spending using the `list` command. Multiple spending in the list."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "   Expected: No Spending is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 245,
      "jonathantjendana": 84,
      "Nanosync": 353,
      "choongyx": 227,
      "-": 392,
      "austinsantoso": 178
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d MoneyGoWhere - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "By: `Team CS2103T-F13-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// tag::introduction[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*MoneyGoWhere* is a personal finance application targeted to students at the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "It allows students to keep track of all their spending and their related information such as date, cost and tags."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Users can also set budget goals, view statistics, set reminders for bills and export their data to a .csv file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "With an easy-to-use Graphical User Interface (GUI) and employment of Command Line Interface (CLI), users can easily navigate through the application, contributing to its user-friendliness and efficiency."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "What are you waiting for? Start tracking your finances now!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d How To Use This Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The following section details and previews a few legends and formatting that will"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "be used throughout the user guide. These legends are used to represent"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "special information such as tips."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Important information that should be noted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Tips that can help you better navigate the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "`test`: Command to be executed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Useful information for a deeper understanding of the command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "These steps will guide you in installing MoneyGoWhere on your computer."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".  Download the latest `MoneyGoWhere.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for MoneyGoWhere."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds as seen in Figure 1."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "MoneyGoWhere comes preloaded with sample data to allow you to explore and familiarise with the application."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".User Interface of MoneyGoWhere"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "image::ui_annotate.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "e.g. typing *`help`* will display the help information."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* *`list`* : lists all spending"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* **`add`**`n/apple c/2.50 d/yesterday t/fruits r/expensive apple` : adds a spending `Apple` to MoneyGoWhere."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* **`delete`**`3` : deletes the 3rd spending shown in the current list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". When you are ready to get started on tracking your own finances, do type `clear` in the command box and press kbd:[Enter]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "This removes all the sample data from the application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": ". You can refer to \u003c\u003cFeatures\u003e\u003e for more details about each command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// end::introduction[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/apple`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/apple t/fruit` or as `n/apple`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `add n/NAME [t/TAG]...` can be used as `t/vegetable`, `t/fruit` etc."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `add n/NAME c/COST`, `add c/COST n/NAME` is also acceptable."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* If a command accepts a single parameter and multiple parameters are provided, by default, the last parameter is chosen. e.g. if there is only one `n/NAME` accepted and the input is `n/One n/Two`, `n/Two` will be selected."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Shows a list of available commands and their usages. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `help`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Optionally, you can press kbd:[F1] or click `help` which can be found on the menu bar at the top left hand corner of the application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The following image shows how the help bar can be accessed:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Accessing Help from Menu Bar"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::help.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Help can be accessed from the menu bar by clicking on the `Help` button."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::flexibledateformats[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Flexible date formats"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Whenever a particular command requires a `DATE` field, you can choose either of the following formats."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* *Formal Dates*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** 1978-01-28"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** 1984/04/02"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** 1/02/1980 _(1st February 1980)_"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** 26/2/2019"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* *Relaxed Dates*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** The 31st of April in the year 2008"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** 21 Nov 1997"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** Jan 21,\u002797"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** jan 1st"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** february twenty-eight"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* *Relative Dates*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** next thursday/ last wednesday"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** today/ tomorrow/ yesterday"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** next week/ next month / next year"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** 3 days from now"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** three weeks ago"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* *Date Alternatives*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** next wed or thurs"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** oct 3rd or 4th"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* *Prefixes*"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** day after/ the day before"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** the monday after/ the monday before"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** 2 fridays before/ 4 tuesdays after"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "You do not need to specify which date format you would like to use as MoneyGoWhere will be able to differentiate it from the input received. However, if today is Wednesday and `wednesday` is entered, it will be considered next\u0027s week Wednesday."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "MoneyGoWhere will also automatically check whether a given date is valid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Should you accidentally provide an invalid date such as 31/02/2019, it will be rejected as there are only 28 days in February 2019. MoneyGoWhere may automatically try to correct dates *best possible date*."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::flexibledateformats[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d Going through your command history:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Similar to a typical command line interface (CLI), the user may press the up and down key"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "to go through the previous user input history, and display it in the command box. Pressing the up key would go back to the earlier user input command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Whereas pressing the down key would move towards the most recent user input key."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "If the user is at the most recent, or the earliest user inputted command, then press the up and down key respectively,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "no text will be displayed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Adding a spending : `add`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Adds a spending to the list when the user incurs a new spending. Key information such as its name, cost, date, tags (if any) and remarks (if any) are stored. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `add n/NAME c/COST d/DATE [t/TAG]... [r/REMARKS]`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "A spending can have any number of `t/TAG` keywords (including 0). Each `TAG` is limited to 64 characters. If a spending date is in the future, it can only be up to the end of this month. Also, if you are using a different currency, the cost entered may have precision errors as it will be converted to SGD."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `add n/apple c/2.50 d/yesterday t/fruits r/Expensive apple` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* `add n/chicken breast c/1.80 d/today t/meat` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `add n/coffee c/1.20 d/today` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* `add n/milo c/1.50 d/tomorrow r/I love milo` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `add n/gold class movie ticket d/15/1/2019 c/13.00 r/important t/entertainment` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "A new spending is added based on the specified input."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Editing a spending : `edit`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Edits a spending at a specified index in the list. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*Format:* `edit INDEX [n/NAME] [c/COST] [d/DATE] [t/TAG]... [r/REMARKS]`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Edits the spending at the specified `INDEX`. The index refers to the index number shown in the displayed spending list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* When editing tags, the existing tags of the spending will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Tags can have up to 64 characters."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* You can remove all the spending\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* If a spending date is in the future, it can only be up to end of this month."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Spending entries that are added using a different currency will have output displayed in SGD."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* If you are using a different currency, the cost entered may have precision errors as it will be converted to SGD."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `edit 1 c/100` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Updates the cost of the first spending to `100`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `edit 2 n/chicken rice` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Updates the name of the third spending to `chicken rice`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `edit 5 c/500 n/flight tickets` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Updates both the cost of the fifth spending to `500` and its name to `flight tickets`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `edit 10 t/vegetable` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Overwrites existing tags of the tenth spending to `vegetable`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The specified spending is edited."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Deleting a spending : `delete`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Deletes a spending at a specified index in the list. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `delete INDEX`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* Deletes the spending at the specified `INDEX`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* The index refers to the index number shown in the displayed spending list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `delete 2` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Deletes the second spending in the list based on the current list shown."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The specified spending is deleted."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Listing all spending : `list`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Displays a list of all spending and their information such as name, date, cost, tag and remark. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `list`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "By default, list of all spending is sorted by descending order of date, followed by descending order of cost and lastly, by ascending order of name. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "choongyx"
        },
        "content": "This command is implicitly invoked upon application start up, and can be used to reset the view after find or sort."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "All spending entries are listed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Sorting spending entries : `sort`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Sorts all spending based on a given order. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `sort [PREFIX/SORT_ORDER]...`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "choongyx"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Valid prefixes are: Cost (`c`), Date (`d`), Name (`n`), Remarks (`r`)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Valid sort orders are: `ASC`, `DESC`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* At least one of the optional fields *must be provided*."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* If the given sort order is `c/ASC n/DESC`, Cost will be sorted in ascending order, followed by name in descending order."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Sorting names or remarks by default will sort uppercase letters first, followed by lowercase letters."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "choongyx"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* `sort d/ASC c/DESC` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Sorts current spending displayed by Date in ascending order. If they are the same, sort by Cost in descending order."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* `sort n/DESC` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Sorts current spending displayed by Name in descending order."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending entries are sorted based on the given order."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Finding a spending : `find`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Searches for spending based on given keywords, cost range, date range, remarks or tags. You may refine the search results by entering more keywords. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `find [n/NAME_KEYWORDS] [c/COST_MIN] [c/COST_MAX] [d/DATE_START] [d/DATE_END] [r/REMARK_KEYWORDS] [t/TAG]...`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "choongyx"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* At least one search field must be present."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* The search is case-insensitive. For example, `apple` and `Apple` will output the same search results."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* The order of the keywords do not matter for name and remarks. For example, `ticket concert` will match `concert ticket`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Spending matching at least one keyword will be returned. For example, `Phone` will return `New Phone`, `Phone Bill`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* When searching for multiple tags, any tag listed will be matched along with the previous criteria. For example, if there the search keyword was `d/yesterday d/today t/food t/entertainment`, spending entries within `yesterday` and `today` that have either tags `food` or `entertainment` will be matched."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Only full words will be matched. For example, `app` will not match `apple`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Date range can only be input in the following ways:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** `d/DATE_START d/DATE_END`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** `d/DATE_START to DATE_END`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** `d/DATE_START - DATE_END`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Cost range can only be input in the following ways:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** `c/COST_MIN c/COST_MAX`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** `c/COST_MIN-COST_MAX`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** `c/COST_MIN - COST_MAX`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "****"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "DATE_START must be earlier or the same as DATE_END, and COST_MIN must be smaller or the same as COST_MAX."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `find n/apple c/1.50-2.00 d/01/09/2019 d/30/09/2019` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Returns a list of spending with `apple` keyword within the cost range `1.50` to `2.00` and date range within `01/09/2019` to `30/09/2019`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `find n/Java book c/100.20-150.00 d/01/09/2019 - 30/09/2019` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Returns a list of spending with matching the keywords `Java` or `book` within the cost range `100.20` to `150.00` and date range within `01/09/2019` to `30/09/2019`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `find n/apple c/1-2 d/01/09/2019 to 30/09/2019` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Returns a list of spending with `apple` keyword within the cost range `1.00` to `2.00` and date range within `01/09/2019` to `30/09/2019`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `find r/breakfast meal` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Returns a list of spending with matching the keywords `breakfast` or `meal` in remarks."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `find t/food t/leisure` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Returns a list of spending with `food` or `leisure` tags."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `find d/yesterday d/today t/food t/leisure` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Returns a list of spending within `yesterday` and `today` that have `food` or `leisure` tags."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending entries which match the search criteria are listed."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Setting monthly budget : `budget`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Sets a budget for the current month in Singapore dollars. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `budget MONTHLY_BUDGET` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Existing budget of current month is overwritten if budget has already been set."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "* `budget 500000` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Sets a budget of $`500000` for this month"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The budget for the current month is changed."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003d\u003d\u003d Showing current budget : `showbudget`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Returns the current monthly budget. +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `showbudget`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The budget for the current month is shown."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::currency[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Setting the currency : `currency`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Sets the currency used to display spending entries. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `currency [CURRENCYCODE]`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "****"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* If CURRENCYCODE is not specified, the currency in use is displayed."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* CURRENCYCODE can be `SGD`, `USD`, `EUR`, `IDR`, `MYR`, `INR`, `MMK`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `currency USD` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Sets the currency displayed for spending entries to `USD`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The currency displayed is changed and spending entries are updated."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::currency[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::exchangerates[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Viewing exchange rates : `exchangerate`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Displays current stored exchange rates. +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `exchangerate [AMOUNT] [CURRENCYCODE]`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* If AMOUNT and CURRENCYCODE are specified, the indicated values are converted to SGD."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* CURRENCYCODE can be `USD`, `EUR`, `IDR`, `MYR`, `INR`, `MMK`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Entering `SGD` as CURRENCYCODE will display an error since the entered value is already in SGD."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Due to network limitations, exchange rates are fixed and locally stored. Note that exchange rates may vary across different websites."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `exchangerate` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Shows all exchange rates."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* `exchangerate 5 USD` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Converts 5 USD to SGD based on current exchange rates."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "All available exchange rates are shown, or a conversion of an input currency is provided if it was specified."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::exchangerates[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// tag::statistics[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Generating statistics : `stats`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Organises the spending based on tags."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "choongyx"
        },
        "content": "A pie chart is generated, with each sector representing the total amount of money spent on a tag."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "choongyx"
        },
        "content": "This enables users to be more informed of their spending habits as they are now aware of where they have spent most of their money on."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `stats d/DATE_START d/DATE_END`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "choongyx"
        },
        "content": "****"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Generates statistics for all spending that fall between and including the DATE_START and DATE_END specified by the user."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* If no DATE_START and DATE_END parameters are specified, the statistics generated will be based on the whole list of spending."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Only spending that have at least a tag will be considered."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Only the top few tags which incurred a more significant amount of money  will be displayed."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Spending with multiple tags will be counted more than once in total as the statistics seek to show the user which tag they have spent the most money on."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "choongyx"
        },
        "content": "DATE_START must be earlier or the same as DATE_END."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Date range can be input in the following ways: +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "choongyx"
        },
        "content": "`d/DATE_START d/DATE_END` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "choongyx"
        },
        "content": "`d/DATE_START to DATE_END` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "choongyx"
        },
        "content": "`d/DATE_START - DATE_END`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The statistics panel will update every time the spending list displayed changes."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "choongyx"
        },
        "content": "For example, when a new spending with a tag is added, the statistics panel will update the pie chart to show the statistics for all spending, including the new spending."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The statistics panel will update with the currency set."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* `stats`: Generates statistics for all spending."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Output of `stats`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::allstats.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* `stats d/20/10/2019 d/25/10/2019`: Generates statistics for spending between and including 20/10/2019 and 25/10/2019."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Output of `stats d/20/10/2019 d/25/10/2019`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::daterangestats.png[width\u003d700\"]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Statistics is shown."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// tag::graph[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Generating a graph : `graph`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Organises the spending based on date. A line graph is generated, with each point representing the total amount of money spent on a particular date."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "choongyx"
        },
        "content": "This enables users to analyze trends in their spending amount over a particular period of time."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `graph d/DATE_START d/DATE_END`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "****"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Generates a graph for all spending that fall between and including the DATE_START and DATE_END specified by the user."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* If no DATE_START and DATE_END parameters are specified, the statistics generated will be based on the whole list of spending."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Only dates that have at least a spending will be recorded in the graph."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "****"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "choongyx"
        },
        "content": "DATE_START must be earlier or the same as DATE_END."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Date range can be input in the following ways: +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "choongyx"
        },
        "content": "`d/DATE_START d/DATE_END` +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "choongyx"
        },
        "content": "`d/DATE_START to DATE_END` +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "choongyx"
        },
        "content": "`d/DATE_START - DATE_END`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Hovering the mouse over a point displays the date and total amount of money spent (to the nearest dollar) on that date."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The graph panel will update every time the spending list displayed changes."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "choongyx"
        },
        "content": "For example, when a new spending is added, the graph panel will update and generate a graph for all spending, including the new spending."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The graph panel will update with the currency set."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* `graph`: Generates a graph for all spending."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Output of `graph`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::allgraph.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* `graph d/20/10/2019 d/25/10/2019`: Generates a graph for spending between and including 20/10/2019 and 25/10/2019."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "choongyx"
        },
        "content": ".Output of `graph d/20/10/2019 d/25/10/2019`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "choongyx"
        },
        "content": "image::daterangegraph.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "A graph is shown."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "choongyx"
        },
        "content": "// end::graph[]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003d\u003d\u003d Adding a reminder: `reminder add`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Adds a reminder to the reminder list. Key information such as deadline and message are recorded."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `reminder add d/DATE m/MESSAGE`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The date of a deadline must be within 1 year from the current date. MoneyGoWhere will check if the given reminder message and deadline are valid. If it encounters invalid information such as an empty message, the application will display an error."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* `reminder add d/30/08/2020 m/Pay school fees` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* `reminder add d/3 days from now m/Pay phone bill` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "A new reminder is added according to the information provided."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003d\u003d\u003d Deleting a reminder: `reminder delete`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Deletes a reminder at the specified `INDEX`."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `reminder delete INDEX`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "****"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* Deletes the reminder at the specified `INDEX`."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* The index refers to the index number shown in the displayed reminder list."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "* `reminder delete 2` +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Deletes the second reminder in the list based on the current results shown."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The specified reminder is deleted."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Importing data : `import`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Imports data from a CSV file specified by file path. Existing spending entries are not replaced. +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `import p/FILE_PATH` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:* +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `import p/data.csv`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `import p/C:\\Users\\User\\Documents\\importfile.csv`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `import p/~/data.csv`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".A Valid `.csv` File."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "image::ExampleValidCsv.png[width\u003d75%]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`.csv` file must have a header row with the following values:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* name"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* date"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* remark"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* cost"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* tagged"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Multiple tags should be separated by a semi-colon."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`juicy;nice`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Alternatively, tags could be wrapped in double quotes and separated by commas."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`\"juicy,nice\"`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Data from the CSV file is imported, keeping existing spending entries."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d Exporting data : `export`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Exports data to a `moneygowhere.csv` file specified by a folder path. +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* export `p/FOLDER_PATH` +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:* +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `export p/Documents`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `export p/Finance`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Data from the spending list is exported to a specified folder with a file name `moneygowhere.csv`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Restores the list of spending to the state before the previous undoable command was executed. +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `undo` +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Undoable commands: commands that modifies any of the spending (`add`, `delete` and `edit`)."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:* +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`undo` (reverses the delete 1 command)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`stats` +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`undo` (command fails as there are no undoable commands executed previously)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`add n/textbook c/100` +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`undo` (reverses the add n/textbook c/100 command) +"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`undo` (reverses the delete 1 command)"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The last performed action is undone."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Reverses the most recent undo command. +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `redo` +"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`undo` (reverses the delete 1 command) +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`redo` (reapplies the delete 1 command)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`redo` (command fails as there are no undo commands executed previously)"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* `delete` 1 +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`add n/textbook c/100` +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`undo` (reverses the add n/textbook c/100 command) +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`undo` (reverses the delete 1 command) +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`redo` (reapplies the delete 1 command) +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "`redo` (reapplies the add n/textbook c/100 command)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The most recent undo command is reversed."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Clear all data : `clear`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Clears all entries from the application. +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `clear`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command clears all stored reminders and spending from the application, and sets the budget to a default value of $1000."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "All application data is cleared."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Format:* `exit`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*Expected Output:*"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Program exits."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Budget: The maximum amount of money set by the user to spend."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** Safe: The user has spent less or equal to his budget set."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** Deficit: The user has spent more than his budget set."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* Cost: Money spent by the user."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "* Spending: An expense incurred by the user."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Listed below is a summary of all available commands."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// tag::commandsummary[]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".Command Summary table"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|Feature | Command"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Help* | `help` +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Add* | `add n/NAME c/COST [d/DATE] [t/TAG]... [r/REMARKS]` +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "e.g. `add n/apple c/2.50 d/yesterday t/fruits r/expensive apple`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Edit* | `edit INDEX [n/NAME] [c/COST] [t/TAG]... [r/REMARKS]` +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "e.g. `edit 1 n/apple c/2.50 d/yesterday t/fruits r/expensive apple` +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Delete* | `delete INDEX` +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "e.g. `delete 123`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *List* | `list` +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *Sort*| `sort [PREFIX/SORT_ORDER]...` +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "choongyx"
        },
        "content": "e.g. `sort d/DESC c/ASC` +"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Find* | `find [n/NAME] [c/COST_RANGE] [d/DATE_RANGE] [r/REMARK] [t/TAG]` +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "e.g. `find n/apple orange c/1.00-200.00 d/19/09/2019 - 20/09/2019 r/healthy food t/fruit food`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *Sort* | `sort [PREFIX/SORT_ORDER]...` +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "e.g. `sort d/DESC c/ASC`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *Currency* | `currency [CURRENCYCODE]` +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "e.g. `currency USD`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *Exchange rate* | `exchangerate [AMOUNT] [CURRENCYCODE]` +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "e.g. `exchangerate`, `exchangerate 5 USD`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "| *Budget* | `budget MONTHLY_BUDGET` +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "e.g. `budget 18000`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "| *Show Budget* | `showbudget` +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "e.g. `showbudget`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Generate statistics*| `stats d/STARTDATE d/ENDDATE` +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "choongyx"
        },
        "content": "e.g. `stats d/01/01/2019 d/07/01/2019` +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Graph*| `graph d/STARTDATE d/ENDDATE` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "choongyx"
        },
        "content": "e.g. `graph d/01/01/2019 d/07/01/2019` +"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Import data*| `import p/FILE_PATH` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "e.g. `import p/C:\\Users\\User\\Documents\\importfile.csv` +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "choongyx"
        },
        "content": "| *Export data*| `export p/FILE_PATH` +"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "e.g. `export p/C:\\Users\\User\\Documents\\importfile.csv` +"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "| *Add reminder*| `reminder add d/DATE m/MESSAGE` +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "e.g. `reminder n/30/08/2020 m/Pay school fee`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "| *Delete reminder* | `reminder delete INDEX` +"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "e.g. `reminder delete 2`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *Undo*| `undo` +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *Redo*| `redo` +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *Clear*| `clear` +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| *Exit*| `exit` +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "choongyx"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "The command summary above displays all commands available in MoneyGoWhere."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "// end::commandsummary[]"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 32,
      "jonathantjendana": 115,
      "Nanosync": 254,
      "choongyx": 196,
      "-": 107,
      "austinsantoso": 17
    }
  },
  {
    "path": "docs/diagrams/AddReminderActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ":User executes AddReminderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "if() then ([All parameters present])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    if() then ([Valid Date Format])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        : Add a new reminder to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        the current reminder list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        : Update the list display"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        with the new reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    else ([Invalid Date Format])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        : Show Invalid date"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        format error message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "else([Missing date and/or message field(s)])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    : Show Invalid command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "      format error message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 20
    }
  },
  {
    "path": "docs/diagrams/AddReminderSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":AddReminderCommandParser\" as AddReminderCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \"a:AddReminderCommand\" as AddReminderCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \"r:Reminder\" as Reminder LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \"m:ReminderMessage\" as ReminderMessage LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \"deadline:Date\" as Date LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[-\u003e LogicManager : execute(\"reminder d/today m/Pay bill\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(\"reminder d/today m/Pay bill\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "create AddReminderCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "SpendingBookParser -\u003e AddReminderCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate AddReminderCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate AddReminderCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "SpendingBookParser -\u003e AddReminderCommandParser : parse(\"d/today m/Pay bill\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate AddReminderCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "create Reminder"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommandParser -\u003e Reminder"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate Reminder"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "create ReminderMessage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Reminder -\u003e ReminderMessage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate ReminderMessage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "ReminderMessage --\u003e Reminder : m"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate ReminderMessage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "create Date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Reminder -\u003e Date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate Date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Date --\u003e Reminder : deadline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate Date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Reminder --\u003e AddReminderCommandParser : r"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate Reminder"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "create AddReminderCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommandParser -\u003e AddReminderCommand : r"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate AddReminderCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommand --\u003e AddReminderCommandParser : a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate AddReminderCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommandParser --\u003e SpendingBookParser : a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate AddReminderCommandParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommandParser -[hidden]-\u003e AddReminderCommandParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "destroy AddReminderCommandParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "SpendingBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "LogicManager -\u003e AddReminderCommand : execute()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate AddReminderCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommand -\u003e Model : addReminder(r)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Model --\u003e AddReminderCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Create CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "CommandResult --\u003e AddReminderCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "AddReminderCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate AddReminderCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 93
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBook *-right-\u003e \"1\" UniqueSpendingList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "UniqueTagList -[hidden]down- UniqueSpendingList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "UniqueTagList -[hidden]down- UniqueSpendingList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "UniqueSpendingList o-right-\u003e Spending"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e Cost"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e Date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e Remark"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 10,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "if () then ([command commits SpendingBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Purge redundant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Save SpendingBook to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    spendingBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 4,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/DeleteReminderActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ":User executes DeleteReminderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "if() then ([Index present])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    if() then ([Index within bound])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        : Delete the specified reminder"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         from the current reminder list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        : Update the list display;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    else ([Index out of bound])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        : Show Invalid error"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         Index message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "else([Index absent])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    : Show Invalid command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     format error message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 19
    }
  },
  {
    "path": "docs/diagrams/DeleteReminderSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":MoneyGoWhereParser\" as MoneyGoWhereParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":DeleteReminderCommandParser\" as DeleteReminderCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \"d:DeleteReminderCommand\" as DeleteReminderCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[-\u003e LogicManager : execute(\"dreminder 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "LogicManager -\u003e MoneyGoWhereParser : parseCommand(\"dreminder 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate MoneyGoWhereParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "create DeleteReminderCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "MoneyGoWhereParser -\u003e DeleteReminderCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate DeleteReminderCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "DeleteReminderCommandParser --\u003e MoneyGoWhereParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate DeleteReminderCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "MoneyGoWhereParser -\u003e DeleteReminderCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate DeleteReminderCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "create DeleteReminderCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "DeleteReminderCommandParser -\u003e DeleteReminderCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate DeleteReminderCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "DeleteReminderCommand --\u003e DeleteReminderCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate DeleteReminderCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "DeleteReminderCommandParser --\u003e MoneyGoWhereParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate DeleteReminderCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "DeleteReminderCommandParser -[hidden]-\u003e MoneyGoWhereParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "destroy DeleteReminderCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "MoneyGoWhereParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate MoneyGoWhereParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "LogicManager -\u003e DeleteReminderCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate DeleteReminderCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "DeleteReminderCommand -\u003e Model : deleteReminder(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Model --\u003e DeleteReminderCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "DeleteReminderCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "CommandResult --\u003e DeleteReminderCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "DeleteReminderCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate DeleteReminderCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 69
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "DeleteCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "DeleteCommandParser --\u003e SpendingBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 10,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ExportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ":User input an export command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "if () then (valid folder path)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ":export all spending;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "else (invalid folder path)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "endif"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "stop"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 9
    }
  },
  {
    "path": "docs/diagrams/ExportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":ExportCommandParser\" as ExportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \"d:ExportCommand\" as ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "[-\u003e LogicManager : execute(\"export p/Documents\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(\"export p/Documents\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "create ExportCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "SpendingBookParser -\u003e ExportCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ExportCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ExportCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ExportCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "SpendingBookParser -\u003e ExportCommandParser : parse(\"Documents\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ExportCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "create ExportCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ExportCommandParser -\u003e ExportCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ExportCommand --\u003e ExportCommandParser : i"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ExportCommandParser --\u003e SpendingBookParser : i"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ExportCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ExportCommandParser -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "destroy ExportCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "SpendingBookParser --\u003e LogicManager : i"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "LogicManager -\u003e ExportCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ExportCommand -\u003e Model : getSpendingBookFilePath()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Model --\u003e ExportCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ExportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "CommandResult --\u003e ExportCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ExportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 69
    }
  },
  {
    "path": "docs/diagrams/FindActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ":User executes find command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "if () then ([valid fields present])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Use field data in predicates and save to Predicate List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Combine Predicate List to form a single predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Update Model based on predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " if () then([invalid field])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Display error message for invalid field;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " else ([missing field])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Display error message for missing field;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 20
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[-\u003e LogicManager : execute(\"find n/apple\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(\"find n/apple\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBookParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBookParser -\u003e FindCommandParser : parse(\" n/apple\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "FindCommandParser -\u003e FindCommand : predicates"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommandParser --\u003e SpendingBookParser : f"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommandParser -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBookParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommand -\u003e FindCommand : predicates.reduce(Predicate::and)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommand --\u003e FindCommand : predicate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommand -\u003e Model : updateFilteredSpendingList(predicate)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 76,
      "-": 1
    }
  },
  {
    "path": "docs/diagrams/GraphDataSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":GraphPanel\" as GraphPanel UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[-\u003e MainWindow : isShowGraph \u003d true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "MainWindow -\u003e LogicManager : getGraphData()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "LogicManager -\u003e Model : getStatsList()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Model --\u003e LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "LogicManager --\u003e MainWindow: graphData"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "MainWindow --\u003e GraphPanel: loadData(graphData)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate GraphPanel"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choongyx": 35
    }
  },
  {
    "path": "docs/diagrams/GraphSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":GraphCommandParser\" as GraphCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":GraphCommand\" as GraphCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[-\u003e LogicManager : execute(commandText)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(commandText)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "create GraphCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "SpendingBookParser -\u003e GraphCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate GraphCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "GraphCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate GraphCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "SpendingBookParser -\u003e GraphCommandParser : parse(argument)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate GraphCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "alt No arguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    create GraphCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    GraphCommandParser -\u003e GraphCommand: GraphCommand()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    activate GraphCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    GraphCommand --\u003e GraphCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    deactivate GraphCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "else else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    create GraphCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\tGraphCommandParser -\u003e GraphCommand: GraphCommand(DATE_START, DATE_END)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\tactivate GraphCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\tGraphCommand --\u003e GraphCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    deactivate GraphCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "GraphCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate GraphCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "GraphCommandParser -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "destroy GraphCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "SpendingBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "LogicManager -\u003e GraphCommand : execute()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate GraphCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "GraphCommand -\u003e Model : updateStatsPredicate(predicate)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Model --\u003e GraphCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": "GraphCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choongyx"
        },
        "content": "CommandResult --\u003e GraphCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "GraphCommand --\u003e LogicManager : MESSAGE_SUCCESS, isShowGraph \u003d true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate GraphCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choongyx": 76
    }
  },
  {
    "path": "docs/diagrams/ImportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ":User input an import command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "if () then (valid csv)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ":parse the rows in the file;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ":create a valid Spending list;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  :read a Spending from list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  :add Spending list to Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "else (invalid csv)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "endif"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "stop"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 12
    }
  },
  {
    "path": "docs/diagrams/ImportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":ImportCommandParser\" as ImportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \"d:ImportCommand\" as ImportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "participant \":Spending\" as Spending MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "[-\u003e LogicManager : execute(\"import p/validSpending.csv\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(\"import p/validSpending.csv\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "create ImportCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "SpendingBookParser -\u003e ImportCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ImportCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ImportCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "SpendingBookParser -\u003e ImportCommandParser : parse(\"validSpending.csv\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ImportCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "create ImportCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommandParser -\u003e ImportCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommand --\u003e ImportCommandParser : i"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommandParser --\u003e SpendingBookParser : i"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ImportCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommandParser -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "destroy ImportCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "SpendingBookParser --\u003e LogicManager : i"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "LogicManager -\u003e ImportCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommand -\u003e ImportCommand : readSpendingFromCsv(\"validSpending.csv\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "loop read csv file row by row until the end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  ImportCommand -\u003e ImportCommand : try"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  ImportCommand -\u003e ImportCommand: createSpending(rowAsMap)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  note right: rowAsMap: one row of data from csv file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  activate ImportCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    create Spending"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    ImportCommand -\u003e Spending"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    activate Spending"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    Spending --\u003e ImportCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    deactivate Spending"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  deactivate ImportCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "end"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommand --\u003e ImportCommand : Pair\u003cList\u003cSpending\u003e, List\u003cString\u003e\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "note right"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          returns a pair of lists:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          - first list consists of valid spending."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          - second list consists of error messages of invalid spending."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "end note"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommand -\u003e Model : addSpending(spending)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Model --\u003e ImportCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "CommandResult --\u003e ImportCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ImportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 93
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Class SpendingBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "LogicManager --\u003e\"1\" SpendingBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Interface ReadOnlySpendingBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Class SpendingBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Class ReadOnlySpendingBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Package Spending {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class Spending"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class Cost"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class Date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class Remark"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class SpendingList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Package Reminder {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "class Reminder"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "class ReminderList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "class ReminderMessage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Package Budget {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "class Budget"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "class BudgetMonth"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBook .up.|\u003e ReadOnlySpendingBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "ModelManager o--\u003e \"1\" SpendingBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingBook *--\u003e \"1\" SpendingList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingList o--\u003e \"*\" Spending"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e Name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e Cost"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e Date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e Remark"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Spending *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Name -[hidden]right-\u003e Cost"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Cost -[hidden]right-\u003e Date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Date -[hidden]right-\u003e Remark"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "ModelManager --\u003e\"1\" Spending : filtered and sorted list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "SpendingBook *--\u003e \"1\" ReminderList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ReminderList o--\u003e \"*\" Reminder"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Reminder *--\u003e ReminderMessage"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Reminder *--\u003e Date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ModelManager -right-\u003e\"1\" Reminder : filtered and sorted list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "SpendingBook *--\u003e \"1\" Budget"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Budget *--\u003e BudgetMonth"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 21,
      "Nanosync": 23,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/SetBudgetSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":BudgetCommandParser\" as BudgetCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":ParseUtil\" as ParseUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":Budget\" as Budget LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \"f:BudgetCommand\" as BudgetCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "[-\u003e LogicManager : execute(\"budget 100000\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(\"budget 100000\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "create BudgetCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "SpendingBookParser -\u003e BudgetCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate BudgetCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate BudgetCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "SpendingBookParser -\u003e BudgetCommandParser : parse(\" 100000\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate BudgetCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate Budget"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommandParser -\u003e ParseUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate ParseUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "create Budget"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "ParseUtil -\u003e Budget"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Budget --\u003e ParseUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate Budget"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "ParseUtil --\u003e BudgetCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate ParseUtil"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "create BudgetCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommandParser -\u003e BudgetCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate BudgetCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommand --\u003e BudgetCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate BudgetCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommandParser --\u003e SpendingBookParser : f"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate BudgetCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommandParser -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "destroy BudgetCommandParser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "SpendingBookParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "LogicManager -\u003e BudgetCommand : execute()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate BudgetCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommand -\u003e Model : setBudget(100000)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Model --\u003e BudgetCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "CommandResult --\u003e BudgetCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate BudgetCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "BudgetCommand -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "destroy BudgetCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 88
    }
  },
  {
    "path": "docs/diagrams/SortActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes sort command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "if () then ([valid fields present])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Determine sort order in parser based on given fields;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    :Update Model based on the sort order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " if () then([invalid field])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Display error message for invalid field;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " else ([missing field])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    :Display error message for missing field;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "-": 13
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":SortCommandParser\" as SortCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"s:SortCommand\" as SortCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "participant \":SpendingComparator\" as SpendingComparator LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"sort n/ASC\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(\"sort n/ASC\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "create SortCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "SpendingBookParser -\u003e SortCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "SortCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "SpendingBookParser -\u003e SortCommandParser : parse(\" n/ASC\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "create SortCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "SortCommandParser -\u003e SortCommand : fields"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "SortCommand --\u003e SortCommandParser : s"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "SortCommandParser --\u003e SpendingBookParser : s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "SortCommandParser -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "destroy SortCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "SpendingBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e SortCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "create SpendingComparator"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "SortCommand -\u003e SpendingComparator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "activate SpendingComparator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingComparator --\u003e SortCommand : comparator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate SpendingComparator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SortCommand -\u003e Model : updateSortedSpendingList(comparator)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "SortCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e SortCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "SortCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "destroy SpendingComparator"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "-": 74
    }
  },
  {
    "path": "docs/diagrams/StatsDataSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":StatsPanel\" as StatsPanel UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[-\u003e MainWindow : isShowStats \u003d true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "MainWindow -\u003e LogicManager : getStatsData()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "LogicManager -\u003e Model : getStatsList()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Model --\u003e LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "LogicManager --\u003e MainWindow: statsData"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "MainWindow --\u003e StatsPanel: loadData(statsData)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate StatsPanel"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choongyx": 35
    }
  },
  {
    "path": "docs/diagrams/StatsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":SpendingBookParser\" as SpendingBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":StatsCommandParser\" as StatsCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":StatsCommand\" as StatsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[-\u003e LogicManager : execute(commandText)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "LogicManager -\u003e SpendingBookParser : parseCommand(commandText)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate SpendingBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "create StatsCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "SpendingBookParser -\u003e StatsCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate StatsCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "StatsCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate StatsCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "SpendingBookParser -\u003e StatsCommandParser : parse(argument)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate StatsCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "alt No arguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    create StatsCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    StatsCommandParser -\u003e StatsCommand: StatsCommand()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    activate StatsCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    StatsCommand --\u003e StatsCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    deactivate StatsCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "else else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    create StatsCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\tStatsCommandParser -\u003e StatsCommand: StatsCommand(DATE_START, DATE_END)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\tactivate StatsCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\tStatsCommand --\u003e StatsCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    deactivate StatsCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "StatsCommandParser --\u003e SpendingBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate StatsCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "StatsCommandParser -[hidden]-\u003e SpendingBookParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "destroy StatsCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "SpendingBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate SpendingBookParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "LogicManager -\u003e StatsCommand : execute()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate StatsCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "StatsCommand -\u003e Model : updateStatsPredicate(predicate)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Model --\u003e StatsCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": "StatsCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choongyx"
        },
        "content": "CommandResult --\u003e StatsCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "StatsCommand --\u003e LogicManager : MESSAGE_SUCCESS, isShowStats \u003d true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate StatsCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choongyx": 76
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Interface SpendingBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Interface CommandStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Class JsonSpendingBookStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "StorageManager o--\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "StorageManager o--\u003e SpendingBookStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "StorageManager o--\u003e CommandStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "CommandStorageImpl .up.|\u003e CommandStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "JsonSpendingBookStorage .up.|\u003e SpendingBookStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "JsonSpendingBookStorage .down.\u003e JsonSerializableSpendingBook"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "JsonSerializableSpendingBook .down.\u003e JsonAdaptedSpending"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "JsonSerializableSpendingBook ..\u003e JsonAdaptedCurrency"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "JsonSerializableSpendingBook ..\u003e JsonAdaptedReminder"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "JsonSerializableSpendingBook ..\u003e JsonAdaptedBudget"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 13,
      "Nanosync": 3,
      "-": 14
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Class SpendingListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Class SpendingCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Class BudgetPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Class ReminderListPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Class ReminderCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Class GraphPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Class StatsPanel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "MainWindow *-down-\u003e SpendingListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "MainWindow *-down-\u003e ReminderListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "MainWindow *-down-\u003e GraphPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "MainWindow *-down-\u003e StatsPanel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "MainWindow *-down-\u003e BudgetPanel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ReminderListPanel -down-\u003e ReminderCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingListPanel -down-\u003e SpendingCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ReminderListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingCard --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ReminderCard --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "BudgetPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "GraphPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "StatsPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "BudgetPanel ..\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "ReminderCard ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "SpendingCard ..\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 17,
      "Nanosync": 7,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State1 as \"__sb0:SpendingBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State2 as \"__sb1:SpendingBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State3 as \"__sb2:SpendingBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State1 as \"__sb0:SpendingBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State2 as \"__sb1:SpendingBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State3 as \"__sb2:SpendingBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State1 as \"__sb0:SpendingBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State2 as \"__sb1:SpendingBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State3 as \"__sb2:SpendingBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State1 as \"__sb0:SpendingBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State2 as \"__sb1:SpendingBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State3 as \"__sb2:SpendingBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State1 as \"__sb0:SpendingBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State2 as \"__sb1:SpendingBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State3 as \"__sb2:SpendingBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State1 as \"__sb0:SpendingBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State2 as \"__sb1:SpendingBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    class State3 as \"__sb3:SpendingBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "note right on link: State sb2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UpDownSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "box STORAGE STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":StorageManager\" as StorageManager STORAGE_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "participant \":CommandStorage\" as CommandStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "[-\u003e LogicManager : getNextCommand()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "LogicManager -\u003e StorageManager : getNextCommand()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate StorageManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "StorageManager -\u003e CommandStorage : getNextCommand()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "activate CommandStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "StorageManager \u003c-- CommandStorage : command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate CommandStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "LogicManager \u003c-- StorageManager : command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate StorageManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003c-- LogicManager : command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 31
    }
  },
  {
    "path": "docs/diagrams/UpDownState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package commandHistoryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State1 as \"__ch0:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State2 as \"__ch1:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State3 as \"__ch2:String__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hide State1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class Pointer as \"Current Index \u003d -1\" #FFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 22
    }
  },
  {
    "path": "docs/diagrams/UpDownState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "title User input \"command 1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package commandHistoryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State1 as \"__ch0:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State2 as \"__ch1:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State3 as \"__ch2:String__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class Pointer as \"Current Index \u003d 1\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 21
    }
  },
  {
    "path": "docs/diagrams/UpDownState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "title User input \"command 2\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package commandHistoryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State1 as \"__ch0:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State2 as \"__ch1:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State3 as \"__ch2:String__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class Pointer as \"Current Index \u003d 2\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 20
    }
  },
  {
    "path": "docs/diagrams/UpDownState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "title User press up key"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package commandHistoryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State1 as \"__ch0:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State2 as \"__ch1:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State3 as \"__ch2:String__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class Pointer as \"Current Index \u003d 1\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 20
    }
  },
  {
    "path": "docs/diagrams/UpDownState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "title User press down key"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package commandHistoryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State1 as \"__ch0:String__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State2 as \"__ch1:String__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class State3 as \"__ch2:String__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class Pointer as \"Current Index \u003d 2\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 20
    }
  },
  {
    "path": "docs/team/choongyx.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d Choong Yong Xin - Project Portfolio for MoneyGoWhere"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d About the Project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "MoneyGoWhere is a finance application built by my team and I as part of a Software Engineering Project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "It was morphed from a basic command line interface Address Book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "MoneyGoWhere is designed to help students to keep track of all their spending and their related information such as date, cost and tags."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Notable features include allowing users to set budget goals, view statistics, set reminders for bills and export their data to a .csv file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d My Role"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": "My  role was to implement the statistics and graph features which are essential in allowing users analyze their spending habits."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "The following sections will illustrate these features in greater detail."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "These include the implementation details and also other contributions and relevant sections I have recorded in the User Guide and Developer Guide."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Below are a few icons and formatting which will be used in this document."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Important information that should be noted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Tips that can help you better navigate the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "`test`: Command to be executed or a component, class or object in the architecture of the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Additional useful information for this section."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "This section shows a summary of contributions I have made for the project."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* *Major enhancement*: I implemented the *statistics feature*."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** What it does: It allows the user to view their spending in the form of a pie-chart which organises the user\u0027s expenditure based on tags."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** Justification: This feature enhances the product significantly as it enables users to view their spending in the form of figures which is easier to read than text."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "It allows them to be more informed of their spending habits as they will be more aware of what they have spent their money on."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** Highlights: This enhancement required an in-depth understanding of the software architecture as it involves multiple components of the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* *Minor enhancement*: I implemented the *graph feature*."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** What it does: It allows the user to view their spending in the form of a graph based on a date range provided."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** Justification: This enables the user to easily track their spending by providing an overview of their spending within a specified date range."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** Highlights: This enhancement also required an in-depth understanding of the software architecture as it involves multple components of the application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dchoongyx[Collated code]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** Helped track issues on the team repository using labels, milestones and project card."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** Refactored and modified existing class `Address` to `Cost` to fit the needs of our application."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "(Pull requests https://github.com/AY1920S1-CS2103T-F13-3/main/pull/61)[#61],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/pull/67[#67],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/pull/71[#71])"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** Vetted and formatted the entire User Guide after individual contributions by team members. (Pull request https://github.com/AY1920S1-CS2103T-F13-3/main/pull/101[#101])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** Reviewed team member\u0027s documentations. (Pull requests"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/pull/80[#80]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/pull/85[#85],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/pull/98[#98])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** Updated Quick Start section and created a set of symbols/legends for User Guide (Pull requests https://github.com/AY1920S1-CS2103T-F13-3/main/pull/50/files[#50], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/101[#101])"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** Collated and updated profiles for all members of the team. (Pull request https://github.com/AY1920S1-CS2103T-F13-3/main/pull/7/files[#7])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** PRs reviewed with non-trivial review comments (Pull requests"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/pull/62)[#62],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/pull/70[#70],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/pull/81[#81]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": ")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** Conducted manual testing, reported bugs and offered suggestions for our team"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choongyx"
        },
        "content": "(Examples: https://github.com/AY1920S1-CS2103T-F13-3/main/issues/128[1],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/issues/122[2],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/issues/125[3],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/issues/124[4],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/issues/120[5],"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/issues/115[6],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/issues/114[7],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choongyx"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F13-3/main/issues/119[8])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choongyx"
        },
        "content": "*** Conducted manual testing, reported bugs and offered suggestions for other teams in the class"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Given below are sections I contributed to the User Guide, which include the Introduction, How To Use This Guide, Quick Start, Statistics feature and Graph feature."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choongyx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintroduction]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choongyx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstatistics]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choongyx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgraph]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choongyx"
        },
        "content": "Given below are sections on the implementation of the Statistics feature and Graph feature I have worked on."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choongyx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstatistics]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choongyx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgraph]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "choongyx": 104
    }
  },
  {
    "path": "docs/team/jonathantjendana.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d Jonathan Tjendana - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d PROJECT: MoneyGoWhere"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "MoneyGoWhere is a desktop personal finance application targeted at students of the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "It allows students to keep track of all their spending and their related information such as date, cost and tags."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Users can also set budget goals, view statistics, set reminders for bills and export their data to a .csv file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFx."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "The CLI is equipped with a Natural Language Processing (NLP) library, natty, to read in date input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* *Major enhancement*: added *the ability to import/export data*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** What it does: allows the user to import and export data to and from a .csv file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** Justification: This feature improves the product significantly because a user can have existing data before starting to use the application and to export the data if he would like to process the data using other applications such as Microsoft Excel."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** Highlights: This enhancement affects other commands as it modifies the spending list. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** Credits: Jackson library."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* *Minor enhancement*: Redesign the user interface to fit the application"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003djonathantjendana\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djonathantjendana\u0026tabRepo\u003dAY1920S1-CS2103T-F13-3%2Fmain%5Bmaster%5D[Collated code]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "*** Updated the GUI (Pull requests https://github.com/AY1920S1-CS2103T-F13-3/main/pull/134[#134], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/136[#136], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/137[#137])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "*** Changed email field into remark field https://github.com/AY1920S1-CS2103T-F13-3/main/pull/69[#68]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/AY1920S1-CS2103T-F13-3/main/pull/39[#39], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/47[#47]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the Developer Guide: https://github.com/AY1920S1-CS2103T-F13-3/main/pull/98[#98]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S1-CS2103T-F13-3/main/pull/106[#106]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexport]"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 62
    }
  },
  {
    "path": "docs/team/nanosync.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d Benedict Pak - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d PROJECT: MoneyGoWhere"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "MoneyGoWhere is a personal finance application targeted at students at the National University of Singapore (NUS), designed by my team and I for our Software Engineering project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Designed primarily with a Command Line Interface (CLI), it allows students to keep track of all their spending with related information such as date, cost and tags. Users can also set budget goals, view statistics, view exchange rates, set their existing  set reminders for bills, import and export their data from and to a .csv file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d My Role"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "I was tasked to complete find and sort features, as well as natural language date parsing. The sections that follow in this document will elaborate these features in detail. I have also made notable contributions to the User Guide and Developer Guide."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Listed below are some notations that are used throughout the document."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ".Legend table"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"^15%,85%\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "a| Icon | Description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "a| `command` | Command that can be executed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "a| icon:lightbulb-o[role\u003d\"icon-tip\", size\u003d\"2x\"] | Tips that might be helpful in navigating the application"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "a| icon:info-circle[role\u003d\"icon-note\", size\u003d\"2x\"] | Important information that should be noted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "If there are any additional related information, it will be described in a block below:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Useful information for a deeper understanding of the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "These icons and their following descriptions enable greater clarity in understanding the document."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "This section shows a summary of my contributions to the team project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Major enhancement: Refined search and user-defined sort"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "I have implemented both a refined search and user-defined sort function."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d What it does"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "It allows the student to search for an existing spending based on different keywords. Based on this search, or based on the existing spending entries listed, the student may also choose to sort displayed spending entries based on their preference."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "To access this function, the student may type `find`, followed by the necessary criteria to refine their search results. They can also type `sort` to re-organise the current displayed data."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "In the event that the listed spending results are too general, students can narrow down their search results to a range of spending, or a specific spending. Students can now meticulously observe what they have spent their money on, based on a given date range."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Highlights"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "This enhancement functions well with existing commands. The design approach was challenging for the sort function as it particularly required some restructuring of how the sorted list would be implemented. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d Minor enhancement: Natural language date parsing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "I have also implemented natural language date parsing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d What it does"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "This feature allows users to enter dates without a fixed format, similar to how dates are written in real life."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "Users no longer need to enter fixed format dates which are difficult to follow and are free to enter a non-fixed format, similar to how dates are written in real life."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Highlights"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "This enhancement functions extremely well with existing commands. Other features like `stats`, `budget`, `reminder` leverage on this enhancement, which makes it a key implementation for the application."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Credits"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*natty* library was used to aid in natural language parsing. However, many modifications were applied in order to allow support for _DD/MM/YYYY_ dates, which is a missed feature on the author\u0027s part."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d\u003d\u003d Code contributed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dnanosync[Collated code]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** Project management"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Team lead of a team size of 5"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Handled integration in repository"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Guided teammates for tips and tricks in IntelliJ and git rebase workflow"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Managed releases `v1.3` - `v1.4` on GitHub"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Managed project page on GitHub for milestone tracking"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Enforced maintaining code coverage above 75%"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Added RepoSense support"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Refactored and modified existing classes, including package name `AddressBook` to `SpendingBook` code base to match application needs: (https://github.com/AY1920S1-CS2103T-F13-3/main/pull/73[Modified address book comments and sample data #73], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/75[Fixed person to spending #75], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/78[Changed package name from AddressBook to SpendingBook #78])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Cleaned up the User Guide and Developer Guide: (https://github.com/AY1920S1-CS2103T-F13-3/main/pull/106[Address UG and DG changes #106])"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): (https://github.com/AY1920S1-CS2103T-F13-3/main/pull/56[Added reminder class #56], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/68[Refactor Email to Remark #68], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/95[Add commands for reminders in UG and amended DG for MoneyGoWhere #95])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Did manual testing, reported bugs and offered suggestions for other teams in the class"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com/AY1920S1-CS2103T-F13-3/main/pull/55[Add base for natural language processing #55], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/62[Update NLP #62], https://github.com/AY1920S1-CS2103T-F13-3/main/pull/69[Refactor date validation #69])"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "*** Integrated Netlify in GitHub to the team repo to allow continuous deployment of documentation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| Listed below are sections I contributed to the User Guide. This includes the Features section, particularly Flexible Date Formats, Find, Sort and Command Summary section."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "include::../UserGuide.adoc[tag\u003dflexibledateformats]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsort]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommandsummary]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "| Listed below are sections I contributed to the Developer Guide. This includes the features section for Find and Sort, and the Product Scope section."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsort]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dproductscope]"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 133
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.JsonSpendingBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.SpendingBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MoneyGoWhere ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBookStorage spendingBookStorage \u003d new JsonSpendingBookStorage(userPrefs.getSpendingBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        storage \u003d new StorageManager(spendingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s MoneyGoWhere and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * The data from the sample MoneyGoWhere will be used instead if {@code storage}\u0027s MoneyGoWhere is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * or an empty MoneyGoWhere will be used instead if errors occur when reading {@code storage}\u0027s MoneyGoWhere."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Optional\u003cReadOnlySpendingBook\u003e spendingBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        ReadOnlySpendingBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            spendingBookOptional \u003d storage.readSpendingBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (!spendingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SpendingBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            initialData \u003d spendingBookOptional.orElseGet(SampleDataUtil::getSampleSpendingBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty SpendingBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            initialData \u003d new SpendingBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SpendingBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            initialData \u003d new SpendingBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SpendingBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        logger.info(\"Starting MoneyGoWhere \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping MoneyGoWhere ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 43,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String LOG_FILE \u003d \"moneygowhere.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX \u003d \"The Reminder index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX \u003d \"The Spending index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_INVALID_BUDGET_AMOUNT \u003d \"The budget amount provided is invalid\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            + \"Budget must be a positive number no greater that 1,000,000,000\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_SPENDING_LISTED_OVERVIEW \u003d \"%1$d spending entries listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 2,
      "Nanosync": 1,
      "-": 10,
      "austinsantoso": 3
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/util/DateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Contains utility methods used for parsing dates with natural language processing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /** Formal date formatters **/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT_PRETTY \u003d DateTimeFormatter.ofPattern(\"EE dd/MM/yyyy\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT_TWO_DIGIT_YEAR \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /** Date pattern which allows leading zeroes to be omitted (DD/MM/YYYY, DD-MM-YYYY, D-MM-YYYY or DD-M-YYYY) **/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Pattern DATE_DEFAULT_PATTERN \u003d Pattern.compile(\"([0-9]{1,2})(?:[/\\\\-])([0-9]{1,2})\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"(?:(?:[/\\\\-])([0-9]+)|)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /** Date pattern with dashes (01-Jan-2019). **/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Pattern DATE_MONTH_DASH_PATTERN \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Pattern.compile(\"([0-9]{1,2})-([a-zA-Z]{3})(?:$|-)([0-9]{0,4})\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /** Date pattern with spaces (01 Jan 2019). **/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Pattern DATE_MONTH_SPACE_PATTERN \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Pattern.compile(\"([0-9]{1,2}) ([a-zA-Z]{3})(?:$| )([0-9]{0,4})\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /** Date pattern with dashes (Jan-01-2019). **/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Pattern DATE_MONTH_ALT_DASH_PATTERN \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Pattern.compile(\"([a-zA-Z]{3})-([0-9]{1,2})(?:$|-)([0-9]{0,4})\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /** Date pattern with spaces (Jan 01 2019). **/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Pattern DATE_MONTH_ALT_SPACE_PATTERN \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Pattern.compile(\"([a-zA-Z]{3}) ([0-9]{1,2})(?:$| )([0-9]{0,4})\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /** Prohibited day tokens **/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String[] PROHIBITED_DAY_TOKENS \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new String[] { \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\", \"sun\" };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /** Parser for natural language processing. **/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Parser PARSER \u003d new Parser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses a given date in natural language, processes it and returns a formatted date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * If there are multiple dates in the date input, return the first date found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param date Input date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return Formatted date as Date type"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException If the input cannot be parsed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cLocalDate\u003e dates \u003d parseDates(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (dates \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(\"Invalid input date\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return dates.get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses a given date in natural language, processes it and returns a formatted date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param date Input date"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return List of formatted dates"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static List\u003cLocalDate\u003e parseDates(String date) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Normalises this date input"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String normalisedDate \u003d normaliseDate(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cDateGroup\u003e dateGroups \u003d PARSER.parse(normalisedDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (dateGroups.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        DateGroup dateGroup \u003d dateGroups.get(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Disallow explicit time input"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!dateGroup.isTimeInferred()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cDate\u003e dates \u003d dateGroup.getDates();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (dates.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return dates.stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .map(d -\u003e d.toInstant().atZone(ZoneId.systemDefault()).toLocalDate())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Checks if an input date is valid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param date Input date"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return True if the input date was valid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return parseDates(date) !\u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Checks if an input date is valid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param year Year"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param month Month"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param day Day"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return True if the input date was valid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static boolean isValidDate(int year, int month, int day) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Validates a date matcher without the month."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Rationale is to let NLP handle the month."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param year Year"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param day Day"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return True if the matcher input is correct"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static boolean isMatcherInvalid(String year, int day) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return day \u003e 31 || (year !\u003d null \u0026\u0026 year.length() \u003e 4);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Process a matcher based on formatting groups: DD MM YYYY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param matcher Matcher to be processed"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return True if the matcher parameter groups were valid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static boolean processMatcher(Matcher matcher, int dayGroup, int monthGroup, int yearGroup) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        int day \u003d Integer.parseInt(matcher.group(dayGroup));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String month \u003d matcher.group(monthGroup);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String year \u003d matcher.group(yearGroup);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (isMatcherInvalid(year, day)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Check February (edge case)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (month.equalsIgnoreCase(\"feb\") \u0026\u0026 day \u003e 28) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return isValidDate(Integer.parseInt(year), 2, day);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Normalises a given date format, from dd/mm/yyyy to yyyy/mm/dd."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return A standardised format date"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static String normaliseDate(String date) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // The date should not only contain numbers."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (StringUtil.isNumeric(date)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String[] tokens \u003d date.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Check other formats"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Matcher matcherAlt1 \u003d DATE_MONTH_DASH_PATTERN.matcher(date);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Matcher matcherAlt2 \u003d DATE_MONTH_SPACE_PATTERN.matcher(date);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Matcher matcherAlt3 \u003d DATE_MONTH_ALT_DASH_PATTERN.matcher(date);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Matcher matcherAlt4 \u003d DATE_MONTH_ALT_SPACE_PATTERN.matcher(date);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (matcherAlt1.matches()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return processMatcher(matcherAlt1, 1, 2, 3) ? date : \"\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } else if (matcherAlt2.matches()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return processMatcher(matcherAlt2, 1, 2, 3) ? date : \"\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } else if (matcherAlt3.matches()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return processMatcher(matcherAlt3, 2, 1, 3) ? date : \"\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } else if (matcherAlt4.matches()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return processMatcher(matcherAlt4, 2, 1, 3) ? date : \"\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Matcher matcher \u003d DATE_DEFAULT_PATTERN.matcher(token);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (matcher.matches()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                // Manually correct expected dd/mm/yyyy input to yyyy/mm/dd (natty recognised)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                int day \u003d Integer.parseInt(matcher.group(1));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                int month \u003d Integer.parseInt(matcher.group(2));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String capturedYear \u003d matcher.group(3);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                int year \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                if (capturedYear !\u003d null \u0026\u0026 !capturedYear.isEmpty()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    if (capturedYear.length() \u003e 4) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                        return \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    year \u003d Integer.parseInt(capturedYear);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    // Invalidate year inputs like 79 or 89"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    if (year \u003c 1900) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                        return \"\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                if (!isValidDate(year, month, day)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    return \"\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                if (builder.length() \u003e 0) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    builder.append(\" \");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                builder.append(String.format(\"%d/%d/%d\", year, month, day));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                for (String prohibitedToken : PROHIBITED_DAY_TOKENS) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    if (token.equalsIgnoreCase(prohibitedToken)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                            || token.equalsIgnoreCase(prohibitedToken + \",\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                        return \"\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    builder.append(token);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    builder.append(\" \").append(token);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Formats a date to a string."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Example output: 25/12/2019"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param date Input date"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return A formatted date string"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static String formatDate(LocalDate date) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return date.format(DATE_FORMAT);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Pretty formats a date to a string."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Example output: Mon 25/12/2019"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param date Input date"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return A formatted date string"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static String prettyFormatDate(String date) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(date, DATE_FORMAT);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return DATE_FORMAT_PRETTY.format(parsedDate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //@@author minpyaemoe"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Formats a date to a string with two-digit year."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Example output: 25/12/19"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param date Input date"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return A formatted date string"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String twoDigitYearFormatDate(String date) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(date, DATE_FORMAT);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return DATE_FORMAT_TWO_DIGIT_YEAR.format(parsedDate);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //@@author austinsantosoo"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns today\u0027s date as a LocalDate."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return The LocalDate which represents today."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static LocalDate getTodayDate() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //@@author minpyaemoe"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the number of days between two localDate objects in long."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param d1 first LocalDate"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param d2 second LocalDate"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return The number of days between first localDate and second"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static long getDaysBetween(LocalDate d1, LocalDate d2) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return ChronoUnit.DAYS.between(d1, d2);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 40,
      "Nanosync": 286
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/util/MoneyUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "//@@author jonathantjendana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Contains utility methods used for parsing large decimal to a more readable string"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class MoneyUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static char[] suffix \u003d new char[]{\u0027k\u0027, \u0027M\u0027, \u0027B\u0027, \u0027T\u0027};"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    //@@author jonathantjendana-reused"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    //Reused from https://stackoverflow.com/a/4753866 with minor modifications"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Recursive implementation, invokes itself for each factor of a thousand, increasing the class on each invocation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param n the number to format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param iteration in fact this is the class from the array c"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @return a String representing the number n formatted in a cool looking way."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static String format(double n, int iteration) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        double d \u003d ((long) n / 100) / 10.0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        boolean isRound \u003d (d * 10) % 10 \u003d\u003d 0; //true if the decimal part is equal to 0 (then it\u0027s trimmed anyway)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return (d \u003c 1000 // this determines the class, i.e. \u0027k\u0027, \u0027m\u0027 etc"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ? ((d \u003e 99.9 || isRound || (!isRound \u0026\u0026 d \u003e 9.99) ? //this decides whether to trim the decimals"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                        (int) d * 10 / 10 : d + \"\" // (int) d * 10 / 10 drops the decimal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ) + \"\" + suffix[iteration])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                : format(d, iteration + 1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    //@@author jonathantjendana"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Formats a large decimal to a more readable string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * e.g 100000 \u003d 100k"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static String format(double number) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return number \u003e\u003d 1000"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ? format(number, 0)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                : String.format(\"%.2f\", number);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 41
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Checks if an input is numeric."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param s Input string"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return True if an input is numeric."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static boolean isNumeric(String s) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 16,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns the SpendingBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @see seedu.moneygowhere.model.Model#getSpendingBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    ReadOnlySpendingBook getSpendingBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of spending */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    ObservableList\u003cSpending\u003e getFilteredSpendingList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /** Returns an unmodifiable view of the sorted list of reminders */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    ObservableList\u003cReminder\u003e getSortedReminderList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns the user prefs\u0027 MoneyGoWhere file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Path getSpendingBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns a map of spending with key and value pair representing data for the statistics chart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    LinkedHashMap\u003cString, Double\u003e getStatsData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns a map of spending with key and value pair representing data for the graph."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    LinkedHashMap\u003cString, Double\u003e getGraphData();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the previous user inputted command with respect to the current index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return The previous user inputted command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String getPrevCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the next user inputted command with respect to the current index."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return The next user inputted command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String getNextCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 5,
      "Nanosync": 12,
      "choongyx": 12,
      "-": 36,
      "austinsantoso": 12
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.SpendingBookParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final SpendingBookParser spendingBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBookParser \u003d new SpendingBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storage.addCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Command command \u003d spendingBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (command instanceof ExportCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            saveSpendingBook(model.getSpendingBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            saveSpendingBook(model.getSpendingBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Saves the given {@link ReadOnlySpendingBook} to the storage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param spendingBook cannot be null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @throws CommandException if there was any problem writing to the file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void saveSpendingBook(ReadOnlySpendingBook spendingBook) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            storage.saveSpendingBook(spendingBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns a map of spending with key and value pair representing data for the statistics chart."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * The key represents the different tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * The value represents the cumulative cost for that tag."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * @return the map of data used for the statistics"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public LinkedHashMap\u003cString, Double\u003e getGraphData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        ObservableList\u003cSpending\u003e spendingList \u003d model.getStatsList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        LinkedHashMap\u003cString, Double\u003e graphData \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        for (Spending s : spendingList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            if (graphData.containsKey(s.getDate().value)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                graphData.put(s.getDate().value,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    graphData.get(s.getDate().value) + Double.parseDouble(s.getCost().toString()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                graphData.put(s.getDate().value, Double.parseDouble(s.getCost().toString()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return graphData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns a map of spending with key and value pair representing data for the statistics chart."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * The key represents the different tags."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * The value represents the cumulative cost for that tag."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * @return the map of data used for the statistics"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public LinkedHashMap\u003cString, Double\u003e getStatsData() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        ObservableList\u003cSpending\u003e spendingList \u003d model.getStatsList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        LinkedHashMap\u003cString, Double\u003e statsData \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        for (Spending s : spendingList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d s.getTags();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            for (Tag t: tagSet) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                if (statsData.containsKey(t.tagName)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    statsData.put(t.tagName, statsData.get(t.tagName) + Double.parseDouble(s.getCost().toString()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    statsData.put(t.tagName, Double.parseDouble(s.getCost().toString()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return statsData;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public ReadOnlySpendingBook getSpendingBook() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return model.getSpendingBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ObservableList\u003cSpending\u003e getFilteredSpendingList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return model.getFilteredSpendingList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ObservableList\u003cReminder\u003e getSortedReminderList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return model.getSortedReminderList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Path getSpendingBookFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return model.getSpendingBookFilePath();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getPrevCommand() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return storage.getPrevCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return storage.getNextCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 6,
      "jonathantjendana": 16,
      "Nanosync": 19,
      "choongyx": 49,
      "-": 54,
      "austinsantoso": 13
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Adds a Spending to the MoneyGoWhere list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Spending to MoneyGoWhere. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + PREFIX_REMARK + \"REMARK \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + PREFIX_NAME + \"Apple \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + PREFIX_DATE + \"today \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            + PREFIX_COST + \"1.50 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + PREFIX_REMARK + \"Keeps the doctor away \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String NO_DUPLICATE_MESSAGE_SUCCESS \u003d \"New Spending added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOUND \u003d \"The spending with the same attributes found\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String DUPLICATE_MESSAGE_SUCCESS \u003d \"Duplicate spending added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final Spending toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public AddCommand(Spending spending) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(spending);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        toAdd \u003d spending;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Spending tempSpending \u003d toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!model.getCurrencyInUse().name.equalsIgnoreCase(\"SGD\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            double updatedCost \u003d Double.parseDouble(toAdd.getCost().value) / model.getCurrencyInUse().rate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Cost cost \u003d new Cost(String.format(\"%.2f\", updatedCost));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            tempSpending \u003d new Spending(toAdd.getName(), toAdd.getDate(), toAdd.getRemark(), cost,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    toAdd.getTags());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (model.hasSpending(tempSpending)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            feedbackToUser \u003d MESSAGE_DUPLICATE_FOUND + \"\\n\" + String.format(DUPLICATE_MESSAGE_SUCCESS, tempSpending);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            feedbackToUser \u003d String.format(NO_DUPLICATE_MESSAGE_SUCCESS, tempSpending);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.addSpending(tempSpending);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 14,
      "jonathantjendana": 1,
      "Nanosync": 25,
      "choongyx": 2,
      "-": 36,
      "austinsantoso": 4
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/BudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Sets the budget of the MoneyGoWhere list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Budget has been updated!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            + \"New budget is \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            + \": Sets the monthly budget specified by the amount given by the user input.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            + \"Parameters: value (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 10000\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    //Budget must be valid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public BudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Currency currencyInUse \u003d model.getCurrencyInUse();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        double budgetAmount \u003d budget.getAmount();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String budgetString \u003d budget.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (!model.getCurrencyInUse().name.equalsIgnoreCase(\"SGD\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            budget \u003d new Budget(budgetAmount / currencyInUse.rate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (budget.getAmount() \u003c 0 || budget.getAmount() \u003e 1000000000) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_AMOUNT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.setBudgetAmount(budget);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + currencyInUse.symbol + budgetString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            || (other instanceof BudgetCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            \u0026\u0026 budget.equals(((BudgetCommand) other).budget));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "austinsantoso": 54
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Clears the MoneyGoWhere list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"MoneyGoWhere has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.clearBudgetSum();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.setSpendingBook(new SpendingBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "-": 17,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public Map\u003cDate, Double\u003e getGraphData(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public Map\u003cTag, Double\u003e getStatsData(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public String getStatsMessage(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "choongyx": 15,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /** Graph information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private final boolean showGraph;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /** Stats information should be shown to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private final boolean showStats;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showGraph, boolean showStats, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        this.showGraph \u003d showGraph;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        this.showStats \u003d showStats;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public boolean isShowGraph() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return showGraph;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public boolean isShowStats() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return showStats;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 showGraph \u003d\u003d otherCommandResult.showGraph"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 showStats \u003d\u003d otherCommandResult.showStats"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return Objects.hash(feedbackToUser, showGraph, showStats, exit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "choongyx": 21,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/CurrencyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Views or changes the currency in use."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class CurrencyCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"currency\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the currency used in the application.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sgd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CURRENCY_DISPLAY_IN_USE \u003d \"The current currency in use is: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CURRENCY_NONEXISTENT \u003d \"Specified currency does not exist.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CURRENCY_ALREADY_CHANGED \u003d \"Currency already in: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CURRENCY_CHANGE_SUCCESS \u003d \"Currency changed to: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private String currency;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public CurrencyCommand(String currency) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (currency.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CURRENCY_DISPLAY_IN_USE, model.getCurrencyInUse().name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cCurrency\u003e currencies \u003d model.getCurrencies()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .filter(c -\u003e c.name.equalsIgnoreCase(currency))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (currencies.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new CommandException(MESSAGE_CURRENCY_NONEXISTENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency newCurrency \u003d currencies.get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (newCurrency.isSameCurrency(model.getCurrencyInUse())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CURRENCY_ALREADY_CHANGED, newCurrency.name));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.setCurrencyInUse(newCurrency);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CURRENCY_CHANGE_SUCCESS, newCurrency.name));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!(other instanceof CurrencyCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CurrencyCommand c \u003d (CurrencyCommand) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return currency.equalsIgnoreCase(c.currency);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 79
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Deletes a Spending identified using it\u0027s displayed index from the MoneyGoWhere list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            + \": Deletes the Spending identified by the index number used in the displayed Spending list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_DELETE_SPENDING_SUCCESS \u003d \"Deleted Spending: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        List\u003cSpending\u003e lastShownList \u003d model.getFilteredSpendingList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spendingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.deleteSpending(spendingToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SPENDING_SUCCESS, spendingToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 7,
      "-": 39,
      "austinsantoso": 7
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.model.Model.PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Edits the details of an existing Spending in the MoneyGoWhere list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Spending identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            + \"by the index number used in the displayed Spending list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            + \"[\" + PREFIX_COST + \"COST] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + PREFIX_DATE + \"today \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + PREFIX_REMARK + \"Likes to play soccer\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_EDIT_SPENDING_SUCCESS \u003d \"Edited Spending: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_INVALID_SPENDING_INDEX \u003d \"Spending index is invalid. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"It must be a nonzero integer value.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final EditSpendingDescriptor editSpendingDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param index of the Spending in the filtered Spending list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param editSpendingDescriptor details to edit the Spending with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EditCommand(Index index, EditSpendingDescriptor editSpendingDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(editSpendingDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.editSpendingDescriptor \u003d new EditSpendingDescriptor(editSpendingDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        List\u003cSpending\u003e lastShownList \u003d model.getFilteredSpendingList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        EditSpendingDescriptor tempDescriptor \u003d editSpendingDescriptor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!model.getCurrencyInUse().name.equalsIgnoreCase(\"SGD\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 tempDescriptor.getCost().isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Cost cost \u003d tempDescriptor.getCost().get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            double updatedCost \u003d Double.parseDouble(cost.value) / model.getCurrencyInUse().rate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            tempDescriptor.setCost(new Cost(String.format(\"%.2f\", updatedCost)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spendingToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Spending editedSpending \u003d createEditedSpending(spendingToEdit, tempDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.setSpending(spendingToEdit, editedSpending);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.updateFilteredSpendingList(PREDICATE_SHOW_ALL_SPENDINGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SPENDING_SUCCESS, editedSpending));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Creates and returns a {@code Spending} with the details of {@code SpendingToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * edited with {@code editSpendingDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static Spending createEditedSpending(Spending spendingToEdit,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            EditSpendingDescriptor editSpendingDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assert spendingToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Name updatedName \u003d editSpendingDescriptor.getName().orElse(spendingToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Date updatedDate \u003d editSpendingDescriptor.getDate().orElse(spendingToEdit.getDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Remark updatedRemark \u003d editSpendingDescriptor.getRemark().orElse(spendingToEdit.getRemark());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Cost updatedCost \u003d editSpendingDescriptor.getCost().orElse(spendingToEdit.getCost());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editSpendingDescriptor.getTags().orElse(spendingToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new Spending(updatedName, updatedDate, updatedRemark, updatedCost, updatedTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 editSpendingDescriptor.equals(e.editSpendingDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Stores the details to edit the Spending with."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Each non-empty field value will replace the corresponding field value of the Spending."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static class EditSpendingDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        private Cost cost;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public EditSpendingDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public EditSpendingDescriptor(EditSpendingDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            setCost(toCopy.cost);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, date, remark, cost, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        public void setCost(Cost cost) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            this.cost \u003d cost;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        public Optional\u003cCost\u003e getCost() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return Optional.ofNullable(cost);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            if (!(other instanceof EditSpendingDescriptor)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            EditSpendingDescriptor e \u003d (EditSpendingDescriptor) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    \u0026\u0026 getCost().equals(e.getCost())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 15,
      "Nanosync": 40,
      "choongyx": 9,
      "-": 141,
      "austinsantoso": 28
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/ExchangeRateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Views the currently stored exchange rates or converts a specified currency into SGD."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class ExchangeRateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exchangerate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows exchange rates.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"If no amount and currency is specified, all exchange rates are shown.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" [AMOUNT] [CURRENCYCODE]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"CURRENCYCODE can be: USD, EUR, IDR, MYR, INR, MMK\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_INVALID_AMOUNT \u003d \"Amount must be non-negative\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_INVALID_CURRENCY \u003d \"Specified currency does not exist\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_SAME_CURRENCY \u003d \"Specified currency SGD will return the same result.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private String currencyCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public ExchangeRateCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        amount \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        currencyCode \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public ExchangeRateCommand(double amount, String currencyCode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(currencyCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.currencyCode \u003d currencyCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (amount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            sb.append(\"Current exchange rates: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            for (Currency currency : model.getSpendingBook().getCurrencies()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                sb.append(currency);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            String trimmedResult \u003d sb.substring(0, sb.lastIndexOf(\",\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new CommandResult(trimmedResult);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency targetCurrency \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Currency c : model.getCurrencies()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (c.name.equalsIgnoreCase(currencyCode)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                targetCurrency \u003d c;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (targetCurrency \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CURRENCY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String output \u003d String.format(\"According to our exchange rate, %s%.2f %s \u003d $%.2f SGD\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                targetCurrency.symbol, amount, targetCurrency.name, amount / targetCurrency.rate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new CommandResult(output);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof ExchangeRateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 amount \u003d\u003d (((ExchangeRateCommand) other).amount)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 currencyCode.equalsIgnoreCase(((ExchangeRateCommand) other).currencyCode)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 78
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MoneyGoWhere as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "choongyx": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema.Builder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FolderPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Exports all spending to the filepath."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \": Exports all spending from the spending list to the folder. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + PREFIX_PATH + \"FOLDERPATH\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + PREFIX_PATH + \"C:\\\\Users\\\\User\\\\Documents\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported all spending to %s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private final FolderPath fullFolderPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public ExportCommand(FolderPath folderPath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(folderPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        fullFolderPath \u003d folderPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            JsonNode jsonTree \u003d new ObjectMapper().readTree(model.getSpendingBookFilePath().toFile()).get(\"spendings\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            Builder csvSchemaBuilder \u003d CsvSchema.builder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            JsonNode firstObject \u003d jsonTree.elements().next();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            firstObject.fieldNames().forEachRemaining(fieldName -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                csvSchemaBuilder.addColumn(fieldName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            CsvSchema csvSchema \u003d csvSchemaBuilder.build().withHeader();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            CsvMapper csvMapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            File file;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            if (fullFolderPath.toString().endsWith(\".csv\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                file \u003d new File(fullFolderPath.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                file \u003d new File(fullFolderPath.toString() + \"/moneygowhere.csv\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            csvMapper.writerFor(JsonNode.class)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    .with(csvSchema)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    .writeValue(file, jsonTree);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, file.getAbsolutePath()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } catch (NoSuchElementException ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u0026\u0026 fullFolderPath.equals(((ExportCommand) other).fullFolderPath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 79
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Finds and lists all spending in MoneyGoWhere based on matching fields."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Conditions are stored in a predicate list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all spending entries whose names contain any of \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Not all fields are necessary, but they are combined together to form a query.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Parameters: n/KEYWORD [MORE_KEYWORDS]...  d/DATE_RANGE c/COST_RANGE r/REMARK t/TAG\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/chicken rice d/1/1/2019 to 2/1/2019 c/1.50-5 r/tasty t/food\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_DATE_RANGE_CONSTRAINTS \u003d \"Invalid date range provided.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"You must only enter two Date values and \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"DATE_START must be earlier or equal to DATE_END.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Valid values are: today, yesterday, tomorrow or a formal date: DD/MM/YYYY, DD-MM-YYYY or YYYY-MM-DD.\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_COST_RANGE_CONSTRAINTS \u003d \"You must enter two Cost values and \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"the first value cannot exceed the second value.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Cost must be a number with at most 2 decimal places, and it should not be blank.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final List\u003cPredicate\u003cSpending\u003e\u003e predicates;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cSpending\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Optional\u003cPredicate\u003cSpending\u003e\u003e predicate \u003d predicates.stream().reduce(Predicate::and);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (predicate.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            model.updateFilteredSpendingList(failed -\u003e false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    String.format(Messages.MESSAGE_SPENDING_LISTED_OVERVIEW, model.getFilteredSpendingList().size()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.updateFilteredSpendingList(predicate.get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(Messages.MESSAGE_SPENDING_LISTED_OVERVIEW, model.getFilteredSpendingList().size()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 63,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/GraphCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.model.Model.PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "public class GraphCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"graph\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \": Updates the graph panel.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"DATE_START and\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"DATE_END\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"today \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"tomorrow \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String MESSAGE_INVALID_DATERANGE \u003d \"Date range provided is invalid. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"Only 2 dates, DATE_START and DATE_END are to be provided with \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"DATE_START being earlier or equal to DATE_END.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"today \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"tomorrow \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private String messageSuccess;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private final Logger logger \u003d Logger.getLogger(\"Graph Logger\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Creates a GraphCommand with whole date range of all spending"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * if date range is not specified."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public GraphCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        startDate \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        endDate \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        messageSuccess \u003d \"Graph for all dates\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Creates a GraphCommand with specified date range."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public GraphCommand(Date startingDate, Date endingDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        requireNonNull(startingDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        requireNonNull(endingDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        startDate \u003d startingDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        endDate \u003d endingDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        messageSuccess \u003d String.format(\"Graph for spending between %s and %s\\n\", startDate, endDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        //To reset the spending list to default after previous commands"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.updateFilteredSpendingList(PREDICATE_SHOW_ALL_SPENDINGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.updateStatsPredicate(getGraphPredicate());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        logger.log(Level.INFO, String.format(\"Showing graph from %s to %s\", startDate, endDate));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return new CommandResult(messageSuccess, true, false, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public Predicate\u003cSpending\u003e getGraphPredicate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (startDate \u003d\u003d null \u0026\u0026 endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return s-\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                return s.getDate().compareTo(startDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    \u0026\u0026 s.getDate().compareTo(endDate) \u003c\u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            };"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            //Comparing null dates"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            || (other instanceof GraphCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 (startDate \u003d\u003d ((GraphCommand) other).startDate)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 endDate \u003d\u003d ((GraphCommand) other).endDate)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            //Comparing valid dates"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            || (other instanceof GraphCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 (startDate.equals(((GraphCommand) other).startDate)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 endDate.equals(((GraphCommand) other).endDate)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choongyx": 99
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"List of commands\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"add \\t\\t\\t\\t- to add a spending\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"edit \\t\\t\\t\\t- to edit a spending\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"delete \\t\\t\\t- to delete a spending\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"list \\t\\t\\t\\t- to display a list of spending\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"find \\t\\t\\t\\t- to search for spending based on keyword\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"budget \\t\\t\\t- to set a monthly budget\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"showbudget \\t\\t- shows the current monthly budget\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"stats \\t\\t\\t\\t- to generate statistics of spending\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"graph \\t\\t\\t- to show the spending in the form of a graph\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"import \\t\\t\\t- to import data from a CSV file\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"export \\t\\t\\t- to export data to a CSV file\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"clear \\t\\t\\t- to clear all entries from the application\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"reminder add \\t\\t- to add a reminder\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"reminder delete \\t- to delete a reminder\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        + \"exchangerate \\t\\t- to view exchange rates\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        + \"currency \\t\\t\\t- to view or set the currency used to list spending\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"exit \\t\\t\\t\\t- to exit the application\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        + \"To find out more about a specific command, simply type \u0027COMMAND\u0027 e.g. \u0027add\u0027, \u0027reminder\u0027, etc\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 15,
      "Nanosync": 4,
      "choongyx": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import com.fasterxml.jackson.databind.MappingIterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FilePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Imports all spending from a new filepath."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \": Imports all spending from the file to the spending list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + PREFIX_PATH + \"FILEPATH\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + PREFIX_PATH + \"C:\\\\Users\\\\User\\\\Documents\\\\importfile.csv\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Imported all spending. \\nAdded %s spending.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_SUCCESS_WITH_ERRORS \u003d \"Imported %s spending. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \"\\nThe following line has errors and were not imported:\\n%s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_INVALID_CSV \u003d \"Invalid headers detected. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \"\\nPlease ensure the csv file only has 5 columns and the first row contains only the following values:\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            + \"\\nname,date,remark,cost,tagged\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_NO_CONTENT \u003d \"No content detected.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_ERROR_ROW \u003d \"Row %s: %s\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private final FilePath fullFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public ImportCommand(FilePath filePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        fullFilePath \u003d filePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Converts a map of objects into a Spending object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param map A map of objects"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @return Spending A Spending object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @throws ParseException If the input cannot be parsed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static Spending createSpending(Map\u003cString, String\u003e map) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String metaName \u003d map.get(\"name\"); // Name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String metaCost \u003d map.get(\"cost\"); // Cost"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String metaDate \u003d map.get(\"date\"); // Date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String metaRemarks \u003d map.get(\"remark\"); // Remarks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String metaTags \u003d map.get(\"tagged\"); // Tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String[] tags \u003d metaTags.split(\";|,\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Name name \u003d ParserUtil.parseName(metaName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(metaDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Remark remark \u003d ParserUtil.parseRemark(metaRemarks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(metaCost);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (metaTags.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(Arrays.asList(tags));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new Spending(name, date, remark, cost, tagList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        List\u003cString\u003e errors;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            Pair\u003cList\u003cSpending\u003e, List\u003cString\u003e\u003e csvData \u003d readSpendingFromCsv(fullFilePath.fullPath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            List\u003cSpending\u003e spendings \u003d csvData.getKey();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            errors \u003d csvData.getValue();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            model.addSpending(spendings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            count \u003d spendings.size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (errors.size() !\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            for (int i \u003d 0; i \u003c errors.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                sb.append(errors.get(i));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            String result \u003d String.format(MESSAGE_SUCCESS_WITH_ERRORS, count, sb.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return new CommandResult(result);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, count));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Reads a csv file from the specified file path."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param path A string representing a file path"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @return {@code Pair} a pair of lists containing valid spending and errors, respectively."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @throws ParseException If the input cannot be parsed"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Pair\u003cList\u003cSpending\u003e, List\u003cString\u003e\u003e readSpendingFromCsv(String path) throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        List\u003cSpending\u003e spendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        File csvFile \u003d new File(path);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        CsvSchema schema \u003d CsvSchema.emptySchema()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .withHeader(); // use first row as header; otherwise defaults are fine"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        MappingIterator\u003cMap\u003cString, String\u003e\u003e it \u003d mapper.readerFor(Map.class)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .with(schema)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .readValues(csvFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (!it.hasNext()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new IOException(MESSAGE_NO_CONTENT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            Map\u003cString, String\u003e rowAsMap \u003d it.next();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            if (!isValidCsv(rowAsMap)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                throw new IOException(MESSAGE_INVALID_CSV);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                Spending spending \u003d createSpending(rowAsMap);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                spendings.add(spending);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            } catch (ParseException p) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                errors.add(String.format(MESSAGE_ERROR_ROW, count, p.getMessage()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new Pair\u003c\u003e(spendings, errors);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Returns true if csv has the correct size and headers"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param map A map representing a row of values from the csv file"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public boolean isValidCsv(Map\u003cString, String\u003e map) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (map.size() !\u003d 5) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            String[] keys \u003d \"name|cost|date|remark|tagged\".split(\"\\\\|\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return Arrays.stream(keys).allMatch(map::containsKey);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u0026\u0026 fullFilePath.equals(((ImportCommand) other).fullFilePath));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 178,
      "Nanosync": 2
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.model.Model.PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SpendingComparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Lists all persons in the MoneyGoWhere list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all spending entries in default order\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.updateFilteredSpendingList(PREDICATE_SHOW_ALL_SPENDINGS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Reset to the default comparator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.updateSortedSpendingList(new SpendingComparator());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 10,
      "-": 18,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Adds a Reminder to the Reminder list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public abstract class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + AddReminderCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + \"\\n\" + \"or \" + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + DeleteReminderCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 17
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/ShowBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Displays the current Budget."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class ShowBudgetCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showbudget\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your Monthly budget is \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + model.getBudget().getBudgetMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "austinsantoso": 16
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SpendingComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Sorts the current displayed spending entries in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all spending entries\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \": Sorts all spending by fields indicated (order-sensitive).\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Parameters: [PREFIX/ASC or DESC]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + PREFIX_DATE + \"ASC \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + PREFIX_COST + \"DESC \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_SORT_DUPLICATE_FIELD \u003d \"Repeated sorting field detected.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \"You can only sort a field once.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final LinkedHashSet\u003cSortField\u003e fields;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SortCommand(LinkedHashSet\u003cSortField\u003e fields) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator(fields);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.updateSortedSpendingList(spendingComparator);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + spendingComparator);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 (fields.equals(((SortCommand) other).fields)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 54
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.model.Model.PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": " * Displays statistics of the user\u0027s spending."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \": Updates the statistics panel.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"DATE_START and\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"DATE_END\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"today \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"tomorrow \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String MESSAGE_INVALID_DATERANGE \u003d \"Date range provided is invalid. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"Only 2 dates, DATE_START and DATE_END are to be provided with \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"DATE_START being earlier or equal to DATE_END.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"today \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        + PREFIX_DATE + \"tomorrow \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private String messageSuccess;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private final Logger logger \u003d Logger.getLogger(\"Statistics Logger\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Creates a StatsCommand with whole date range of all spending"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * if date range is not specified."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public StatsCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        startDate \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        endDate \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        messageSuccess \u003d \"Statistics for all dates\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Creates a StatsCommand with specified date range."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public StatsCommand(Date startingDate, Date endingDate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        requireNonNull(startingDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        requireNonNull(endingDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        startDate \u003d startingDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        endDate \u003d endingDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        messageSuccess \u003d String.format(\"Statistics for spending between %s and %s\\n\", startDate, endDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        //To reset the spending list to default after previous commands"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.updateFilteredSpendingList(PREDICATE_SHOW_ALL_SPENDINGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.updateStatsPredicate(getStatsPredicate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        logger.log(Level.INFO, String.format(\"Showing statistics from %s to %s\", startDate, endDate));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return new CommandResult(messageSuccess, false, true, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public Predicate\u003cSpending\u003e getStatsPredicate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (startDate \u003d\u003d null \u0026\u0026 endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return s-\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                return s.getDate().compareTo(startDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    \u0026\u0026 s.getDate().compareTo(endDate) \u003c\u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            //Comparing null dates"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            || (other instanceof StatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 (startDate \u003d\u003d ((StatsCommand) other).startDate)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 endDate \u003d\u003d ((StatsCommand) other).endDate)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            //Comparing valid dates"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            || (other instanceof StatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 (startDate.equals(((StatsCommand) other).startDate)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            \u0026\u0026 endDate.equals(((StatsCommand) other).endDate)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "choongyx": 93
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/reminder/AddReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Adds a Reminder to the Reminder list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class AddReminderCommand extends ReminderCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Reminder to MoneyGoWhere. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + PREFIX_MESSAGE + \"MESSAGE \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + \"Example: \" + ReminderCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" d/today m/Pay Bill\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Reminder added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final Reminder reminderToAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Creates an AddReminderCommand to add the specified {@code reminder}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public AddReminderCommand(Reminder reminder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderToAdd \u003d reminder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        model.addReminder(reminderToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, reminderToAdd));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                || (other instanceof AddReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 reminderToAdd.equals(((AddReminderCommand) other).reminderToAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 52
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/commands/reminder/DeleteReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Deletes a Spending from the Reminder list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DeleteReminderCommand extends ReminderCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ReminderCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + \": Deletes the Reminder identified by the index number used in the displayed Reminder list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            + \"Example: \" + ReminderCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_DELETE_REMINDER_SUCCESS \u003d \"Deleted Reminder: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DeleteReminderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        List\u003cReminder\u003e lastShownReminderList \u003d model.getSortedReminderList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownReminderList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder reminderToDelete \u003d lastShownReminderList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        model.deleteReminder(reminderToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                || (other instanceof DeleteReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteReminderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 56
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.ParserUtil.DATE_INVALID_TOO_FAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_REMARK, PREFIX_COST, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE, PREFIX_COST)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (date.dateValue.isAfter(LocalDate.now())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 date.dateValue.getMonth() !\u003d LocalDate.now().getMonth()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 date.dateValue.getYear() !\u003d LocalDate.now().getYear()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(DATE_INVALID_TOO_FAR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Spending spending \u003d new Spending(name, date, remark, cost, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new AddCommand(spending);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 15,
      "jonathantjendana": 8,
      "Nanosync": 10,
      "choongyx": 1,
      "-": 33,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/AddReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.ParserUtil.DEADLINE_INVALID_FAR_BEHIND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.ParserUtil.DEADLINE_INVALID_TOO_FAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.ReminderMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class AddReminderCommandParser extends ReminderCommandParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public AddReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_MESSAGE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String reminderMessage \u003d argMultimap.getValue(PREFIX_MESSAGE).get().trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (reminderMessage.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new ParseException(ReminderMessage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ReminderMessage message \u003d ParserUtil.parseMessage(reminderMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (date.dateValue.isAfter(LocalDate.now())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 date.dateValue.getYear() - LocalDate.now().getYear() \u003e ParserUtil.DATE_FAR_FORWARD_RANGE) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new ParseException(DEADLINE_INVALID_TOO_FAR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (date.dateValue.isBefore(LocalDate.now())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 LocalDate.now().getYear() - date.dateValue.getYear() \u003e ParserUtil.DATE_FAR_BEHIND_RANGE) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new ParseException(DEADLINE_INVALID_FAR_BEHIND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder reminder \u003d new Reminder(date, message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new AddReminderCommand(reminder);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 68,
      "Nanosync": 1
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/BudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_BUDGET_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * parses input arguments and creates a new BudgetCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * and returns a BudgetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            Budget budget \u003d ParserUtil.parseBudget(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new BudgetCommand(budget);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_BUDGET_AMOUNT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 4,
      "austinsantoso": 24
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final Prefix PREFIX_MESSAGE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 2,
      "jonathantjendana": 2,
      "Nanosync": 1,
      "choongyx": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/CurrencyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CurrencyCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Parses input arguments and creates a new CurrencyCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class CurrencyCommandParser implements Parser\u003cCurrencyCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CurrencyCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * and returns an CurrencyCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public CurrencyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String trimmedCurrency \u003d args.trim().toUpperCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (trimmedCurrency.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new CurrencyCommand(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!Currency.isValidCurrencyName(trimmedCurrency)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new CurrencyCommand(trimmedCurrency);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 31
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/DeleteReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Parses input arguments and creates a new DeleteReminderCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DeleteReminderCommandParser extends ReminderCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteReminderCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * and returns a DeleteReminderCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DeleteReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new DeleteReminderCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 27
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.ParserUtil.DATE_INVALID_TOO_FAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand.EditSpendingDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_REMARK, PREFIX_COST, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_INVALID_SPENDING_INDEX, pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor editSpendingDescriptor \u003d new EditSpendingDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            editSpendingDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (date.dateValue.isAfter(LocalDate.now())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    \u0026\u0026 date.dateValue.getMonth() !\u003d LocalDate.now().getMonth()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    \u0026\u0026 date.dateValue.getYear() !\u003d LocalDate.now().getYear()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(DATE_INVALID_TOO_FAR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            editSpendingDescriptor.setDate(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            editSpendingDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            editSpendingDescriptor.setCost(ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editSpendingDescriptor::setTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (!editSpendingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new EditCommand(index, editSpendingDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 3,
      "Nanosync": 30,
      "choongyx": 2,
      "-": 57,
      "austinsantoso": 5
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/ExchangeRateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExchangeRateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Parses input arguments and creates a new ExchangeRateCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class ExchangeRateCommandParser implements Parser\u003cExchangeRateCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExchangeRateCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * and returns a ExchangeRateCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public ExchangeRateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new ExchangeRateCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String[] words \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(ExchangeRateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        double amount \u003d Double.parseDouble(words[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String currencyCode \u003d words[1].toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (amount \u003c\u003d 0 || amount \u003e\u003d Double.MAX_VALUE) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(ExchangeRateCommand.MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!Currency.isValidCurrencyName(currencyCode)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (currencyCode.equalsIgnoreCase(\"SGD\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(ExchangeRateCommand.MESSAGE_SAME_CURRENCY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new ExchangeRateCommand(amount, currencyCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 51
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FolderPath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PATH) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FolderPath folderPath \u003d ParserUtil.parseFolderPath(argMultimap.getValue(PREFIX_PATH).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new ExportCommand(folderPath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 40
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.FindCommand.MESSAGE_COST_RANGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.FindCommand.MESSAGE_DATE_RANGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.CostInRangePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.DateInRangePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.RemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.TagPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_COST, PREFIX_REMARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            String name \u003d argMultimap.getValue(PREFIX_NAME).get().trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (name.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            String[] nameKeywords \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            List\u003cDate\u003e dates \u003d ParserUtil.parseDates(argMultimap.getAllValues(PREFIX_DATE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (dates.size() \u003c 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(MESSAGE_DATE_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Date startDate \u003d dates.get(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Date endDate \u003d dates.get(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            // Start date should be before end date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (startDate.compareTo(endDate) \u003e 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(MESSAGE_DATE_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            predicates.add(new DateInRangePredicate(dates.get(0), dates.get(1)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            List\u003cCost\u003e costs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (argMultimap.getAllValues(PREFIX_COST).size() \u003d\u003d 1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    \u0026\u0026 argMultimap.getValue(PREFIX_COST).get().contains(\" \")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                costs \u003d ParserUtil.parseCostsRange(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                costs \u003d ParserUtil.parseCosts(argMultimap.getAllValues(PREFIX_COST));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (costs.size() !\u003d 2) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(MESSAGE_COST_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            double min \u003d Double.parseDouble(costs.get(0).value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            double max \u003d Double.parseDouble(costs.get(1).value);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (min \u003e max) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(MESSAGE_COST_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            predicates.add(new CostInRangePredicate(costs.get(0), costs.get(1)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            String remark \u003d argMultimap.getValue(PREFIX_REMARK).get().trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (remark.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            String[] remarkKeywords \u003d remark.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            predicates.add(new RemarkContainsKeywordsPredicate(Arrays.asList(remarkKeywords)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            List\u003cString\u003e tags \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            tags \u003d tags.stream().map(String::trim).collect(Collectors.toList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (tags.isEmpty() || tags.stream().anyMatch(String::isEmpty)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            predicates.add(new TagPredicate(new HashSet\u003c\u003e(tags)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (predicates.isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new FindCommand(predicates);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 123,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/GraphCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": " * Parses input arguments and creates a new GraphCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "public class GraphCommandParser implements Parser\u003cGraphCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GraphCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * and returns a GraphCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public GraphCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            List\u003cDate\u003e datesList \u003d ParserUtil.parseDates(argMultimap.getAllValues(PREFIX_DATE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            //Throw ParseException if number of dates provided is not equal to 2."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            if (datesList.size() !\u003d 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    GraphCommand.MESSAGE_INVALID_DATERANGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            Date startDate \u003d datesList.get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            Date endDate \u003d datesList.get(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            //Throw ParseException if startDate is later than endDate."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            if (startDate.compareTo(endDate) \u003e 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    GraphCommand.MESSAGE_INVALID_DATERANGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return new GraphCommand(startDate, endDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return new GraphCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choongyx": 56
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FilePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand and returns an ImportCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PATH) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FilePath filePath \u003d ParserUtil.parsePath(argMultimap.getValue(PREFIX_PATH).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new ImportCommand(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 42
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.DateUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.commons.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FilePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FolderPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.ReminderMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String DATE_INVALID_TOO_FAR \u003d \"Date can only be until end of this month.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String DEADLINE_INVALID_FAR_BEHIND \u003d \"Deadline is 1 year behind from now\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String DEADLINE_INVALID_TOO_FAR \u003d \"Deadline must be within 1 years from now.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final int DATE_FAR_FORWARD_RANGE \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final int DATE_FAR_BEHIND_RANGE \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e dates} into a {@code List\u003cDates\u003e}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static List\u003cDate\u003e parseDates(Collection\u003cString\u003e dates) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(dates);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        final List\u003cDate\u003e dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (String date : dates) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            List\u003cLocalDate\u003e innerDates \u003d DateUtil.parseDates(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (innerDates !\u003d null \u0026\u0026 !innerDates.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                for (LocalDate innerDate : innerDates) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    dateList.add(parseDate(innerDate.toString()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return dateList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Parses a {@code String cost} into an {@code cost}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * @throws ParseException if the given {@code cost} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static Cost parseCost(String cost) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        String trimmedCost \u003d cost.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (!Cost.isValidCost(trimmedCost)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            throw new ParseException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return new Cost(trimmedCost);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e costs} delimited by a \u0027-\u0027 without space into a {@code List\u003cCost\u003e cost}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException if the given {@code cost} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static List\u003cCost\u003e parseCosts(Collection\u003cString\u003e costs) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(costs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cCost\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (String tempCost : costs) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            tempCost \u003d tempCost.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            String[] costTokens \u003d tempCost.split(\"-\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            for (String cost : costTokens) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    throw new ParseException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                result.add(new Cost(cost));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses {@code String costs} in the format \u00271 - 2\u0027 into a {@code List\u003cCost\u003e cost}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException if the given {@code costs} are invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static List\u003cCost\u003e parseCostsRange(String costs) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(costs);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String trimmedCost \u003d costs.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"(.*) - (.*)\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(trimmedCost);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cCost\u003e costsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return costsList;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String startCost \u003d matcher.group(1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String endCost \u003d matcher.group(2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!Cost.isValidCost(startCost) || !Cost.isValidCost(endCost)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        costsList.add(new Cost(startCost));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        costsList.add(new Cost(endCost));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return costsList;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Parses a {@code String remark} into an {@code remark}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // requireNonNull(remark);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Parses {@code budget} into an {@code Budget} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @throws ParseException if the specified budget is invalid (negative integer)."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static Budget parseBudget(String budget) throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String trimmedBudget \u003d budget.trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            double temp \u003d Double.parseDouble(trimmedBudget);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            if (temp \u003c 0) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                throw new ParseException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new Budget(temp);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new ParseException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Parses a {@code String message} into an {@code ReminderMessage}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws ParseException if the given {@code message} is invalid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static ReminderMessage parseMessage(String message) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String trimmedMessage \u003d message.trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new ReminderMessage(trimmedMessage);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /** Parses a {@code String path} into a {@code FilePath}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @throws ParseException if the given {@code path} is invalid."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static FilePath parsePath(String path) throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String trimmedName \u003d path.trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (!(FileUtil.isValidPath(trimmedName) \u0026\u0026 trimmedName.endsWith(\".csv\"))) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new ParseException(FilePath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new FilePath(path);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /** Parses a {@code String path} into a {@code FolderPath}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @throws ParseException if the given {@code path} is invalid."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static FolderPath parseFolderPath(String path) throws ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String trimmedName \u003d path.trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (!(FileUtil.isValidPath(trimmedName)) || !new File(path).exists()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new ParseException(FolderPath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new FolderPath(path);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 37,
      "jonathantjendana": 39,
      "Nanosync": 76,
      "choongyx": 8,
      "-": 83,
      "austinsantoso": 18
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/ReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderCommandParser implements Parser\u003cReminderCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        final String secondaryCommandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (secondaryCommandWord.equals(AddReminderCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new AddReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (secondaryCommandWord.equals(DeleteReminderCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new DeleteReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 46
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortAttribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortOrder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String[] fieldWords \u003d args.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortAttribute\u003e attributes \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortField\u003e fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (String field : fieldWords) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (field.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            String trimmedPrefix;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            SortAttribute attribute;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (field.startsWith(PREFIX_DATE.getPrefix())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                trimmedPrefix \u003d field.substring(PREFIX_DATE.getPrefix().length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                SortOrder order \u003d convert(trimmedPrefix);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                attribute \u003d SortAttribute.DATE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                fields.add(new SortField(attribute, order));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            } else if (field.startsWith(PREFIX_COST.getPrefix())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                trimmedPrefix \u003d field.substring(PREFIX_COST.getPrefix().length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                SortOrder order \u003d convert(trimmedPrefix);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                attribute \u003d SortAttribute.COST;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                fields.add(new SortField(attribute, order));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            } else if (field.startsWith(PREFIX_NAME.getPrefix())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                trimmedPrefix \u003d field.substring(PREFIX_NAME.getPrefix().length());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                SortOrder order \u003d convert(trimmedPrefix);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                attribute \u003d SortAttribute.NAME;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                fields.add(new SortField(attribute, order));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            } else if (field.startsWith(PREFIX_REMARK.getPrefix())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                trimmedPrefix \u003d field.substring(PREFIX_REMARK.getPrefix().length());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                SortOrder order \u003d convert(trimmedPrefix);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                attribute \u003d SortAttribute.REMARK;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                fields.add(new SortField(attribute, order));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (attributes.contains(attribute)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new ParseException(SortCommand.MESSAGE_SORT_DUPLICATE_FIELD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                attributes.add(attribute);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (fields.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new SortCommand(fields);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Converts an order string to a valid SortOrder."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param order Order"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return SortOrder enum"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws ParseException If the order input is invalid"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static SortOrder convert(String order) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        switch (order.toUpperCase()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        case \"DESC\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return SortOrder.DESCENDING;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        case \"ASC\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return SortOrder.ASCENDING;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 105
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/SpendingBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CurrencyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExchangeRateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ShowBudgetCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class SpendingBookParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        case ExchangeRateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new ExchangeRateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        case CurrencyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return new CurrencyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        case GraphCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return new GraphCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case ShowBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new ShowBudgetCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new ReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 25,
      "jonathantjendana": 7,
      "Nanosync": 12,
      "choongyx": 6,
      "-": 62,
      "austinsantoso": 6
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/StatsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * and returns a StatsCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            List\u003cDate\u003e datesList \u003d ParserUtil.parseDates(argMultimap.getAllValues(PREFIX_DATE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            //Throw ParseException if number of dates provided is not equal to 2."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            if (datesList.size() !\u003d 2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    StatsCommand.MESSAGE_INVALID_DATERANGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            Date startDate \u003d datesList.get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            Date endDate \u003d datesList.get(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            //Throw ParseException if startDate is later than endDate."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            if (startDate.compareTo(endDate) \u003e 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                    StatsCommand.MESSAGE_INVALID_DATERANGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return new StatsCommand(startDate, endDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return new StatsCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "choongyx": 52
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/sorting/ReminderComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.sorting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Compares Reminder objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderComparator implements Comparator\u003cReminder\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Set\u003cSortField\u003e fields;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Creates a Reminder comparator, ordered by Date in descending order"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderComparator() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        fields.add(new SortField(SortAttribute.DEADLINE, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Creates a Reminder comparator sorted by a defined order."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param fields Fields to be sorted and their order"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderComparator(Set\u003cSortField\u003e fields) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public int compare(Reminder o1, Reminder o2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        int rank \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (SortField field : fields) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (rank !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            switch (field.getAttribute()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                rank \u003d -(o1.getDeadline().compareTo(o2.getDeadline()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case REMINDER_MESSAGE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                rank \u003d o1.getReminderMessage().compareTo(o2.getReminderMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new IllegalArgumentException(\"Reminder comparator field is unrecognised\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (field.getOrder() \u003d\u003d SortOrder.DESCENDING) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                rank \u003d -rank;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return rank;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 56
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/sorting/SortAttribute.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.sorting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Attributes for sorting."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public enum SortAttribute {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    NAME(\"Name\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    COST(\"Cost\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    DATE(\"Date\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    DEADLINE(\"Deadline\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    REMARK(\"Remark\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    REMINDER_MESSAGE(\"Message\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    SortAttribute(String identifier) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return identifier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 25
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/sorting/SortField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.sorting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Fields for sorting based on an attribute and order."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class SortField {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final SortAttribute attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final SortOrder order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Sorts a given field with an order."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param attribute Attribute being sorted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param order Ascending or descending"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SortField(SortAttribute attribute, SortOrder order) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Gets an attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return Sort Attribute"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SortAttribute getAttribute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return attribute;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Gets the sort order."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return Sort Order"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SortOrder getOrder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return Objects.hash(attribute, order);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof SortField // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 (attribute.equals(((SortField) other).attribute))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 (order.equals(((SortField) other).order)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return getAttribute() + \" (\" + getOrder() + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 56
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/sorting/SortOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.sorting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Specifies a sort order."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public enum SortOrder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    ASCENDING(\"Ascending\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    DESCENDING(\"Descending\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    SortOrder(String identifier) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return identifier;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 21
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/logic/sorting/SpendingComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.sorting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Compares Spending objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class SpendingComparator implements Comparator\u003cSpending\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Set\u003cSortField\u003e fields;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Creates a Spending comparator, ordered by Date in descending order"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * and Cost by descending order."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingComparator() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.DATE, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.COST, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.NAME, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Creates a Spending comparator sorted by a defined order."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param fields Fields to be sorted and their order"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingComparator(Set\u003cSortField\u003e fields) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int compare(Spending o1, Spending o2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        int rank \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (SortField field : fields) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (rank !\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            switch (field.getAttribute()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            case DATE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                rank \u003d o1.getDate().compareTo(o2.getDate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            case COST:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                rank \u003d o1.getCost().compareTo(o2.getCost());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            case REMARK:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                rank \u003d o1.getRemark().compareTo(o2.getRemark());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            case NAME:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                rank \u003d o1.getName().compareTo(o2.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                throw new IllegalArgumentException(\"Spending comparator field is unrecognised\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            // Invert the order if the sort order"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (field.getOrder() \u003d\u003d SortOrder.DESCENDING) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                rank \u003d -rank;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return rank;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sb.append(\"Sorting by: \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (SortField field : fields) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            sb.append(field);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return sb.toString().substring(0, sb.lastIndexOf(\",\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 82
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Predicate\u003cSpending\u003e PREDICATE_SHOW_ALL_SPENDINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns the user prefs\u0027 MoneyGoWhere file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    Path getSpendingBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Sets the user prefs\u0027 MoneyGoWhere file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void setSpendingBookFilePath(Path spendingBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Replaces MoneyGoWhere data with the data in {@code spendingBook}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void setSpendingBook(ReadOnlySpendingBook spendingBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns the SpendingBook"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    ReadOnlySpendingBook getSpendingBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns true if a Spending with the same identity as {@code Spending} exists in the MoneyGoWhere list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    boolean hasSpending(Spending spending);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Deletes the given Spending."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * The Spending must exist in the MoneyGoWhere list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void deleteSpending(Spending target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Adds the given Spending."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * {@code Spending} must not already exist in the MoneyGoWhere list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void addSpending(Spending spending);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    void addSpending(List\u003cSpending\u003e spending);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the given Spending {@code target} with {@code editedSpending}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * {@code target} must exist in the MoneyGoWhere list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * The Spending identity of {@code editedSpending} must not be the same as"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * another existing Spending in the MoneyGoWhere list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void setSpending(Spending target, Spending editedSpending);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns an unmodifiable view of the filtered Spending list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    ObservableList\u003cSpending\u003e getFilteredSpendingList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Updates the filter of the filtered Spending list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void updateFilteredSpendingList(Predicate\u003cSpending\u003e predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author Nanosync"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Updates the comparator of the sorted Spending list to filter by the given {@code comparator}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws NullPointerException if {@code comparator} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    void updateSortedSpendingList(Comparator\u003cSpending\u003e comparator);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    //@@author austinsantoso"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the previous budget of MoneyGoWhere with the new budget."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void setBudget(Budget budget);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the previous budget amount of MoneyGoWhere with the new budget amount."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void setBudgetAmount(Budget budget);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Gets the current budget of the MoneyGoWhere list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Budget getBudget();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * reset\u0027s the budget sum to 0."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void clearBudgetSum();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //@@author minpyaemoe"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Adds the given Reminder."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * {@code Reminder} must not NULL."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Deletes the given Reminder."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * The Reminder must exist in the MoneyGoWhere list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void deleteReminder(Reminder target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns true if a Reminder with the same identity as {@code Reminder} exists in the Reminder list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /** Returns an unmodifiable view of the sorted Reminder list */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    ObservableList\u003cReminder\u003e getSortedReminderList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //@@author choongyongxin"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns an unmodifiable view of the filtered Spending list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    ObservableList\u003cSpending\u003e getStatsList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Updates the statsPredicate"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    void updateStatsPredicate(Predicate\u003cSpending\u003e statsPredicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author Nanosync"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Gets the currency in use."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Currency getCurrencyInUse();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Gets the currency list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    ObservableList\u003cCurrency\u003e getCurrencies();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Sets the currency in use."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    void setCurrencyInUse(Currency currency);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 32,
      "jonathantjendana": 3,
      "Nanosync": 34,
      "choongyx": 20,
      "-": 57,
      "austinsantoso": 34
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.sorting.ReminderComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SpendingComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents the in-memory model of the MoneyGoWhere list data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final SpendingBook spendingBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final FilteredList\u003cSpending\u003e filteredSpendings;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final SortedList\u003cSpending\u003e sortedSpendings;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final SortedList\u003cReminder\u003e sortedReminders;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Predicate\u003cSpending\u003e statsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Initializes a ModelManager with the given spendingBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ModelManager(ReadOnlySpendingBook spendingBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireAllNonNull(spendingBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        logger.fine(\"Initializing with MoneyGoWhere: \" + spendingBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.spendingBook \u003d new SpendingBook(spendingBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.spendingBook.updateBudget();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sortedSpendings \u003d new SortedList\u003c\u003e(this.spendingBook.getSpendingList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sortedSpendings.setComparator(new SpendingComparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        filteredSpendings \u003d new FilteredList\u003c\u003e(sortedSpendings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        sortedReminders \u003d new SortedList\u003c\u003e(this.spendingBook.getReminderList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        sortedReminders.setComparator(new ReminderComparator());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this(new SpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Path getSpendingBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return userPrefs.getSpendingBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void setSpendingBookFilePath(Path spendingBookFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(spendingBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        userPrefs.setSpendingBookFilePath(spendingBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SpendingBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void setSpendingBook(ReadOnlySpendingBook spendingBook) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.spendingBook.resetData(spendingBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReadOnlySpendingBook getSpendingBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return spendingBook;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean hasSpending(Spending spending) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(spending);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return spendingBook.hasSpending(spending);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void deleteSpending(Spending target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        spendingBook.removeSpending(target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void addSpending(Spending spending) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        spendingBook.addSpending(spending);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        updateFilteredSpendingList(PREDICATE_SHOW_ALL_SPENDINGS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void addSpending(List\u003cSpending\u003e spending) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingBook.addSpending(spending);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        updateFilteredSpendingList(PREDICATE_SHOW_ALL_SPENDINGS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setSpending(Spending target, Spending editedSpending) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireAllNonNull(target, editedSpending);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        spendingBook.setSpending(target, editedSpending);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Budget related functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        spendingBook.setBudget(budget);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setBudgetAmount(Budget budget) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        spendingBook.setBudgetAmount(budget);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return spendingBook.getBudget();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void clearBudgetSum() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        spendingBook.clearBudgetSum();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Currency functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public ObservableList\u003cCurrency\u003e getCurrencies() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return spendingBook.getCurrencies();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Currency getCurrencyInUse() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return spendingBook.getCurrencyInUse();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setCurrencyInUse(Currency currency) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBook.setCurrencyInUse(currency);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminder related functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        spendingBook.removeReminder(target);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        spendingBook.addReminder(reminder);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return spendingBook.hasReminder(reminder);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Reminder List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns an sorted view of the list of {@code Reminder}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ObservableList\u003cReminder\u003e getSortedReminderList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return sortedReminders;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics related functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Returns an unmodifiable view of spending, filtered by {@code statsPredicate} and sorted by date."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * @return {@code ObservableList\u003cSpending\u003e} of spending which fulfill the date range provided"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public ObservableList\u003cSpending\u003e getStatsList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        FilteredList\u003cSpending\u003e filteredList \u003d new FilteredList\u003c\u003e(getFilteredSpendingList());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        filteredList.setPredicate(statsPredicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        SortedList\u003cSpending\u003e sortedList \u003d new SortedList\u003c\u003e(filteredList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Comparator\u003cSpending\u003e byDate \u003d (Spending a, Spending b) -\u003e (a.getDate().compareTo(b.getDate()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        sortedList.setComparator(byDate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return FXCollections.unmodifiableObservableList(sortedList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void updateStatsPredicate(Predicate\u003cSpending\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        statsPredicate \u003d predicate;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Spending List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Spending} backed by the internal list of"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * {@code versionedSpendingBook}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ObservableList\u003cSpending\u003e getFilteredSpendingList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return filteredSpendings;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void updateFilteredSpendingList(Predicate\u003cSpending\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        filteredSpendings.setPredicate(predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Spending List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void updateSortedSpendingList(Comparator\u003cSpending\u003e comparator) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sortedSpendings.setComparator(comparator);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return spendingBook.equals(other.spendingBook)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 filteredSpendings.equals(other.filteredSpendings);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 65,
      "jonathantjendana": 7,
      "Nanosync": 38,
      "choongyx": 26,
      "-": 106,
      "austinsantoso": 36
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/ReadOnlySpendingBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Unmodifiable view of the MoneyGoWhere list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public interface ReadOnlySpendingBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns an unmodifiable view of the spending list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * This list will not contain any duplicate spending."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    ObservableList\u003cSpending\u003e getSpendingList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns the Budget of the MoneyGoWhere list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Budget getBudget();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns an unmodifiable view of the reminder list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns available currencies."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    ObservableList\u003cCurrency\u003e getCurrencies();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns the currency being used."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Currency getCurrencyInUse();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Registers a currency changed listener."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param currencyChangeListener Currency changed listener"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    void registerCurrencyChangedListener(ChangeListener\u003cCurrency\u003e currencyChangeListener);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 12,
      "Nanosync": 20,
      "-": 10,
      "austinsantoso": 4
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Path getSpendingBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/SpendingBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.commons.util.DateUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.UniqueCurrencyList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.ReminderList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.SpendingList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.util.CurrencyDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class SpendingBook implements ReadOnlySpendingBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private final SpendingList spendings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final ReminderList reminders;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private UniqueCurrencyList currencies;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private ObjectProperty\u003cCurrency\u003e currencyInUse;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendings \u003d new SpendingList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        budget \u003d new Budget(1000);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminders \u003d new ReminderList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        currencies \u003d new UniqueCurrencyList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Currency currency : CurrencyDataUtil.getSampleCurrencies()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            currencies.add(currency);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        currencyInUse \u003d new SimpleObjectProperty\u003c\u003e(CurrencyDataUtil.getDefaultCurrency());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public SpendingBook() {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Creates a SpendingBook using Spending entries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public SpendingBook(ReadOnlySpendingBook toBeCopied) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the contents of the Spending list with {@code spendings}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * {@code spendings} must not contain duplicate spendings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setSpendings(List\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.spendings.setSpendings(spendings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Resets the existing data of this {@code SpendingBook} with {@code newData}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void resetData(ReadOnlySpendingBook newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        setCurrencies(newData.getCurrencies());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        setCurrencyInUse(newData.getCurrencyInUse());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        setSpendings(newData.getSpendingList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        setBudget(newData.getBudget());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        setReminders(newData.getReminderList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    //// Spending-level operations"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns true if a Spending with the same identity as {@code Spending} exists in MoneyGoWhere."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean hasSpending(Spending spending) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(spending);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return spendings.contains(spending);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Adds a Spending to the MoneyGoWhere list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void addSpending(Spending p) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        spendings.add(p);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budget.addSpending(p);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    //@@author jonathantjendana"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Adds multiple Spending to the MoneyGoWhere list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void addSpending(List\u003cSpending\u003e spendingList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendings.add(spendingList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        budget.addSpending(spendingList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the given Spending {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * {@code target} must exist in the MoneyGoWhere list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * The Spending identity of {@code editedPerson} must not be the same as another existing"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Spending in the MoneyGoWhere list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setSpending(Spending target, Spending editedSpending) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(editedSpending);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budget.deleteSpending(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budget.addSpending(editedSpending);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        spendings.setSpending(target, editedSpending);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Removes {@code key} from this {@code SpendingBook}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * {@code key} must exist in the MoneyGoWhere list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void removeSpending(Spending key) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        spendings.remove(key);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budget.deleteSpending(key);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //// Reminder-level operations"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Replaces the contents of the Reminder list with {@code reminders}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.reminders.setReminders(reminders);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns true if a Reminder with the same identity as {@code Reminder} exists in MoneyGoWhere."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return reminders.contains(reminder);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Adds a Reminder to the reminder list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void addReminder(Reminder r) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminders.add(r);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Removes {@code key} from this {@code  Reminderlist}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * {@code key} must exist in the Reminder list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void removeReminder(Reminder key) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminders.remove(key);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //// Currency-level operations"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author Nanosync"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Replaces the contents of the Currency list with {@code currencies}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setCurrencies(List\u003cCurrency\u003e currencies) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(currencies);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.currencies.setCurrencies(currencies);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Sets the currency in use. It must be present in {@code currencies}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setCurrencyInUse(Currency currency) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.currencyInUse.setValue(currency);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Adds a Currency to the currency list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void addCurrency(Currency c) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(c);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        currencies.add(c);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //// Budget related operations"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    //@@author austinsantoso"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void updateBudget() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budget.initialize(DateUtil.getTodayDate(), getSpendingList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the {@code Budget} in the MoneyGoWhere."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.budget.setBudget(budget);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the {@code Budget} in the MoneyGoWhere."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setBudgetAmount(Budget budget) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.budget.setBudgetAmount(budget);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Resets the Budget sum to 0."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void clearBudgetSum() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budget.clearBudgetSum();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return spendings.asUnmodifiableObservableList().size() + \" spendings\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author Nanosync"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public ObservableList\u003cSpending\u003e getSpendingList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return spendings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    //@@author minpyaemoe"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return reminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author Nanosync"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public ObservableList\u003cCurrency\u003e getCurrencies() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return currencies.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Currency getCurrencyInUse() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return currencyInUse.getValue();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Registers a currency changed listener."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param currencyChangeListener Currency changed listener"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void registerCurrencyChangedListener(ChangeListener\u003cCurrency\u003e currencyChangeListener) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(currencyChangeListener);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        currencyInUse.addListener(currencyChangeListener);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                || (other instanceof SpendingBook // instanceof handles nulls"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 spendings.equals(((SpendingBook) other).spendings)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 reminders.equals(((SpendingBook) other).reminders)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 currencies.equals(((SpendingBook) other).currencies)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 currencyInUse.getValue().equals(((SpendingBook) other).currencyInUse.getValue())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 budget.equals(((SpendingBook) other).budget));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return Objects.hash(spendings, reminders, budget, currencies);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 57,
      "jonathantjendana": 13,
      "Nanosync": 79,
      "-": 72,
      "austinsantoso": 61
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Path spendingBookFilePath \u003d Paths.get(\"data\" , \"moneygowhere.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        setSpendingBookFilePath(newUserPrefs.getSpendingBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Path getSpendingBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return spendingBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setSpendingBookFilePath(Path spendingBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(spendingBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.spendingBookFilePath \u003d spendingBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 spendingBookFilePath.equals(o.spendingBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return Objects.hash(guiSettings, spendingBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + spendingBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/budget/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents the budget in the MoneyGoWhere list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * A budget cannot have a negative value."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Budget values should be positive number\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^[+]?([0-9]+(?:[.][0-9]*)?|\\\\.[0-9]+)$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private double sum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private BudgetMonth month;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a {@code Budget}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param amount A valid budget value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Budget(double amount) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        checkArgument(isValidBudget(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.sum \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.month \u003d BudgetMonth.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a {@code Budget}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param budget A valid budget value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param month The month where the budget is valid for."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Budget(double budget, String month) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        checkArgument(isValidBudget(budget), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.amount \u003d budget;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.sum \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.month \u003d BudgetMonth.parse(month);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a {@code Budget}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param budget A valid budget value in String."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Budget(String budget) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        checkArgument(isValidBudget(budget), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.amount \u003d Double.parseDouble(budget);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.sum \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.month \u003d BudgetMonth.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns true if a given string is a valid budget value. (Not non-negative)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static boolean isValidBudget(String test) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns true if a given string is a valid budget value. (Not non-negative)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static boolean isValidBudget(double test) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return test \u003e\u003d 0.0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * initializes the Budget."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * updates month {@code Budget} if the given date is in a different month than the on currently stored."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * also updates the value of sum to be the same as those currently available in the spendingList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param date The current Date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param spendings the spending list to initialize the budget with"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void initialize(LocalDate date, List\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.month \u003d new BudgetMonth(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.sum \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        for (Spending s : spendings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            addSpending(s);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public double getSum() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getValueString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return String.format(\"%.2f\", amount);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getMonthString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return month.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void clearBudgetSum() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sum \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Checks whether a spending is in the same month of the Budget."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param s the spending to check."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return whether or not the spending is in the same month as the budget"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean inSameMonth(Spending s) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetMonth temp \u003d new BudgetMonth(s.getDateValue());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return temp.equals(this.month);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Adds the spending cost if it is in the same month."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param s The spending to add."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void addSpending(Spending s) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (inSameMonth(s)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            sum +\u003d Double.parseDouble(s.getCost().toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    //@@author jonathantjendana"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Adds those spending cost if they are in the same month."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param spendingList The spending list to add."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void addSpending(List\u003cSpending\u003e spendingList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        sum +\u003d spendingList.parallelStream()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .filter(s -\u003e inSameMonth(s))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .reduce(0.0, (x, y) -\u003e x + Double.parseDouble(y.getCost().toString()), Double::sum);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    //@@author austinsantoso"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * deletes the spending cost if it is in the same month."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param s The spending to delete."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void deleteSpending(Spending s) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (inSameMonth(s)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            sum -\u003d Double.parseDouble(s.getCost().toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private double getRemainingBudget() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return amount - sum;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setBudgetAmount(Budget budget) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.amount \u003d budget.amount;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.amount \u003d budget.amount;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.sum \u003d budget.sum;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.month \u003d budget.month;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                || (other instanceof Budget // instanceof handles nulls"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 amount \u003d\u003d ((Budget) other).amount"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 month.equals(((Budget) other).month)); // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return Objects.hash(amount, sum);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(String.format(\"%.2f\", amount));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Return a complete description of the budget."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return A string representing the set budget only."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getBudgetMessage() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(toString());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(\"\\n Current Spending:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(String.format(\"$%.2f\", sum));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(\"\\n Remaining Budget:\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(String.format(\"$%.2f\", getRemainingBudget()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 11,
      "Nanosync": 3,
      "austinsantoso": 192
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/budget/BudgetMonth.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents the month that the budget is valid for."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Also contains the year."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class BudgetMonth {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"BudgetMonth needs to have a format MM/YYYY\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(1[0-2]|0[1-9]|\\\\d)\\\\/([2-9]\\\\d[1-9]\\\\d|[1-9]\\\\d)$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public BudgetMonth(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.year \u003d date.getYear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public BudgetMonth(int month, int year) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Parses the given string to a BudgetMonth."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * The input has to be of format MM/YYYY"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * throws exception if date has incorrect format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param date the string to be parsed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return A BudgetMonth representing the input String"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static BudgetMonth parse(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        checkArgument(isValidBudgetMonth(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String[] dateSplit \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        int tempMonth \u003d Integer.parseInt(dateSplit[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        int tempYear \u003d Integer.parseInt(dateSplit[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new BudgetMonth(tempMonth, tempYear);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this.month;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static BudgetMonth now() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new BudgetMonth(DateUtil.getTodayDate());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Checks whether a string is a valid BudgetMonth based on Regex."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * It must be of format MM/YYYY where the year is \u003e\u003d 2010."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param test The string to be tested."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return whether the String is of format MM/YYYYor not."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static boolean isValidBudgetMonth(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Checks whether a date is behind a particular month."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param date the date to check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return whether or not the date was set before this month"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isBehind(LocalDate date) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this.month \u003c date.getMonthValue()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                || this.year \u003c date.getYear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                || (other instanceof BudgetMonth // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 month \u003d\u003d ((BudgetMonth) other).month"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((BudgetMonth) other).year); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return Objects.hash(month, year);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(String.format(\"%2d\", month));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(String.format(\"/%4d\", year));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 102
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/currency/Currency.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.currency;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a Currency for MoneyGoWhere."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class Currency implements Comparable\u003cCurrency\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Currency must be 3 letters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CONSTRAINT_SYMBOL \u003d \"Symbol cannot be empty and must be less than 16 characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CONSTRAINT_RATE \u003d \"Rate must be non-negative\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Upper}{3}+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final int MAX_SYMBOL_LENGTH \u003d 16;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public final String symbol;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public final double rate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Constructs a {@code Currency}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param name Three letter currency name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Currency(String name, String symbol, double rate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        checkArgument(isValidCurrencyName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        checkArgument(isValidCurrencySymbol(symbol), MESSAGE_CONSTRAINT_SYMBOL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns true if a given string is a valid currency name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static boolean isValidCurrencyName(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns true if a given string is a valid currency symbol."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static boolean isValidCurrencySymbol(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return test !\u003d null \u0026\u0026 test.trim().length() \u003c MAX_SYMBOL_LENGTH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof Currency // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 name.equals(((Currency) other).name)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 symbol.equals(((Currency) other).symbol)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 rate \u003d\u003d ((Currency) other).rate); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return Objects.hash(name, symbol, rate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int compareTo(Currency o) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return name.compareTo(o.name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns true if both currency of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * This defines a weaker notion of equality between two spending."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean isSameCurrency(Currency otherCurrency) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (otherCurrency \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return otherCurrency !\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 otherCurrency.name.equals(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return String.format(\"%s (%s): %.3f\", name, symbol, rate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 89
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/currency/UniqueCurrencyList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.currency;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.exceptions.CurrencyNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.exceptions.DuplicateCurrencyException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * A list of Currencies."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class UniqueCurrencyList implements Iterable\u003cCurrency\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final ObservableList\u003cCurrency\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final ObservableList\u003cCurrency\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns true if the list contains an equivalent Currency as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean contains(Currency toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCurrency);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Adds a Currency to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void add(Currency toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            int index \u003d internalList.indexOf(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            internalList.set(index, toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Replaces the Currency {@code target} in the list with {@code editedCurrency}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * If the currency being edited already exists, a duplicate currency exception is thrown."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setCurrency(Currency target, Currency editedCurrency) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireAllNonNull(target, editedCurrency);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new CurrencyNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!target.isSameCurrency(editedCurrency) \u0026\u0026 contains(editedCurrency)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new DuplicateCurrencyException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        internalList.set(index, editedCurrency);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Removes the equivalent Currency from the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * The Currency must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void remove(Currency toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new CurrencyNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setCurrencies(UniqueCurrencyList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Replaces the contents of this list with {@code currencies}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setCurrencies(List\u003cCurrency\u003e currencies) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireAllNonNull(currencies);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (hasDuplicateCurrencies(currencies)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new DuplicateCurrencyException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        internalList.setAll(currencies);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Determines if the currency list has duplicate currencies."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param currencies the list of currencies"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return true if it has duplicates"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean hasDuplicateCurrencies(List\u003cCurrency\u003e currencies) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Set\u003cCurrency\u003e seenCurrencies \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Currency currency : currencies) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (seenCurrencies.contains(currency)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            seenCurrencies.add(currency);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public ObservableList\u003cCurrency\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Iterator\u003cCurrency\u003e iterator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof UniqueCurrencyList // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCurrencyList) other).internalList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 138
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/currency/exceptions/CurrencyNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.currency.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Signals that the operation is unable to find the specified Currency."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class CurrencyNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/currency/exceptions/DuplicateCurrencyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.currency.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Signals that the operation has found a duplicate Currency."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class DuplicateCurrencyException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 7
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/path/FilePath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.model.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.commons.util.FileUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Represents a file path."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class FilePath {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \"File path should not contain any of the following characters: \u003c \u003e ? [ ] : | * .  \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    + \"File path also should not contain more than 218 characters and should be an existing csv file.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public final String fullPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Constructs a {@code Path}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param path A valid path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public FilePath(String path) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        checkArgument(isValidPath(path), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        fullPath \u003d path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Returns true if a given string is a valid path."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static boolean isValidPath(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return FileUtil.isValidPath(test) \u0026\u0026 test.endsWith(\".csv\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return fullPath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                || (other instanceof FilePath // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u0026\u0026 fullPath.equals(((FilePath) other).fullPath)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 47
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/path/FolderPath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.model.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.commons.util.FileUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Represents a folder path."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class FolderPath {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \"Folder path should exist and not contain any of the following characters: \u003c \u003e ? [ ] : | * .  \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    + \"Folder path also should not contain more than 218 characters.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public final String fullPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Constructs a {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * @param path A valid folder path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public FolderPath(String path) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        checkArgument(isValidFolderPath(path), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        fullPath \u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Returns true if a given string is a valid folder path."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static boolean isValidFolderPath(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return FileUtil.isValidPath(test) \u0026\u0026 new File(test).isDirectory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return fullPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                || (other instanceof FolderPath // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u0026\u0026 fullPath.equals(((FolderPath) other).fullPath)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 48
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/reminder/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Reminder class to notify user with deadlines."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private ReminderMessage reminderMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Date deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private long remainingDays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Reminder(Date deadline, ReminderMessage reminderMessage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireAllNonNull(deadline, reminderMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.reminderMessage \u003d reminderMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.remainingDays \u003d DateUtil.getDaysBetween(DateUtil.getTodayDate(), deadline.dateValue);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderMessage getReminderMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return reminderMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Date getDeadline() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the due date description of a reminder for displaying on UI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String getDueDateDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (remainingDays \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return \"Today\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (remainingDays \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return \"Tomorrow\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (remainingDays \u003c 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return \"Overdue\\n\" + DateUtil.twoDigitYearFormatDate(deadline.value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return \"in \\n\" + remainingDays + \" days \" + DateUtil.twoDigitYearFormatDate(deadline.value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns true if both Reminder of the same date have the same reminder message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * This defines a weaker notion of equality between two spending."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean isSameReminder(Reminder otherReminder) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return otherReminder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 otherReminder.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 otherReminder.getReminderMessage().equals(getReminderMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns true if both reminders have the same identity and data fields."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * This defines a stronger notion of equality between two reminders."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder otherSpending \u003d (Reminder) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return otherSpending.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 otherSpending.getReminderMessage().equals(getReminderMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return Objects.hash(deadline, reminderMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        builder.append(\"Deadline: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                .append(\" Message: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                .append(getReminderMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 97
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/reminder/ReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.exception.ReminderNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * A list of reminders"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns true if the list contains an equivalent Reminder as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean contains(Reminder toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReminder);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Adds a Reminder to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void add(Reminder toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Removes the equivalent Reminder from the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * The Reminder must exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void remove(Reminder toRemove) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Replaces the contents of this list with {@code reminders}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                || (other instanceof ReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 internalList.equals(((ReminderList) other).internalList));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 80
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/reminder/ReminderMessage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Represents a Reminder\u0027s message in the Reminder list. Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderMessage implements Comparable\u003cReminderMessage\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Message should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderMessage(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        value \u003d message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                || (other instanceof ReminderMessage // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 value.equals(((ReminderMessage) other).value)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public int compareTo(ReminderMessage o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return value.compareTo(o.value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 15,
      "jonathantjendana": 25
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/reminder/exception/ReminderNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model.reminder.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Signals that the operation is unable to find the specified Reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 7
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/Cost.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a Spending\u0027s cost in the MoneyGoWhere list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCost(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class Cost implements Comparable\u003cCost\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Cost must not have any leading symbols, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            + \" must be a positive number with at most 2 decimal places, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            + \"and it should not be blank. The maximum cost allowed is $1 billion (1000000000).\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * The first character of the cost must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Cost must be a number with at most 2 decimal places."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+([.][0-9]{1,2})?\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Constructs an {@code Cost}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * @param cost A valid cost."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public Cost(String cost) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        checkArgument(isValidCost(cost), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        value \u003d String.format(\"%.2f\", Double.parseDouble(cost));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns true if a given string is a valid cost."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static boolean isValidCost(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 Double.parseDouble(test) \u003c\u003d 1000000000;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                || (other instanceof Cost // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                \u0026\u0026 value.equals(((Cost) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int compareTo(Cost other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return Double.compare("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                Double.parseDouble(value),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                Double.parseDouble(other.value)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 16,
      "choongyx": 14,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/CostInRangePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Tests that a {@code Spending}\u0027s {@code Cost} matches the given cost range."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class CostInRangePredicate implements Predicate\u003cSpending\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final double minCost;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final double maxCost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public CostInRangePredicate(Cost minCost, Cost maxCost) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.minCost \u003d Double.parseDouble(minCost.value);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.maxCost \u003d Double.parseDouble(maxCost.value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (this.minCost \u003e this.maxCost) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalArgumentException(\"Min cost should not be larger than max cost\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean test(Spending spending) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        double cost \u003d Double.parseDouble(spending.getCost().value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return cost \u003e\u003d minCost \u0026\u0026 cost \u003c\u003d maxCost;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof CostInRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 minCost \u003d\u003d ((CostInRangePredicate) other).minCost"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 maxCost \u003d\u003d ((CostInRangePredicate) other).maxCost); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 36
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.DateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a Spending\u0027s Date in MoneyGoWhere."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            \"Invalid date. Valid values are: today, yesterday, tomorrow or a formal date: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                    + \"DD/MM/YYYY, DD-MM-YYYY or YYYY-MM-DD.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public final LocalDate dateValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            dateValue \u003d DateUtil.parseDate(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        value \u003d DateUtil.formatDate(dateValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return DateUtil.isValidDate(test);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return Objects.hash(value, dateValue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int compareTo(Date other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return dateValue.compareTo(other.dateValue);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 69
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/DateInRangePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Tests that a {@code Spending}\u0027s {@code Date} matches the date range given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class DateInRangePredicate implements Predicate\u003cSpending\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public DateInRangePredicate(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean test(Spending spending) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return spending.getDate().compareTo(startDate) \u003e\u003d 0 \u0026\u0026 spending.getDate().compareTo(endDate) \u003c\u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof DateInRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 startDate.equals(((DateInRangePredicate) other).startDate)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 endDate.equals(((DateInRangePredicate) other).endDate)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 31
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a Spending\u0027s name in the MoneyGoWhere list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \"Names should only contain alphanumeric characters, spaces, \u0027-\u0027 and \u0027_\u0027, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[ a-zA-Z0-9_-]*$*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 !(test.trim().isEmpty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int compareTo(Name o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return fullName.compareTo(o.fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 3,
      "jonathantjendana": 1,
      "Nanosync": 8,
      "choongyx": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Tests that a {@code Spending}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cSpending\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean test(Spending spending) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(spending.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 27,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a Spending\u0027s remark in the MoneyGoWhere list. Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class Remark implements Comparable\u003cRemark\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Remark should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int compareTo(Remark o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return value.compareTo(o.value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 31,
      "Nanosync": 9
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/RemarkContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Tests that a {@code Spending}\u0027s {@code Remark} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class RemarkContainsKeywordsPredicate implements Predicate\u003cSpending\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public RemarkContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean test(Spending spending) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(spending.getRemark().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof RemarkContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 keywords.equals(((RemarkContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 32
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/Spending.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a Spending in the MoneyGoWhere list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class Spending {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public Spending(Name name, Date date, Remark remark, Cost cost, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireAllNonNull(name, date, remark, cost, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public LocalDate getDateValue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return date.dateValue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns true if both spending of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * This defines a weaker notion of equality between two spending."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isSameSpending(Spending otherSpending) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (otherSpending \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return otherSpending !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 otherSpending.getName().equals(getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u0026\u0026 (otherSpending.getDate().equals(getDate()) || otherSpending.getRemark().equals(getRemark()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns true if both spending have the same identity and data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * This defines a stronger notion of equality between two spending."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (!(other instanceof Spending)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending otherSpending \u003d (Spending) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return otherSpending.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 otherSpending.getDate().equals(getDate())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                \u0026\u0026 otherSpending.getCost().equals(getCost())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u0026\u0026 otherSpending.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 otherSpending.getTags().equals(getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return Objects.hash(name, date, remark, cost, tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .append(getDate());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (!(getRemark().toString().equals(\"\"))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            builder.append(\" Remark: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    .append(getRemark());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        builder.append(\" Cost: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .append(getCost())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .append(\" SGD\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (getTags().size() \u003e 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 20,
      "Nanosync": 12,
      "choongyx": 6,
      "-": 74,
      "austinsantoso": 18
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/SpendingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.exceptions.SpendingNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * A list of spendings"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class SpendingList implements Iterable\u003cSpending\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final ObservableList\u003cSpending\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final ObservableList\u003cSpending\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns true if the list contains an equivalent Spending as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean contains(Spending toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSpending);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Adds a Spending to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void add(Spending toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Adds bulk Spending to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void add(List\u003cSpending\u003e addList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        requireAllNonNull(addList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        internalList.addAll(addList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the Spending {@code target} in the list with {@code editedSpending}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setSpending(Spending target, Spending editedSpending) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireAllNonNull(target, editedSpending);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new SpendingNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        internalList.set(index, editedSpending);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Removes the equivalent Spending from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * The Spending must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void remove(Spending toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new SpendingNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpendings(SpendingList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Replaces the contents of this list with {@code spendings}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setSpendings(List\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        requireAllNonNull(spendings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        internalList.setAll(spendings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ObservableList\u003cSpending\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Iterator\u003cSpending\u003e iterator() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                || (other instanceof SpendingList // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                        \u0026\u0026 internalList.equals(((SpendingList) other).internalList));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 13,
      "Nanosync": 3,
      "austinsantoso": 93
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/spending/exceptions/SpendingNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Signals that the operation is unable to find the specified Spending."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class SpendingNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "austinsantoso": 5
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a Tag in the MoneyGoWhere list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be alphanumeric and have at most 64 characters.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}{1,64}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/tag/TagPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Tests that a {@code Spending}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class TagPredicate implements Predicate\u003cSpending\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public TagPredicate(Set\u003cString\u003e tag) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.tags \u003d tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean test(Spending spending) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Tag spendingTag : spending.getTags()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (tags.contains(spendingTag.tagName.toLowerCase())) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                || (other instanceof TagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u0026\u0026 tags.equals(((TagPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 37
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/util/CurrencyDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Contains utility methods for populating currency list with sample data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class CurrencyDataUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Gets sample currencies."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return a list of currencies."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static Currency[] getSampleCurrencies() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new Currency[] {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Currency(\"SGD\", \"$\", 1.00),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Currency(\"USD\", \"$\", 0.73),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Currency(\"EUR\", \"€\", 0.66),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Currency(\"MYR\", \"RM\", 3.07),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Currency(\"INR\", \"₹\", 51.92),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Currency(\"IDR\", \"Rp\", 10304.01),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Currency(\"MMK\", \"K\", 1119.53)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static Currency getDefaultCurrency() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new Currency(\"SGD\", \"$\", 1.00);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 29
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.ReminderMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Contains utility methods for populating {@code SpendingBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static Spending[] getSampleSpendings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new Spending[]{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Chicken rice\"), new Date(\"20/10/2019\"), new Remark(\"Good food\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"4.00\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"food\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Taxi\"), new Date(\"21/10/2019\"), new Remark(\"I was late for school\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"25.50\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"transport\", \"regret\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Math textbook\"), new Date(\"22/10/2019\"), new Remark(\"Wasted my money!\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"32.00\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"education\", \"regret\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Gold class movie ticket\"), new Date(\"23/10/2019\"), new Remark(\"GV ticket\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"20\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"entertainment\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Watch\"), new Date(\"24/10/2019\"), new Remark(\"Birthday gift to Jonathan\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"20\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"entertainment\", \"aesthetics\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Concert ticket\"), new Date(\"25/10/2019\"), new Remark(\"Favourite band\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"180\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"entertainment\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Transport card fare\"), new Date(\"31/10/2019\"), new Remark(\"I would rather walk\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"15\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"transport\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Other things\"), new Date(\"31/10/2019\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"30.75\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Cap\"), new Date(\"31/10/2019\"), new Remark(\"It says 5 on it\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"5.00\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Cappuccino\"), new Date(\"31/10/2019\"), new Remark(\"Too tired\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"5.00\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"drink\", \"daily\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Laksa\"), new Date(\"31/10/2019\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"5.00\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"food\", \"daily\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Bubbletea large\"), new Date(\"20/10/2019\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"5.00\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"food\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"balloon\"), new Date(\"20/10/2019\"), new Remark(\"friend\u0027s birthday\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"2.00\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"gift\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"NUS Computing Shirt\"), new Date(\"20/10/2019\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"12.75\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"clothes\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"NUS Foolscap Paper\"), new Date(\"20/10/2019\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"2.50\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"acad\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Phone case\"), new Date(\"30/09/2019\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"12\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"accessories\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Laptop sticker\"), new Date(\"30/09/2019\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"3\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"accessories\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Sephora makeup\"), new Date(\"30/09/2019\"), new Remark(\"for my friend\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"75\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"gift\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"water\"), new Date(\"29/09/2019\"), new Remark(\"overseas bottled water safer\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"1\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"daily\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"Alcohol\"), new Date(\"29/09/2019\"), new Remark(\"can be used for many things\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"10\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"medical\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            new Spending(new Name(\"plaster\"), new Date(\"28/09/2019\"), new Remark(\"fell down\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"10\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                getTagSet(\"medical\"))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static Reminder[] getSampleReminders() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Reminder[] {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            new Reminder(new Date(\"yesterday\"), new ReminderMessage(\"Pay school fees\")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            new Reminder(new Date(\"5 days later\"), new ReminderMessage(\"Check bank balance\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            new Reminder(new Date(\"7 days later\"), new ReminderMessage(\"Repay my friend $2\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            new Reminder(new Date(\"30 days later\"), new ReminderMessage(\"Pay phone bills\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            new Reminder(new Date(\"30 days later\"), new ReminderMessage(\"Pay rent\"))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static ReadOnlySpendingBook getSampleSpendingBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBook sampleAb \u003d new SpendingBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        for (Spending sampleSpending : getSampleSpendings()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            sampleAb.addSpending(sampleSpending);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (Reminder sampleReminder : getSampleReminders()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            sampleAb.addReminder(sampleReminder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 15,
      "jonathantjendana": 1,
      "Nanosync": 75,
      "-": 26,
      "austinsantoso": 4
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/CommandStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a storage for user inputted commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public interface CommandStorage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Adds a particular command to storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param command The command to be added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void addCommand(String command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrieves the previous user inputted command that is stored in storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return The previous user input command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String getPrevCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrieves the next user inputted command that is stored in storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return The next user input command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String getNextCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 25
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/CommandStorageImpl.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * A storage responsible for storing user input commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class CommandStorageImpl implements CommandStorage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private ArrayList\u003cString\u003e commands;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private int currIndex \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public CommandStorageImpl() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commands \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Adds a command to the commandStorage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param command the command to the added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void addCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commands.add(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        currIndex \u003d commands.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrieves the previous instruction stored with respect to the current index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * if current index is the first element in storage, returns first command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return the previous command with respect to the current index."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getPrevCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (--currIndex \u003c 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            currIndex \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return commands.get(currIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrieves the next instruction stored with respect to the current index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * if the current index is the last element in storage, returns last command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return the next command with respect tot eh current index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (++currIndex \u003e commands.size() - 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            currIndex \u003d commands.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return commands.get(currIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 52
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.model.budget.BudgetMonth.isValidBudgetMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.budget.BudgetMonth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is invalid!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final String month;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given Reminder details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"value\") String value,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            @JsonProperty(\"month\") String month) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        value \u003d source.getValueString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        month \u003d source.getMonthString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Converts this Jackson-friendly adapted Reminder object into the model\u0027s {@code Reminder} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Reminder."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        double realValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String realMonth;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"value\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            realValue \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT, \"value\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (month \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"BudgetMonth\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (!isValidBudgetMonth(month)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new IllegalValueException(String.format(BudgetMonth.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        realMonth \u003d month;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new Budget(realValue, realMonth);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 73
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/JsonAdaptedCurrency.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Jackson-friendly version of {@link Currency}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class JsonAdaptedCurrency implements Comparable\u003cJsonAdaptedCurrency\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Currency\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final String symbol;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final double rate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Constructs a {@code JsonAdaptedSpending} with the given Currency details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public JsonAdaptedCurrency(@JsonProperty(\"name\") String name, @JsonProperty(\"symbol\") String symbol,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            @JsonProperty(\"rate\") double rate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.symbol \u003d symbol;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Converts a given {@code Currency} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public JsonAdaptedCurrency(Currency source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        name \u003d source.name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        symbol \u003d source.symbol;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        rate \u003d source.rate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Converts this Jackson-friendly adapted Spending object into the model\u0027s {@code Currency} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Currency."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Currency toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!Currency.isValidCurrencyName(name)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalValueException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (symbol \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Symbol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!Currency.isValidCurrencySymbol(symbol)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalValueException(Currency.MESSAGE_CONSTRAINT_SYMBOL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (rate \u003c\u003d 0 || rate \u003e\u003d Double.MAX_VALUE) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalValueException(Currency.MESSAGE_CONSTRAINT_RATE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return new Currency(name, symbol, rate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public int compareTo(JsonAdaptedCurrency o) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return name.compareTo(o.name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 73
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/JsonAdaptedReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.ReminderMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Jackson-friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class JsonAdaptedReminder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final String reminderMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given Reminder details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public JsonAdaptedReminder(@JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                               @JsonProperty(\"reminderMessage\") String reminderMessage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.reminderMessage \u003d reminderMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public JsonAdaptedReminder(Reminder source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        deadline \u003d source.getDeadline().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderMessage \u003d source.getReminderMessage().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Converts this Jackson-friendly adapted Reminder object into the model\u0027s {@code Reminder} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Reminder."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (!Date.isValidDate(deadline)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        final Date modelDeadline \u003d new Date(deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (reminderMessage \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    ReminderMessage.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        final ReminderMessage modelReminderMessage \u003d new ReminderMessage(reminderMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Reminder(modelDeadline, modelReminderMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 63
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/JsonAdaptedSpending.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Jackson-friendly version of {@link Spending}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class JsonAdaptedSpending {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Spending\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a {@code JsonAdaptedSpending} with the given Spending details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public JsonAdaptedSpending(@JsonProperty(\"name\") String name, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        @JsonProperty(\"remark\") String remark, @JsonProperty(\"cost\") String cost,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Converts a given {@code Spending} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public JsonAdaptedSpending(Spending source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        cost \u003d source.getCost().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Converts this Jackson-friendly adapted Spending object into the model\u0027s {@code Spending} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Spending."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Spending toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        final List\u003cTag\u003e spendingTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            spendingTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(spendingTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new Spending(modelName, modelDate, modelRemark, modelCost, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 10,
      "Nanosync": 17,
      "choongyx": 9,
      "-": 60,
      "austinsantoso": 12
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/JsonSerializableSpendingBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.storage.JsonAdaptedCurrency.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * An Immutable SpendingBook that is serializable to JSON format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@JsonRootName(value \u003d \"spendingbook\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class JsonSerializableSpendingBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final List\u003cJsonAdaptedSpending\u003e spendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private final List\u003cJsonAdaptedCurrency\u003e currencies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private JsonAdaptedBudget budget;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private String currency;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructs a {@code JsonSerializableSpendingBook} with the given spendings and reminders."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public JsonSerializableSpendingBook(@JsonProperty(\"budget\") JsonAdaptedBudget budget,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            @JsonProperty(\"currency\") String currency,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            @JsonProperty(\"currencies\") Set\u003cJsonAdaptedCurrency\u003e currencies,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            @JsonProperty(\"spendings\") List\u003cJsonAdaptedSpending\u003e spendings,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            @JsonProperty(\"reminders\") List\u003cJsonAdaptedReminder\u003e reminders) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.currencies.addAll(currencies);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.spendings.addAll(spendings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.reminders.addAll(reminders);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Converts a given {@code ReadOnlySpendingBook} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSpendingBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public JsonSerializableSpendingBook(ReadOnlySpendingBook source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        currencies.addAll(source.getCurrencies().stream().map(JsonAdaptedCurrency::new).sorted()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        currency \u003d source.getCurrencyInUse().name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        spendings.addAll(source.getSpendingList().stream().map(JsonAdaptedSpending::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminders.addAll(source.getReminderList().stream().map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budget \u003d new JsonAdaptedBudget(source.getBudget());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Converts this MoneyGoWhere into the model\u0027s {@code SpendingBook} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public SpendingBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        SpendingBook spendingBook \u003d new SpendingBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency currencyInUse \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (JsonAdaptedCurrency jsonAdaptedCurrency : currencies) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            Currency currency \u003d jsonAdaptedCurrency.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (currency.name.equals(this.currency)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                currencyInUse \u003d currency;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            spendingBook.addCurrency(currency);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Ensure that the currency in use exists."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (currencyInUse \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Currency\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBook.setCurrencyInUse(currencyInUse);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (JsonAdaptedSpending jsonAdaptedSpending : spendings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Spending spending \u003d jsonAdaptedSpending.toModelType();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            spendingBook.addSpending(spending);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder: reminders) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            spendingBook.addReminder(reminder);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        spendingBook.setBudget(budget.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return spendingBook;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 67,
      "Nanosync": 34,
      "austinsantoso": 4
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/JsonSpendingBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * A class to access SpendingBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class JsonSpendingBookStorage implements SpendingBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSpendingBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public JsonSpendingBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Path getSpendingBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Optional\u003cReadOnlySpendingBook\u003e readSpendingBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return readSpendingBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Similar to {@link #readSpendingBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Optional\u003cReadOnlySpendingBook\u003e readSpendingBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Optional\u003cJsonSerializableSpendingBook\u003e jsonSpendingBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                filePath, JsonSerializableSpendingBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (!jsonSpendingBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return Optional.of(jsonSpendingBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void saveSpendingBook(ReadOnlySpendingBook spendingBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        saveSpendingBook(spendingBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Similar to {@link #saveSpendingBook(ReadOnlySpendingBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void saveSpendingBook(ReadOnlySpendingBook spendingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(spendingBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSpendingBook(spendingBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 80
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/SpendingBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a storage for {@link SpendingBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public interface SpendingBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Path getSpendingBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Returns SpendingBook data as a {@link ReadOnlySpendingBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Optional\u003cReadOnlySpendingBook\u003e readSpendingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @see #getSpendingBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Optional\u003cReadOnlySpendingBook\u003e readSpendingBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Saves the given {@link ReadOnlySpendingBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param spendingBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    void saveSpendingBook(ReadOnlySpendingBook spendingBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @see #saveSpendingBook(ReadOnlySpendingBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    void saveSpendingBook(ReadOnlySpendingBook spendingBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 46
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public interface Storage extends SpendingBookStorage, UserPrefsStorage, CommandStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Path getSpendingBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    Optional\u003cReadOnlySpendingBook\u003e readSpendingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    void saveSpendingBook(ReadOnlySpendingBook spendingBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 8,
      "-": 22,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Manages storage of SpendingBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private SpendingBookStorage spendingBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private CommandStorageImpl commandStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public StorageManager(SpendingBookStorage spendingBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.spendingBookStorage \u003d spendingBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.commandStorage \u003d new CommandStorageImpl();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SpendingBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Path getSpendingBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return spendingBookStorage.getSpendingBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Optional\u003cReadOnlySpendingBook\u003e readSpendingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return readSpendingBook(spendingBookStorage.getSpendingBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public Optional\u003cReadOnlySpendingBook\u003e readSpendingBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return spendingBookStorage.readSpendingBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void saveSpendingBook(ReadOnlySpendingBook spendingBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        saveSpendingBook(spendingBook, spendingBookStorage.getSpendingBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void saveSpendingBook(ReadOnlySpendingBook spendingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBookStorage.saveSpendingBook(spendingBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d commandStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void addCommand(String command) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.commandStorage.addCommand(command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getPrevCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this.commandStorage.getPrevCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this.commandStorage.getNextCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 21,
      "-": 56,
      "austinsantoso": 18
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Represents a storage for {@link seedu.moneygowhere.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Saves the given {@link seedu.moneygowhere.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/BudgetPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.commons.util.MoneyUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * The UI component that is responsible for Showing the current monthly budget and total spending."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class BudgetPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final String FXML \u003d \"BudgetPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private HBox panePlaceHolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Label remainingBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Label titleText;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Label budgetAmount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private double sum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Currency currencyInUse;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public BudgetPanel(Budget budget, Currency currencyInUse) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.amount \u003d budget.getAmount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.sum \u003d budget.getSum();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.currencyInUse \u003d currencyInUse;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * sets the values of Labels and progress bar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        remainingBudget.setText(getRemainingBudgetText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budgetAmount.setText(getBudgetAmount());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        updateTitleText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Updates the values of amount and sum."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Based on the new {@code Budget}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param budget the budget to get data to update."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void update(Budget budget, Currency currencyInUse) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (this.amount !\u003d budget.getAmount() || this.sum !\u003d budget.getSum()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            || !this.currencyInUse.equals(currencyInUse)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            this.amount \u003d budget.getAmount();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            this.sum \u003d budget.getSum();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            this.currencyInUse \u003d currencyInUse;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            update();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private String getRemainingBudgetText() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        double percentDiff \u003d (amount - sum) / amount;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        double remainingAmount \u003d Math.abs(amount - sum) * currencyInUse.rate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String defaultOutput \u003d String.format(\"%s %s\", currencyInUse.symbol, MoneyUtil.format(remainingAmount));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (percentDiff \u003c 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            remainingBudget.setTextFill(Color.web(\"#FF0000\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            return \"-\" + defaultOutput;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        if (percentDiff \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            remainingBudget.setTextFill(Color.web(\"#8B2300\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        } else if (percentDiff \u003c\u003d 0.5) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            remainingBudget.setTextFill(Color.web(\"#FF8C00\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            remainingBudget.setTextFill(Color.web(\"#00698B\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return defaultOutput;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Sets the colour of the titleText to red."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * If user has exceeded the budget."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private void updateTitleText() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (amount - sum \u003c 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            titleText.setTextFill(Color.web(\"#FF0000\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            titleText.setTextFill(Color.web(\"#00FF00\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private String getBudgetAmount() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return String.format(\"This month\u0027s budget: %s %s\", currencyInUse.symbol,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                MoneyUtil.format(amount * currencyInUse.rate));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 8,
      "Nanosync": 11,
      "austinsantoso": 89
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final PreviousCommand prevCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final NextCommand nextCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, PreviousCommand prevCommand, NextCommand nextCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.prevCommand \u003d prevCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.nextCommand \u003d nextCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.valueOf(\"UP\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                handleUp();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.valueOf(\"DOWN\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                handleDown();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Handles when the up button was pressed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrieves the previously stored command with respect to the current index."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private void handleUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandTextField.setText(prevCommand.getPrevCommand());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandTextField.end();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Handles when the down button was pressed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrieves the next stored command with respect to the current index."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private void handleDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandTextField.setText(nextCommand.getNextCommand());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandTextField.end();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "         * @see seedu.moneygowhere.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Represents a function to get previous commands."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public interface PreviousCommand {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "         * Gets the previously stored command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "         *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "         * @see seedu.moneygowhere.logic.Logic#getPrevCommand()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String getPrevCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Represents a function to get previous commands."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public interface NextCommand {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "         * Gets the previously stored command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "         * @see seedu.moneygowhere.logic.Logic#getNextCommand()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String getNextCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "-": 71,
      "austinsantoso": 60
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/GraphPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.commons.util.MoneyUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Tab containing the spending graph."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class GraphPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final String FXML \u003d \"PlaceholderPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private StackPane panePlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public GraphPanel(LinkedHashMap\u003cString, Double\u003e graphData, String commandResult, Currency currencyInUse) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        loadData(graphData, commandResult, currencyInUse);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Constructs the spending graph with the data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private void loadData(LinkedHashMap\u003cString, Double\u003e graphData, String commandResult, Currency currency) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        //@@author choongyx"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        xAxis.setLabel(\"Date\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        yAxis.setLabel(String.format(\"Amount spent (%s)\", currency.symbol));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        LineChart\u003cString, Number\u003e spendingChart \u003d new LineChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        series.setName(\"Spending\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        for (Map.Entry\u003cString, Double\u003e i : graphData.entrySet()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            double newCost \u003d currency.rate * i.getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            XYChart.Data\u003cString, Number\u003e dataToAdd \u003d new XYChart.Data\u003c\u003e(i.getKey().toString(), Math.round(newCost));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            series.getData().add(dataToAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        spendingChart.getData().add(series);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        spendingChart.setTitle(commandResult);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        //@@author jonathantjendana"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        for (XYChart.Series\u003cString, Number\u003e s : spendingChart.getData()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            for (XYChart.Data\u003cString, Number\u003e d : s.getData()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                Tooltip tp \u003d new Tooltip("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                        \"Date: \\t\" + d.getXValue() + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                                + \"Spending: \\t\" + currency.symbol + MoneyUtil.format(d.getYValue().doubleValue()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                tp.setShowDelay(Duration.seconds(0.0005));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                Tooltip.install(d.getNode(), tp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                //Adding class on hover"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                d.getNode().setOnMouseEntered(event -\u003e d.getNode().getStyleClass().add(\"onHover\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                //Removing class on exit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                d.getNode().setOnMouseExited(event -\u003e d.getNode().getStyleClass().remove(\"onHover\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        panePlaceholder.getChildren().add(spendingChart);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 46,
      "choongyx": 28
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private SpendingListPanel spendingListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private GraphPanel graphPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private StatsPanel statsPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private StackPane spendingListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private TabPane tabPanePlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private VBox budgetPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private BudgetPanel budgetPanel;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Tab graphTab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Tab statsTab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingListPanel \u003d new SpendingListPanel(logic.getFilteredSpendingList(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                logic.getSpendingBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        spendingListPanelPlaceholder.getChildren().add(spendingListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getSortedReminderList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getSpendingBookFilePath(), logic.getSpendingBook());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, this::getPrevCommand, this::getNextCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Currency currencyInUse \u003d logic.getSpendingBook().getCurrencyInUse();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetPanel bp \u003d new BudgetPanel(logic.getSpendingBook().getBudget(), currencyInUse);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budgetPanel \u003d bp;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        budgetPanelPlaceholder.getChildren().add(bp.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        graphTab \u003d new Tab(\"Graph\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        graphPanel \u003d new GraphPanel(logic.getGraphData(), \"Graph\\n\", currencyInUse);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        graphTab.setContent(graphPanel.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        statsTab \u003d new Tab(\"Statistics\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        statsPanel \u003d new StatsPanel(logic.getStatsData(), \"Statistics\\n\", currencyInUse);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        statsTab.setContent(statsPanel.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        tabPanePlaceholder.getTabs().addAll(graphTab, statsTab);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        resultDisplay.setFeedbackToUser(HelpCommand.SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        primaryStage.setResizable(true);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public SpendingListPanel getSpendingListPanel() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return spendingListPanel;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return reminderListPanel;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @see seedu.moneygowhere.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            // store to command storage even though invalid"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            Currency currencyInUse \u003d logic.getSpendingBook().getCurrencyInUse();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            budgetPanel.update(logic.getSpendingBook().getBudget(), currencyInUse);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            if (commandResult.isShowGraph()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                graphPanel \u003d new GraphPanel(logic.getGraphData(), commandResult.getFeedbackToUser(), currencyInUse);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                tabPanePlaceholder.getSelectionModel().select(graphTab);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                graphTab.setContent(graphPanel.getRoot());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                graphPanel \u003d new GraphPanel(logic.getGraphData(), \"Graph\\n\", currencyInUse);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                logger.log(Level.INFO, logic.getGraphData().toString());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                graphTab.setContent(graphPanel.getRoot());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                statsPanel \u003d new StatsPanel(logic.getStatsData(), commandResult.getFeedbackToUser(), currencyInUse);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                tabPanePlaceholder.getSelectionModel().select(statsTab);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                statsTab.setContent(statsPanel.getRoot());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                statsPanel \u003d new StatsPanel(logic.getStatsData(), \"Statistics\\n\", currencyInUse);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                statsTab.setContent(statsPanel.getRoot());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrieves the previously stored command."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @see seedu.moneygowhere.logic.Logic#getPrevCommand()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private String getPrevCommand() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return logic.getPrevCommand();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrieves the next stored command."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @see seedu.moneygowhere.logic.Logic#getNextCommand()"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private String getNextCommand() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return logic.getNextCommand();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 9,
      "jonathantjendana": 24,
      "Nanosync": 12,
      "choongyx": 21,
      "-": 166,
      "austinsantoso": 40
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/ReminderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * An UI component that displays information of a {@code Reminder}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public final Reminder reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderCard(Reminder reminder, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String reminderDueDateDescription \u003d reminder.getDueDateDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (reminderDueDateDescription.contains(\"Overdue\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            deadline.setTextFill(Color.RED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            deadline.setText(reminderDueDateDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            switch (reminderDueDateDescription) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case \"Today\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                deadline.setTextFill(Color.ORANGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case \"Tomorrow\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                deadline.setTextFill(Color.valueOf(\"#7B9918\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            deadline.setText(\"Due \" + reminder.getDueDateDescription());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        message.setText(reminder.getReminderMessage().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u0026\u0026 reminder.equals(card.reminder);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 80
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/ReminderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Panel containing the list of reminders."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private ListView\u003cReminder\u003e reminderListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cReminder\u003e reminderList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderListView.setItems(reminderList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Reminder} using a {@code ReminderCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cReminder\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        protected void updateItem(Reminder reminder, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            super.updateItem(reminder, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (empty || reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                setGraphic(new ReminderCard(reminder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 41
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        resultDisplay.setText(\"Welcome to MoneyGoWhere!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 1,
      "Nanosync": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/SpendingCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.commons.util.MoneyUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An UI component that displays information of a {@code Spending}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class SpendingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final String FXML \u003d \"SpendingListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public final Spending spending;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private VBox labelVbox;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingCard(Spending spending, Currency currency, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.spending \u003d spending;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        name.setText(spending.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        date.setText(DateUtil.prettyFormatDate(spending.getDate().value));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        double newRate \u003d currency.rate * Double.parseDouble(spending.getCost().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String formattedCost \u003d String.format(\"%s %s\", currency.symbol, MoneyUtil.format(newRate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        cost.setText(formattedCost);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (spending.getRemark().value.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            labelVbox.getChildren().remove(remark);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            remark.setText(spending.getRemark().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        if (spending.getTags().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            labelVbox.getChildren().remove(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            spending.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (!(other instanceof SpendingCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        SpendingCard card \u003d (SpendingCard) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u0026\u0026 spending.equals(card.spending);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 18,
      "Nanosync": 11,
      "choongyx": 1,
      "-": 55,
      "austinsantoso": 10
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/SpendingListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Panel containing the list of spending."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class SpendingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final String FXML \u003d \"SpendingListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SpendingListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Currency currency;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private ListView\u003cSpending\u003e spendingListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author Nanosync"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Creates a Spending List Panel. Requires access to the spending book to subscribe to currency changes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param spendingList Spending list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @param spendingBook Spending book"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingListPanel(ObservableList\u003cSpending\u003e spendingList, ReadOnlySpendingBook spendingBook) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.currency \u003d spendingBook.getCurrencyInUse();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBook.registerCurrencyChangedListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            this.currency \u003d newValue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            ObservableList\u003cSpending\u003e spendingObservableList \u003d spendingListView.getItems();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            // Trigger a refresh on all items. Refresh() only refreshes the current visible items."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            spendingListView.setItems(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            spendingListView.setItems(spendingObservableList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingListView.setItems(spendingList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingListView.setCellFactory(listView -\u003e new SpendingListViewCell());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Spending} using a {@code SpendingCard}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    class SpendingListViewCell extends ListCell\u003cSpending\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        protected void updateItem(Spending spending, boolean empty) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            super.updateItem(spending, empty);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            if (empty || spending \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                setGraphic(new SpendingCard(spending, currency, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 1,
      "Nanosync": 33,
      "austinsantoso": 35
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/StatsPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.commons.util.MoneyUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": " * Tab containing the pie chart."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class StatsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final String FXML \u003d \"PlaceholderPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private StackPane panePlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public StatsPanel(LinkedHashMap\u003cString, Double\u003e statsData, String commandResult, Currency currencyInUse) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        loadData(statsData, commandResult, currencyInUse);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    //@@author choongyx"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Constructs the pie chart with the data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private void loadData(LinkedHashMap\u003cString, Double\u003e statsData, String commandResult, Currency currency) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        for (Map.Entry\u003cString, Double\u003e i : statsData.entrySet()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            double newCost \u003d currency.rate * i.getValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            pieChartData.add(new PieChart.Data(String.format(\"%s (%s%s)\", i.getKey(), currency.symbol,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                MoneyUtil.format(newCost)), Math.round(i.getValue())));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        PieChart pieChart \u003d new PieChart(pieChartData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Text text \u003d new Text();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        if (pieChartData.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            text.setText(\"No data to show\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        pieChart.setTitle(commandResult);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        pieChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        panePlaceholder.getChildren().addAll(pieChart, text);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 23,
      "choongyx": 29
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Label currency;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlySpendingBook spendingBook) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBook.registerCurrencyChangedListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            currency.setText(\"Currency: \" + newValue.name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        currency.setText(\"Currency: \" + spendingBook.getCurrencyInUse().name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 10,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/moneygowhere_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "-": 80,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/main/java/seedu/moneygowhere/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/BudgetPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003cHBox fx:id\u003d\"panePlaceholder\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003cImageView fitHeight\u003d\"87.0\" fitWidth\u003d\"84.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cimage\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cImage url\u003d\"@../images/money.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003c/image\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        \u003cLabel id\u003d\"titleText\" fx:id\u003d\"titleText\" styleClass\u003d\"cell_big_label\" text\u003d\"Remaining:\" textAlignment\u003d\"CENTER\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cLabel id\u003d\"remainingBudget\" fx:id\u003d\"remainingBudget\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$remaining\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cLabel id\u003d\"budgetAmount\" fx:id\u003d\"budgetAmount\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$amount\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 19,
      "Nanosync": 1,
      "austinsantoso": 11
    }
  },
  {
    "path": "src/main/resources/view/CustomTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/*.background {*/"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/*  -fx-background-color: derive(#23B35B, 20%);*/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/*  background-color: #23B35B; !* Used in the default.html file *!*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-padding: 2px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-opacity: 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-border-radius: 10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-min-height: 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-max-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-padding: 4px;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-border-width: 1px;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-opacity: 0.6;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".menu:hover, .menu:focused, .menu:pressed, .menu:showing {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: #23B35B;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".menu-item:focused, .menu-item:hover {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: #23B35B;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-border-width: 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-font-size: 11px;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-radius: 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-hgap: 7;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-vgap: 3;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: #23B35B;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-border-radius: 2;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-radius: 2;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-font-size: 11;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#remark {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-opacity: 0.6;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#message {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-font-weight: bold;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-text-alignment: center;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#deadline {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-text-alignment: center;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".onHover{"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: ORANGE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab-content-area  {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-text-alignment: center;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  /*-fx-alignment: center;*/"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".split-pane .split-pane-divider {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".chart-plot-background {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-image: url(../images/moneygowhere.png);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-repeat: no-repeat;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-position: center;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-opacity: 0.6;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  /*-fx-background-size: contain;*/"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".chart-series-line {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-stroke: lightgreen;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".chart-line-symbol {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: #FFD8B3, white;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".separator"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "{"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: radial-gradient(focus-distance 0% , center 50% 50% , radius 60% , #23B35B, white);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-radius: 2;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-padding:1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-opacity: 0.7;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".separator *.line"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "{"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-border-style: solid;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-border-width: 0px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#spendingList \u003e .label {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-text-alignment: center;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#budgetPanelPlaceholder {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-padding: 0 0 10 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "#budgetProgressBar {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-accent: #85CC7E;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-opacity: 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab-pane"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "{"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab{"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab-pane .tab"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "{"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab-pane .tab:selected"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "{"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-color: #85CC7E;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-font-size: 12px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-font-weight: bold;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".tab-pane:top *.tab-header-area {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-background-insets: 0, 0 0 1 0;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-padding: 0.416667em 0.166667em 0.0em 0.0em; /* overridden as 5 2 0 0 */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "#spendingListView {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-selection-bar: #23B35B;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ".list-cell:focused {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "  -fx-background-color: #AADFAA;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ".tab-pane:top *.tab-header-area {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-background-insets: 0, 0 0 1 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  /* -fx-padding: 0.416667em 0.166667em 0.0em 0.833em; /* 5 2 0 10 */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  -fx-padding: 0.416667em 0.166667em 0.0em 0.0em; /* overridden as 5 2 0 0 */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "#remainingBudget {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  -fx-font-family: \"Segoe UI Bold\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  -fx-font-size: 24;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "#budgetRemark {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  -fx-font-size: 18;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "#budgetAmount {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  -fx-font-size: 14;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 96,
      "jonathantjendana": 126,
      "Nanosync": 2,
      "austinsantoso": 13
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "#filterField, #spendingListPanel, #spendingWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 351,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/main/resources/view/GraphChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cPane fx:id\u003d\"graphPaneView\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 11
    }
  },
  {
    "path": "src/main/resources/view/GraphPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Graph\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "         \u003cVBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "               \u003cPane fx:id\u003d\"paneView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"MoneyGoWhere\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \u003cImage url\u003d\"@/images/moneygowhere_32.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        \u003cURL value\u003d\"@CustomTheme.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cGridPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"70\" percentHeight\u003d\"76.0\" prefHeight\u003d\"70.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"15\" percentHeight\u003d\"15.0\" prefHeight\u003d\"15.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10\" percentHeight\u003d\"6.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"5\" percentHeight\u003d\"3.0\" prefHeight\u003d\"5.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cGridPane GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5.0\" percentWidth\u003d\"26.0\" prefWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"2\" percentWidth\u003d\"1\" prefWidth\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"48.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"2\" percentWidth\u003d\"1\" prefWidth\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"24.0\" prefWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cVBox fx:id\u003d\"spendingList\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                  \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"My Spending List\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"spendingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"  /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cSeparator minHeight\u003d\"0.0\" minWidth\u003d\"2.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"80.0\" prefWidth\u003d\"2\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cVBox fx:id\u003d\"mainPanel\" GridPane.columnIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    \u003cTabPane fx:id\u003d\"tabPanePlaceholder\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003ctabs\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003c/tabs\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cSeparator minHeight\u003d\"0.0\" minWidth\u003d\"2.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"80.0\" prefWidth\u003d\"2\" GridPane.columnIndex\u003d\"3\" GridPane.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cVBox GridPane.columnIndex\u003d\"4\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    \u003cVBox fx:id\u003d\"budgetPanelPlaceholder\" maxWidth\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                    \u003cSeparator orientation\u003d\"HORIZONTAL\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003cLabel styleClass\u003d\"label-bright\" text\u003d\"Reminders\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\" GridPane.rowIndex\u003d\"1\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" GridPane.rowIndex\u003d\"2\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" GridPane.rowIndex\u003d\"3\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 1,
      "jonathantjendana": 45,
      "Nanosync": 7,
      "-": 39,
      "austinsantoso": 35
    }
  },
  {
    "path": "src/main/resources/view/PlaceholderPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003cStackPane fx:id\u003d\"panePlaceholder\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 8
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003cGridPane HBox.Hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"5.0\" percentWidth\u003d\"5.0\" prefWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"66.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"2\" percentWidth\u003d\"1\" prefWidth\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"28.0\" prefWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"120\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u003cLabel fx:id\u003d\"message\" alignment\u003d\"CENTER\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$message\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cSeparator halignment\u003d\"LEFT\" minHeight\u003d\"0.0\" minWidth\u003d\"1.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"80.0\" prefWidth\u003d\"1\" GridPane.columnIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"110\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u003cLabel fx:id\u003d\"deadline\" alignment\u003d\"CENTER\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 45
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 8
    }
  },
  {
    "path": "src/main/resources/view/SpendingListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003cpadding\u003e\u003cInsets top\u003d\"15\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"7.5\" percentWidth\u003d\"13.0\" prefWidth\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"63.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"24.0\" prefWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cVBox fx:id\u003d\"labelVbox\" alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" \u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" wrapText\u003d\"true\" \u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003cLabel fx:id\u003d\"cost\"  styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"SOMETIMES\" minHeight\u003d\"15.0\" prefHeight\u003d\"25.0\" valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 39,
      "Nanosync": 1,
      "choongyx": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/SpendingListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \u003cListView fx:id\u003d\"spendingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/main/resources/view/StatsChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cPane fx:id\u003d\"statsPaneView\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 11
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \u003cHBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \u003cHBox HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \u003cLabel fx:id\u003d\"currency\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonSerializableSpendingBookTest/invalidSpendingBook.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \"budget\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    \"value\": \"asdf\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    \"sum\": \"asdf\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  },"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"currencies\" : [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"EUR\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"€\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 0.66"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"IDR\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"Rp\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 10304.01"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"INR\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"₹\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 51.92"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"MMK\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"K\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 1119.53"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"MYR\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"RM\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 3.07"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"SGD\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"$\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 1.0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"USD\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"$\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 0.73"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \"spendings\": [ {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \"name\": \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\": \"1/1/2019\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \"remark\": \"valid remark\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\": \"4\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  \"reminders\" : [ {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"deadline\" : \" \","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"reminderMessage\" : \"valid message\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 4,
      "jonathantjendana": 2,
      "Nanosync": 31,
      "choongyx": 1,
      "-": 3,
      "austinsantoso": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableSpendingBookTest/typicalSpendingBook.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"_comment\": \"MoneyGoWhere save file which contains the same Spending values as in TypicalSpendings#getTypicalSpendingBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \"budget\": {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    \"value\" : \"10000\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    \"sum\": \"772.50\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    \"month\": \"10/2019\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"currencies\" : [ {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"EUR\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"€\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 0.66"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"IDR\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"Rp\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 10304.01"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"INR\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"₹\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 51.92"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"MMK\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"K\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 1119.53"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"MYR\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"RM\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 3.07"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"SGD\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"$\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 1.0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"USD\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"$\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 0.73"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \"spendings\" : [ {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"name\" : \"Apple\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\" : \"1/1/2019\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"remark\": \"An apple a day keeps the doctor away\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\" : \"1.00\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"tagged\" : [ \"fruit\" ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"name\" : \"Banana\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\" : \"2/1/2019\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"remark\": \"The store ran out of apples\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\" : \"1.00\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"tagged\" : [ \"fruit\" ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"name\" : \"Cat food\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\" : \"3/1/2019\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"remark\": \"For my pet cat\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\" : \"5.50\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"name\" : \"Dessert\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\" : \"4/1/2019\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"remark\": \"Supper\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\" : \"15\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"tagged\" : [ \"supper\" ]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"name\" : \"Encyclopedia\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\" : \"5/1/2019\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"remark\": \"Hobby\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\" : \"80\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"name\" : \"Flight ticket\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\" : \"6/1/2019\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"remark\": \"To Hong Kong\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\" : \"400\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"name\" : \"Glasses\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\" : \"7/1/2019\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"remark\": \"New spectacles\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\" : \"270\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  \"reminders\" : [ {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"deadline\" : \"25/12/2019\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"reminderMessage\" : \"Pay Bill\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 5,
      "Nanosync": 38,
      "choongyx": 24,
      "-": 12,
      "austinsantoso": 6
    }
  },
  {
    "path": "src/test/data/JsonSpendingBookStorageTest/invalidAndValidSpendingSpendingBook.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"currency\" : \"SGD\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"currencies\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"Not a currency\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"?\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 999.0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"SGD\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"$\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 1.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \"spendings\": [ {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\": \"1/1/2019\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \"remark\": \"Likes to watch movies\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\": \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\": \"Person With Invalid Date Field\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\": \" \","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \"remark\": \"Likes to watch movies\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\": \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  \"reminders\" : [ {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"deadline\" : \"30/11/2019\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"reminderMessage\" : \"valid reminder\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"deadline\" : \" \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"reminderMessage\" : \"Invalid reminder\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 7,
      "jonathantjendana": 2,
      "Nanosync": 13,
      "choongyx": 2,
      "-": 5,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/test/data/JsonSpendingBookStorageTest/invalidSpendingSpendingBook.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"currency\" : \"\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"currencies\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"name\" : \"Not a currency\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"symbol\" : \"?\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"rate\" : 999.0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "  \"spendings\": [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    \"date\": \"1/1/2019\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    \"remark\": \"Likes to watch movies\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    \"cost\": \"4\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "  \"reminders\" : [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"deadline\" : \" \","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \"reminderMessage\" : \"Reminder without deadline.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 4,
      "jonathantjendana": 1,
      "Nanosync": 7,
      "choongyx": 1,
      "-": 4,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"spendingBookFilePath\" : \"moneygowhere.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "  \"spendingBookFilePath\" : \"moneygowhere.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/SampleSpendings/invalidDateSpending.csv",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "﻿name,cost,date,tagged,remark"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Buy Apples,100,17/10/19,\"expensive\",\"Expensive Apple\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Buy Pears,100,17/10/2019,\"yummy\",\"Korean Pear\""
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 3
    }
  },
  {
    "path": "src/test/data/SampleSpendings/invalidHeaders.csv",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "names,dates,remarks,costs,tags"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\"Chicken rice\",20/10/2019,,4.00,food"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 2
    }
  },
  {
    "path": "src/test/data/SampleSpendings/invalidHeadersSize.csv",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "name,cost,date"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "\"Chicken rice\",4.00,20/10/2019"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 2
    }
  },
  {
    "path": "src/test/data/SampleSpendings/invalidNameSpending.csv",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "name,cost,date,tagged,remark"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Buy Ha!ns Mu@ster,100,17/10/2019,yummy,\"Korean Pear\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Buy Apples,100,17/10/2019,expensive,\"Expensive Apple\""
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 3
    }
  },
  {
    "path": "src/test/data/SampleSpendings/validSpending.csv",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "name,cost,date,tagged,remark"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Buy Apples,100,17/10/2019,juicy,\"Fuji\"\" Apple\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Buy Pears,100,17/10/2019,yummy,\"Korean Pear\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "Buy Mangoes,100,17/10/2019,\"yummy,nice\",\"US Mango\""
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 4
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/moneygowhere_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/util/DateUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Tests DateUtil."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class DateUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDate_validDate_correctResult() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, Month.DECEMBER, 25);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(date, DateUtil.parseDate(\"25/12/2019\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        date \u003d LocalDate.of(2019, Month.OCTOBER, 12);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(date, DateUtil.parseDate(\"12/10/2019\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDate_validDate_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateUtil.parseDate(\"12/25/2019\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateUtil.parseDate(\"12/10/2019 midnight\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateUtil.parseDate(\"12-10-2019 midnight\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateUtil.parseDate(\"does not work\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e DateUtil.parseDate(\"32 nov\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDate_isValidDate_correctResult() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Valid dates"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(DateUtil.isValidDate(\"2/2\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(DateUtil.isValidDate(\"2-2\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(DateUtil.isValidDate(\"yesterday\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(DateUtil.isValidDate(\"last month\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(DateUtil.isValidDate(\"The 31st of April in the year 2008\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(DateUtil.isValidDate(\"31-nov-\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Invalid dates"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"2\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"32 nov\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"32 nov 19990\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"32-nov\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"32-nov-19990\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"nov 32\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"nov-32\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"2/2/79\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"2/25/1995\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"31/2/2019\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"31-2-2019\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"Fri, 21 Nov 1997\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"11am\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"midnight\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"lol\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(DateUtil.isValidDate(\"30/11/202020220202\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void formatDate_correctResult() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(\"25/12/2019\", DateUtil.formatDate(LocalDate.of(2019, Month.DECEMBER, 25)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void prettyFormatDate_correctResult() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(\"Wed 25/12/2019\", DateUtil.prettyFormatDate(\"25/12/2019\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(\"\", DateUtil.prettyFormatDate(\" \"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void twoDigitYearFormatDate_correctResult() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"25/12/19\", DateUtil.twoDigitYearFormatDate(\"25/12/2019\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"\", DateUtil.twoDigitYearFormatDate(\" \"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDates_validDates() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LocalDate date1 \u003d LocalDate.of(2019, Month.OCTOBER, 12);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LocalDate date2 \u003d LocalDate.of(2019, Month.OCTOBER, 13);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cLocalDate\u003e dates \u003d DateUtil.parseDates(\"12/10 - 13/10\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertNotNull(dates);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(2, dates.size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(date1, dates.get(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(date2, dates.get(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDates_invalidDates() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cLocalDate\u003e dates \u003d DateUtil.parseDates(\"no\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertNull(dates);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 6,
      "Nanosync": 107
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/util/MoneyUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "class MoneyUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void format_validInput_returnsTrue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(MoneyUtil.format(1000000.00).equals(\"1M\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(MoneyUtil.format(1000000000.00).equals(\"1B\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(MoneyUtil.format(1000000000000.00).equals(\"1T\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(MoneyUtil.format(1000.00).equals(\"1k\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(MoneyUtil.format(999.00).equals(\"999.00\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void format_invalidInput_returnsFalse() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertFalse(MoneyUtil.format(1000).equals(\"1000\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertFalse(MoneyUtil.format(10000).equals(\"10000\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 24
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.COST_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.APPLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BANANA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.DESSERT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.JsonSpendingBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonSpendingBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new JsonSpendingBookStorage(temporaryFolder.resolve(\"moneygowhere.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonSpendingBookStorage spendingBookStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new JsonSpendingBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        StorageManager storage \u003d new StorageManager(spendingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DATE_DESC_AMY + REMARK_DESC_AMY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                + COST_DESC_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending expectedSpending \u003d new SpendingBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.addSpending(expectedSpending);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getFilteredSpendingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredSpendingList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getPrevCommand_emptyStorage_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", logic.getPrevCommand());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getPrevCommand_withInput_success() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        logic.execute(listCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(listCommand, logic.getPrevCommand());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getNextCommand_emptyStorage_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", logic.getPrevCommand());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getNextCommand_withInput_success() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        logic.execute(listCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", logic.getNextCommand());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        logic.getPrevCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        logic.getPrevCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(listCommand, logic.getNextCommand());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getStatsData_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.addSpending(APPLE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.addSpending(BANANA);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.addSpending(DESSERT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date startDate \u003d APPLE.getDate();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date endDate \u003d DESSERT.getDate();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Predicate\u003cSpending\u003e expectedPredicate \u003d s-\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return s.getDate().value.compareTo(startDate.value) \u003e\u003d 0"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                \u0026\u0026 s.getDate().value.compareTo(endDate.value) \u003c\u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        };"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        LinkedHashMap\u003cString, Double\u003e statsData \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        statsData.put(APPLE.getTags().iterator().next().tagName, Double.parseDouble(APPLE.getCost().toString())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            + Double.parseDouble(BANANA.getCost().toString()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        statsData.put(DESSERT.getTags().iterator().next().tagName, Double.parseDouble(DESSERT.getCost().toString()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.updateFilteredSpendingList(expectedPredicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(statsData, logic.getStatsData());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getGraphData_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.addSpending(APPLE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.addSpending(APPLE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.addSpending(BANANA);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date startDate \u003d APPLE.getDate();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date endDate \u003d BANANA.getDate();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Predicate\u003cSpending\u003e expectedPredicate \u003d s-\u003e {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return s.getDate().value.compareTo(startDate.value) \u003e\u003d 0"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                \u0026\u0026 s.getDate().value.compareTo(endDate.value) \u003c\u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        };"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        LinkedHashMap\u003cString, Double\u003e graphData \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        graphData.put(APPLE.getDate().value, 2 * Double.parseDouble(APPLE.getCost().toString()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        graphData.put(BANANA.getDate().value, Double.parseDouble(BANANA.getCost().toString()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.updateFilteredSpendingList(expectedPredicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(graphData, logic.getGraphData());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static class JsonSpendingBookIoExceptionThrowingStub extends JsonSpendingBookStorage {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        private JsonSpendingBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public void saveSpendingBook(ReadOnlySpendingBook spendingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 7,
      "Nanosync": 31,
      "choongyx": 46,
      "-": 122,
      "austinsantoso": 32
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_newSpending_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending validSpending \u003d new SpendingBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.addSpending(validSpending);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandSuccess(new AddCommand(validSpending), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String.format(AddCommand.NO_DUPLICATE_MESSAGE_SUCCESS, validSpending), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_newSpendingWithChangedCurrency_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Spending validSpending \u003d new SpendingBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency usdCurrency \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Currency currency : model.getSpendingBook().getCurrencies()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (currency.name.equalsIgnoreCase(\"USD\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                usdCurrency \u003d currency;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertNotNull(usdCurrency);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        double updatedCost \u003d Double.parseDouble(validSpending.getCost().value) / usdCurrency.rate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Spending convertedSpending \u003d new SpendingBuilder().withCost(String.format(\"%.2f\", updatedCost)).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.setCurrencyInUse(usdCurrency);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.addSpending(convertedSpending);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.setCurrencyInUse(usdCurrency);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(new AddCommand(validSpending), model,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String.format(AddCommand.NO_DUPLICATE_MESSAGE_SUCCESS, convertedSpending), expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 2,
      "Nanosync": 38,
      "-": 22,
      "austinsantoso": 4
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void constructor_nullSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_spendingAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ModelStubAcceptingSpendingAdded modelStub \u003d new ModelStubAcceptingSpendingAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending validSpending \u003d new SpendingBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validSpending).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(String.format(AddCommand.NO_DUPLICATE_MESSAGE_SUCCESS, validSpending),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(Arrays.asList(validSpending), modelStub.spendingsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending alice \u003d new SpendingBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending bob \u003d new SpendingBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // different Spending -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public Path getSpendingBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void setSpendingBookFilePath(Path spendingBookFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void addSpending(Spending spending) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        public void addSpending(List\u003cSpending\u003e spending) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void setSpendingBook(ReadOnlySpendingBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ReadOnlySpendingBook getSpendingBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public boolean hasSpending(Spending spending) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void deleteSpending(Spending target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void setSpending(Spending target, Spending editedSpending) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public ObservableList\u003cSpending\u003e getFilteredSpendingList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void updateFilteredSpendingList(Predicate\u003cSpending\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public void updateSortedSpendingList(Comparator\u003cSpending\u003e comparator) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public Budget getBudget() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void setBudgetAmount(Budget budget) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void clearBudgetSum() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ObservableList\u003cReminder\u003e getSortedReminderList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public Currency getCurrencyInUse() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public ObservableList\u003cCurrency\u003e getCurrencies() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public void setCurrencyInUse(Currency currency) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        public ObservableList\u003cSpending\u003e getStatsList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        public void updateStatsPredicate(Predicate\u003cSpending\u003e statsPredicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * A Model stub that contains a single Spending."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private class ModelStubWithSpending extends ModelStub {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        private final Spending spending;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ModelStubWithSpending(Spending spending) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            requireNonNull(spending);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            this.spending \u003d spending;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public boolean hasSpending(Spending spending) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            requireNonNull(spending);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return this.spending.isSameSpending(spending);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * A Model stub that always accept the Spending being added."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Since a currency can be changed, it is also included in the stub."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private class ModelStubAcceptingSpendingAdded extends ModelStub {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        final ArrayList\u003cSpending\u003e spendingsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public boolean hasSpending(Spending spending) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            requireNonNull(spending);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return spendingsAdded.stream().anyMatch(spending::isSameSpending);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void addSpending(Spending spending) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            requireNonNull(spending);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            spendingsAdded.add(spending);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public Currency getCurrencyInUse() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return getSpendingBook().getCurrencyInUse();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ReadOnlySpendingBook getSpendingBook() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new SpendingBook();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 38,
      "jonathantjendana": 6,
      "Nanosync": 29,
      "choongyx": 9,
      "-": 134,
      "austinsantoso": 53
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/BudgetCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class BudgetCommandIntegrationTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_setNewBudget_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget budget \u003d new Budget(10000);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.setBudget(budget);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d BudgetCommand.MESSAGE_SUCCESS + model.getCurrencyInUse().symbol + budget.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandSuccess(new BudgetCommand(budget), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_setNewBudgetWithChangedCurrency_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget budget \u003d new Budget(10000);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.setBudget(budget);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Currency usdCurrency \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        for (Currency currency : model.getSpendingBook().getCurrencies()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            if (currency.name.equalsIgnoreCase(\"USD\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                usdCurrency \u003d currency;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertNotNull(usdCurrency);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        double updatedAmount \u003d budget.getAmount() / usdCurrency.rate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget newBudget \u003d new Budget(updatedAmount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.setCurrencyInUse(usdCurrency);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.setBudget(newBudget);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.setCurrencyInUse(usdCurrency);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d BudgetCommand.MESSAGE_SUCCESS + model.getCurrencyInUse().symbol + budget.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandSuccess(new BudgetCommand(budget), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 65
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/BudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class BudgetCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_setNewBudget_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget budget \u003d new Budget(10000);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetCommand budgetCommand \u003d new BudgetCommand(budget);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.setBudget(budget);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d BudgetCommand.MESSAGE_SUCCESS + model.getCurrencyInUse().symbol + budget.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            CommandResult result \u003d budgetCommand.execute(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(new CommandResult(expectedMessage), result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(expectedModel.getBudget().getAmount(), model.getBudget().getAmount());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_invalidBudgetAmount_fail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget budget \u003d new Budget(1000000001);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetCommand budgetCommand \u003d new BudgetCommand(budget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_BUDGET_AMOUNT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandFailure(budgetCommand, model , expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 10,
      "austinsantoso": 39
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.setSpendingBook(new SpendingBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 10,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(new CommandResult(\"feedback\", false, false, true).isExit(), true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void isShowGraph() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(new CommandResult(\"feedback\", true, false, false).isShowGraph(), true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void isShowStats() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(new CommandResult(\"feedback\", false, true, false).isShowStats(), true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "choongyx": 18,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand.EditSpendingDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.EditSpendingDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String VALID_DATE \u003d \"25/12/2019\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"01/01/2019\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"02/01/2019\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Likes to watch movies\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Loves to play soccer\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String VALID_COST_AMY \u003d \"312\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String VALID_COST_BOB \u003d \"123\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String VALID_REMINDER_MESSAGE \u003d \"Pay Bill\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String VALID_REMINDER_COMMAND_WORD_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String VALID_REMINDER_COMMAND_WORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String INVALID_REMINDER_COMMAND_WORD \u003d \"bla bla\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String DATE_DESC_VALID \u003d \" \" + PREFIX_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String COST_DESC_AMY \u003d \" \" + PREFIX_COST + VALID_COST_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String COST_DESC_BOB \u003d \" \" + PREFIX_COST + VALID_COST_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String REMINDER_MESSAGE_DESC_VALID \u003d \" \" + PREFIX_MESSAGE + VALID_REMINDER_MESSAGE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String COMMAND_WORD_DESC_ADD \u003d \" \" + VALID_REMINDER_COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String COMMAND_WORD_DESC_DELETE \u003d \" \" + VALID_REMINDER_COMMAND_WORD_DELETE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \" \"; // blank date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String INVALID_COST_DESC \u003d \" \" + PREFIX_COST; // empty string not allowed for cost"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String INVALID_COMMAND_WORD_DESC \u003d \" \" + INVALID_REMINDER_COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final EditSpendingDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final EditSpendingDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        DESC_AMY \u003d new EditSpendingDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .withDate(VALID_DATE_AMY).withRemark(VALID_REMARK_AMY).withCost(VALID_COST_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        DESC_BOB \u003d new EditSpendingDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .withDate(VALID_DATE_BOB).withRemark(VALID_REMARK_BOB).withCost(VALID_COST_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * - the MoneyGoWhere list, filtered Spending list and selected Spending in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        SpendingBook expectedAddressBook \u003d new SpendingBook(actualModel.getSpendingBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        List\u003cSpending\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredSpendingList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getSpendingBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredSpendingList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the Spending at the given {@code targetIndex}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * in the {@code model}\u0027s MoneyGoWhere list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static void showSpendingAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredSpendingList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spending \u003d model.getFilteredSpendingList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        final String[] splitName \u003d spending.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.updateFilteredSpendingList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(1, model.getFilteredSpendingList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getGraphData() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Command command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(command.getGraphData(model), null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getStatsData() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Command command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(command.getStatsData(model), null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getStatsMessage() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Command command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(command.getStatsMessage(model), null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 30,
      "jonathantjendana": 8,
      "Nanosync": 5,
      "choongyx": 30,
      "-": 81,
      "austinsantoso": 12
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/CurrencyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class CurrencyCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_emptyArg() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CurrencyCommand currencyCommand \u003d new CurrencyCommand(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d \"The current currency in use is: SGD\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(currencyCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_currencyChange_alreadyChanged() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CurrencyCommand currencyCommand \u003d new CurrencyCommand(\"SGD\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d String.format(CurrencyCommand.MESSAGE_CURRENCY_ALREADY_CHANGED, \"SGD\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(currencyCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_currencyChange_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CurrencyCommand currencyCommand \u003d new CurrencyCommand(\"MYR\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d String.format(CurrencyCommand.MESSAGE_CURRENCY_CHANGE_SUCCESS, \"MYR\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency newCurrency \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Currency currency : expectedModel.getCurrencies()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (currency.name.equalsIgnoreCase(\"MYR\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                newCurrency \u003d currency;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertNotNull(newCurrency);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.setCurrencyInUse(newCurrency);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(currencyCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_currencyChange_invalidCurrency() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CurrencyCommand currencyCommand \u003d new CurrencyCommand(\"LOL\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d CurrencyCommand.MESSAGE_CURRENCY_NONEXISTENT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandFailure(currencyCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CurrencyCommand currencyCommand \u003d new CurrencyCommand(\"SGD\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(currencyCommand.equals(currencyCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(currencyCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ignore case"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(currencyCommand.equals(new CurrencyCommand(\"sgd\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 87
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.showSpendingAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_SECOND_SPENDING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spendingToDelete \u003d model.getFilteredSpendingList().get(INDEX_FIRST_SPENDING.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SPENDING_SUCCESS, spendingToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.deleteSpending(spendingToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSpendingList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        showSpendingAtIndex(model, INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spendingToDelete \u003d model.getFilteredSpendingList().get(INDEX_FIRST_SPENDING.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SPENDING_SUCCESS, spendingToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.deleteSpending(spendingToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        showNoSpending(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        showSpendingAtIndex(model, INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SPENDING;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of MoneyGoWhere list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSpendingBook().getSpendingList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_SPENDING);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // different Spending -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private void showNoSpending(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        model.updateFilteredSpendingList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(model.getFilteredSpendingList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 18,
      "-": 69,
      "austinsantoso": 24
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.showSpendingAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_SECOND_SPENDING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand.EditSpendingDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.EditSpendingDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending editedSpending \u003d new SpendingBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder(editedSpending).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SPENDING, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SPENDING_SUCCESS, editedSpending);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SpendingBook(model.getSpendingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.setSpending(model.getFilteredSpendingList().get(0), editedSpending);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index indexLastSpending \u003d Index.fromOneBased(model.getFilteredSpendingList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending lastSpending \u003d model.getFilteredSpendingList().get(indexLastSpending.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        SpendingBuilder spendingInList \u003d new SpendingBuilder(lastSpending);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Spending editedSpending \u003d spendingInList.withName(VALID_NAME_BOB).withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastSpending, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SPENDING_SUCCESS, editedSpending);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SpendingBook(model.getSpendingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.setSpending(lastSpending, editedSpending);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SPENDING, new EditSpendingDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending editedSpending \u003d model.getFilteredSpendingList().get(INDEX_FIRST_SPENDING.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SPENDING_SUCCESS, editedSpending);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SpendingBook(model.getSpendingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        showSpendingAtIndex(model, INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spendingInFilteredList \u003d model.getFilteredSpendingList().get(INDEX_FIRST_SPENDING.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending editedSpending \u003d new SpendingBuilder(spendingInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SPENDING,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                new EditSpendingDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SPENDING_SUCCESS, editedSpending);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SpendingBook(model.getSpendingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.setSpending(model.getFilteredSpendingList().get(0), editedSpending);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_invalidSpendingIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSpendingList().size() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * but smaller than size of the MoneyGoWhere list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_invalidSpendingIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        showSpendingAtIndex(model, INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SPENDING;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the MoneyGoWhere list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSpendingBook().getSpendingList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                new EditSpendingDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_SPENDING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_editedSpendingWithDifferentCurrency_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Spending editedSpending \u003d new SpendingBuilder().withCost(\"1.00\").build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder(editedSpending).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SPENDING, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency usdCurrency \u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Currency currency : model.getSpendingBook().getCurrencies()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (currency.name.equalsIgnoreCase(\"USD\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                usdCurrency \u003d currency;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertNotNull(usdCurrency);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.setCurrencyInUse(usdCurrency);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        double updatedCost \u003d Double.parseDouble(editedSpending.getCost().value) / usdCurrency.rate;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Spending convertedSpending \u003d new SpendingBuilder().withCost(String.format(\"%.2f\", updatedCost)).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SPENDING_SUCCESS, convertedSpending);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SpendingBook(model.getSpendingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.setSpending(model.getFilteredSpendingList().get(0), convertedSpending);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_SPENDING, DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor copyDescriptor \u003d new EditSpendingDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_SPENDING, copyDescriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_SPENDING, DESC_AMY)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_SPENDING, DESC_BOB)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 62,
      "-": 84,
      "austinsantoso": 36
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/EditSpendingDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand.EditSpendingDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.EditSpendingDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class EditSpendingDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor descriptorWithSameValues \u003d new EditSpendingDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor editedAmy \u003d new EditSpendingDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        editedAmy \u003d new EditSpendingDescriptorBuilder(DESC_AMY).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        editedAmy \u003d new EditSpendingDescriptorBuilder(DESC_AMY).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // different cost -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        editedAmy \u003d new EditSpendingDescriptorBuilder(DESC_AMY).withCost(VALID_COST_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        editedAmy \u003d new EditSpendingDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 2,
      "Nanosync": 12,
      "choongyx": 2,
      "-": 38,
      "austinsantoso": 4
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/ExchangeRateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class ExchangeRateCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_exchangeRateNoArgs_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sb.append(\"Current exchange rates: \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Currency currency : model.getSpendingBook().getCurrencies()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            sb.append(currency);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            sb.append(\", \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String trimmedResult \u003d sb.substring(0, sb.lastIndexOf(\",\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(trimmedResult);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(new ExchangeRateCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_exchangeRateWithArgs_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency usdCurrency \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        for (Currency currency : model.getSpendingBook().getCurrencies()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            if (currency.name.equalsIgnoreCase(\"USD\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                usdCurrency \u003d currency;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertNotNull(usdCurrency);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        double amount \u003d 5.00;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String output \u003d String.format(\"According to our exchange rate, %s%.2f %s \u003d $%.2f SGD\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                usdCurrency.symbol, amount, usdCurrency.name, amount / usdCurrency.rate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(output);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(new ExchangeRateCommand(amount, usdCurrency.name), model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_exchangeRate_fail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandFailure(new ExchangeRateCommand(1.0, \"LOL\"), model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                ExchangeRateCommand.MESSAGE_INVALID_CURRENCY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 58
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "choongyx": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/ExportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.storage.JsonSpendingBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        JsonSpendingBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new JsonSpendingBookStorage(temporaryFolder.resolve(\"moneygowhere.json\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        model.setSpendingBookFilePath(temporaryFolder.resolve(\"moneygowhere.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void execute_allDataIsImported_showUpdatedMessage() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        CommandResult result \u003d logic.execute(\"export \" + PREFIX_PATH + temporaryFolder.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        File file \u003d new File(temporaryFolder + \"/moneygowhere.csv\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(String.format(ExportCommand.MESSAGE_SUCCESS, file.getAbsolutePath()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                result.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 53
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_SPENDING_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.CATFOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.ENCYCLOPEDIA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.FLIGHTTICKET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SpendingComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(findFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different predicate list -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e secondPredicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        secondPredicateList.add(secondPredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicateList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_emptyPredicate_noSpendingFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SPENDING_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.updateFilteredSpendingList(failed -\u003e false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredSpendingList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_zeroKeywords_noSpendingFound() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SPENDING_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.updateFilteredSpendingList(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredSpendingList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_multipleKeywords_multipleSpendingsFound() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SPENDING_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"flight encyclopedia cat\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        expectedModel.updateFilteredSpendingList(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cSpending\u003e expectedList \u003d Arrays.asList(CATFOOD, ENCYCLOPEDIA, FLIGHTTICKET);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedList.sort(new SpendingComparator());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedList, model.getFilteredSpendingList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 4,
      "Nanosync": 50,
      "choongyx": 5,
      "-": 53,
      "austinsantoso": 5
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/GraphCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.model.Model.PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.GLASSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "public class GraphCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void execute_graphMessage_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(\"Graph for all dates\\n\", true, false, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertCommandSuccess(new GraphCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void execute_graphMessageValidDateRange_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            String.format(\"Graph for spending between %s and %s\\n\", APPLE.getDate(), GLASSES.getDate()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertCommandSuccess(new GraphCommand(APPLE.getDate(), GLASSES.getDate()), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getGraphPredicate_noDateRange_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Predicate\u003cSpending\u003e expectedPredicate \u003d PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(expectedPredicate, new GraphCommand().getGraphPredicate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getGraphPredicate_validDateRange_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date startDate \u003d APPLE.getDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date endDate \u003d BANANA.getDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Predicate\u003cSpending\u003e expectedPredicate \u003d s-\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return s.getDate().value.compareTo(startDate.value) \u003e\u003d 0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                \u0026\u0026 s.getDate().value.compareTo(endDate.value) \u003c\u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.updateFilteredSpendingList(new GraphCommand(APPLE.getDate(), BANANA.getDate()).getGraphPredicate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        expectedModel.updateFilteredSpendingList(expectedPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(model.getFilteredSpendingList(), expectedModel.getFilteredSpendingList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choongyx": 58
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "choongyx": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/ImportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FilePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ImportCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"SampleSpendings\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void execute_allDataIsImported_showUpdatedMessage() throws DataConversionException, CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FilePath path \u003d new FilePath(read(\"validSpending.csv\").toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        CommandResult commandResult \u003d new ImportCommand(path).execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(String.format(ImportCommand.MESSAGE_SUCCESS, 3), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void execute_invalidDate_showMessage() throws DataConversionException, CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FilePath path \u003d new FilePath(read(\"invalidDateSpending.csv\").toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        CommandResult commandResult \u003d new ImportCommand(path).execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(String.format(ImportCommand.MESSAGE_SUCCESS_WITH_ERRORS, 1,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                String.format(ImportCommand.MESSAGE_ERROR_ROW, 1, Date.MESSAGE_CONSTRAINTS)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void execute_invalidName_throwCommandException() throws DataConversionException, CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FilePath path \u003d new FilePath(read(\"invalidNameSpending.csv\").toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        CommandResult commandResult \u003d new ImportCommand(path).execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(String.format(ImportCommand.MESSAGE_SUCCESS_WITH_ERRORS, 1,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                String.format(ImportCommand.MESSAGE_ERROR_ROW, 1, Name.MESSAGE_CONSTRAINTS)),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void execute_invalidPath_throwCommandException() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FilePath path \u003d new FilePath(read(\"nonexistent.csv\").toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ImportCommand(path).execute(model));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void execute_invalidCsvHeaders_throwCommandException() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FilePath path \u003d new FilePath(read(\"invalidHeaders.csv\").toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ImportCommand(path).execute(model),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ImportCommand.MESSAGE_INVALID_CSV);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void execute_invalidHeaderSize_throwCommandException() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FilePath path \u003d new FilePath(read(\"invalidHeadersSize.csv\").toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ImportCommand(path).execute(model),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ImportCommand.MESSAGE_INVALID_CSV);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void execute_noContent_throwCommandException() throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        FilePath path \u003d new FilePath(read(\"noContent.csv\").toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ImportCommand(path).execute(model),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ImportCommand.MESSAGE_NO_CONTENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Path read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return configFilePath;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 93,
      "Nanosync": 7
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.showSpendingAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        showSpendingAtIndex(model, INDEX_FIRST_SPENDING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 10,
      "-": 28,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/ShowBudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class ShowBudgetCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute_displayBudget_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ShowBudgetCommand showBudgetCommand \u003d new ShowBudgetCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d showBudgetCommand.MESSAGE_SUCCESS + model.getBudget().getBudgetMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SpendingBook(model.getSpendingBook()), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertCommandSuccess(showBudgetCommand, model , expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 9,
      "austinsantoso": 17
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortAttribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortOrder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SpendingComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SortUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class SortCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(SortUtil.getDefaultSortFieldSet());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SortCommand commandWithSameValues \u003d new SortCommand(SortUtil.getDefaultSortFieldSet());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(sortCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(sortCommand.equals(sortCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(sortCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(sortCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different value -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(sortCommand.equals(new SortCommand(new LinkedHashSet\u003c\u003e())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_defaultFieldsSortedList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortUtil.getDefaultSortFieldSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(command, model, SortCommand.MESSAGE_SUCCESS + \"\\n\" + spendingComparator, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_oneFieldSortedList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortField\u003e fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.DATE, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SortCommand command \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator(fields);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.updateSortedSpendingList(spendingComparator);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(command, model, SortCommand.MESSAGE_SUCCESS + \"\\n\" + spendingComparator, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedModel.getFilteredSpendingList(), model.getFilteredSpendingList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void execute_differentFieldsSortedList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortField\u003e fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.NAME, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.DATE, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.COST, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.REMARK, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Spending apple \u003d new SpendingBuilder().withName(\"Apple2\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        model.addSpending(apple);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.addSpending(apple);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SortCommand command \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator(fields);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedModel.updateSortedSpendingList(spendingComparator);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertCommandSuccess(command, model, SortCommand.MESSAGE_SUCCESS + \"\\n\" + spendingComparator, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedModel.getFilteredSpendingList(), model.getFilteredSpendingList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 96
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/StatsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.model.Model.PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.GLASSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for StatsCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "class StatsCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    //Testing logic of calculating totalCost, budget and budgetRemaining"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    //Testing whether list has been filtered correctly (no date parameters specified)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void execute_statsMessage_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(\"Statistics for all dates\\n\", false, true, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertCommandSuccess(new StatsCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void execute_statsMessageValidDateRange_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            String.format(\"Statistics for spending between %s and %s\\n\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            APPLE.getDate(), GLASSES.getDate()), false, true, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertCommandSuccess(new StatsCommand(APPLE.getDate(), GLASSES.getDate()), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getStatsPredicate_noDateRange_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Predicate\u003cSpending\u003e expectedPredicate \u003d PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(expectedPredicate, new StatsCommand().getStatsPredicate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void getStatsPredicate_validDateRange_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date startDate \u003d APPLE.getDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date endDate \u003d BANANA.getDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Predicate\u003cSpending\u003e expectedPredicate \u003d s-\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            return s.getDate().value.compareTo(startDate.value) \u003e\u003d 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                \u0026\u0026 s.getDate().value.compareTo(endDate.value) \u003c\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        model.updateFilteredSpendingList(new StatsCommand(APPLE.getDate(), BANANA.getDate()).getStatsPredicate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        expectedModel.updateFilteredSpendingList(expectedPredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(model.getFilteredSpendingList(), expectedModel.getFilteredSpendingList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 7,
      "choongyx": 59
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/reminder/AddReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class AddReminderCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void constructor_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddReminderCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void execute_spendingAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ModelStubAcceptingReminderAdded modelStub \u003d new ModelStubAcceptingReminderAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        CommandResult commandResult \u003d new AddReminderCommand(validReminder).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(String.format(AddReminderCommand.MESSAGE_SUCCESS, validReminder),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(Arrays.asList(validReminder), modelStub.remindersAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder schoolFee \u003d new ReminderBuilder().withRemark(\"Pay School fee\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder phoneBill \u003d new ReminderBuilder().withRemark(\"Pay Phone bill\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        AddReminderCommand addSchoolFeeReminderCommand \u003d new AddReminderCommand(schoolFee);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        AddReminderCommand addPhoneBillReminderCommand \u003d new AddReminderCommand(phoneBill);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(addSchoolFeeReminderCommand.equals(addSchoolFeeReminderCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        AddReminderCommand addSchoolFeeReminderCommandCopy \u003d new AddReminderCommand(schoolFee);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(addSchoolFeeReminderCommand.equals(addSchoolFeeReminderCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(addSchoolFeeReminderCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(addSchoolFeeReminderCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // different Spending -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(addSchoolFeeReminderCommand.equals(addPhoneBillReminderCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public Path getSpendingBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void setSpendingBookFilePath(Path spendingBookFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void addSpending(Spending spending) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        public void addSpending(List\u003cSpending\u003e spending) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void setSpendingBook(ReadOnlySpendingBook newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ReadOnlySpendingBook getSpendingBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public boolean hasSpending(Spending spending) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void deleteSpending(Spending target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void setSpending(Spending target, Spending editedSpending) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ObservableList\u003cSpending\u003e getFilteredSpendingList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void updateFilteredSpendingList(Predicate\u003cSpending\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void updateSortedSpendingList(Comparator\u003cSpending\u003e comparator) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public Budget getBudget() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void setBudgetAmount(Budget budget) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public void clearBudgetSum() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ObservableList\u003cReminder\u003e getSortedReminderList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public Currency getCurrencyInUse() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public ObservableList\u003cCurrency\u003e getCurrencies() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public void setCurrencyInUse(Currency currency) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        public ObservableList\u003cSpending\u003e getStatsList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        public void updateStatsPredicate(Predicate\u003cSpending\u003e statsPredicate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * A Model stub that contains a single Spending."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private class ModelStubWithReminder extends ModelStub {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        private final Reminder reminder;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ModelStubWithReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return this.reminder.isSameReminder(reminder);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * A Model stub that always accept the Spending being added."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private class ModelStubAcceptingReminderAdded extends ModelStub {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        private final List\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return remindersAdded.stream().anyMatch(reminder::isSameReminder);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            remindersAdded.add(reminder);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ReadOnlySpendingBook getSpendingBook() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new SpendingBook();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 223,
      "jonathantjendana": 5,
      "Nanosync": 17,
      "choongyx": 10,
      "austinsantoso": 10
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/commands/reminder/DeleteReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_SECOND_REMINDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DeleteReminderCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void execute_validIndexList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder reminderToDelete \u003d model.getSortedReminderList().get(INDEX_FIRST_REMINDER.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DeleteReminderCommand deleteReminderCommand \u003d new DeleteReminderCommand(INDEX_FIRST_REMINDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteReminderCommand.MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSpendingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        expectedModel.deleteReminder(reminderToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertCommandSuccess(deleteReminderCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void execute_invalidIndexList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedReminderList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DeleteReminderCommand deleteReminderCommand \u003d new DeleteReminderCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertCommandFailure(deleteReminderCommand, model, Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DeleteReminderCommand deleteReminderFirstCommand \u003d new DeleteReminderCommand(INDEX_FIRST_REMINDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DeleteReminderCommand deleteReminderSecondCommand \u003d new DeleteReminderCommand(INDEX_SECOND_REMINDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(deleteReminderFirstCommand.equals(deleteReminderFirstCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DeleteReminderCommand deleteReminderFirstCommandCopy \u003d new DeleteReminderCommand(INDEX_FIRST_REMINDER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(deleteReminderFirstCommand.equals(deleteReminderFirstCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(deleteReminderFirstCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(deleteReminderFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // different Spending -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(deleteReminderFirstCommand.equals(deleteReminderSecondCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 72
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.COST_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.COST_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_COST_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending expectedSpending \u003d new SpendingBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedSpending));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedSpending));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DATE_DESC_AMY + DATE_DESC_BOB + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedSpending));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_AMY + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedSpending));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // multiple cost - last cost accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_BOB + COST_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedSpending));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending expectedSpendingMultipleTags \u003d new SpendingBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedSpendingMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Spending expectedSpendingNoTag \u003d new SpendingBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DATE_DESC_AMY + REMARK_DESC_AMY + COST_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new AddCommand(expectedSpendingNoTag));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // missing remark"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Spending expectedSpendingNoRemark \u003d new SpendingBuilder(AMY).withRemark(\"\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DATE_DESC_AMY + COST_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new AddCommand(expectedSpendingNoRemark));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + DATE_DESC_BOB + REMARK_DESC_BOB + COST_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_DATE_BOB + REMARK_DESC_BOB + COST_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // missing cost prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_BOB + VALID_COST_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_DATE_BOB + VALID_REMARK_BOB + VALID_COST_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DATE_DESC_BOB + REMARK_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_DATE_DESC + REMARK_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // invalid cost"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_BOB + INVALID_COST_DESC"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DATE_DESC_BOB + REMARK_DESC_BOB + INVALID_COST_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // date too far"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + \" \" + PREFIX_DATE + \"28/10/2100\" + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                + COST_DESC_BOB, ParserUtil.DATE_INVALID_TOO_FAR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + DATE_DESC_BOB + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                        + COST_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 25,
      "Nanosync": 41,
      "choongyx": 13,
      "-": 60,
      "austinsantoso": 3
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/AddReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_VALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.REMINDER_MESSAGE_DESC_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMINDER_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BILL_REMINDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class AddReminderCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private AddReminderCommandParser parser \u003d new AddReminderCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder expectedReminder \u003d new ReminderBuilder(BILL_REMINDER).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DATE_DESC_VALID + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new AddReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC_AMY + DATE_DESC_VALID + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new AddReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, VALID_DATE + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // missing message prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_VALID + VALID_REMINDER_MESSAGE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, VALID_DATE + VALID_REMINDER_MESSAGE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC + REMINDER_MESSAGE_DESC_VALID, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DATE_DESC_VALID"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 67
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/BudgetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_BUDGET_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class BudgetCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private BudgetCommandParser parser \u003d new BudgetCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void parse_validArgs_returnBudgetCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget validBudget \u003d new Budget(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseSuccess(parser, \"0\", new BudgetCommand(validBudget));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget validBudget2 \u003d new Budget(12);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseSuccess(parser, \"12\", new BudgetCommand(validBudget2));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget validBudget3 \u003d new Budget(0.1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseSuccess(parser, \"0.1\", new BudgetCommand(validBudget3));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget validBudget4 \u003d new Budget(1000000000);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseSuccess(parser, \"1000000000\", new BudgetCommand(validBudget4));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_BUDGET_AMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseFailure(parser, \"-1.23\", MESSAGE_INVALID_BUDGET_AMOUNT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_BUDGET_AMOUNT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseFailure(parser, \"abcdef\", MESSAGE_INVALID_BUDGET_AMOUNT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 5,
      "austinsantoso": 30
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/CurrencyCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CurrencyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class CurrencyCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private CurrencyCommandParser parser \u003d new CurrencyCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_validInput_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" sgd\", new CurrencyCommand(\"SGD\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" SGD\", new CurrencyCommand(\"SGD\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \"\", new CurrencyCommand(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \", new CurrencyCommand(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_invalidInput_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" SGDEE\", Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 29
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_SPENDING));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "-": 25,
      "austinsantoso": 1
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/DeleteReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * outside of the DeleteReminderCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * same path through the DeleteReminderCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DeleteReminderCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private DeleteReminderCommandParser parser \u003d new DeleteReminderCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parse_validArgs_returnsDeleteReminderCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteReminderCommand(INDEX_FIRST_REMINDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                DeleteReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 33
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.COST_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.COST_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_COST_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_SECOND_SPENDING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_THIRD_SPENDING;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand.EditSpendingDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.EditSpendingDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, EditCommand.MESSAGE_INVALID_SPENDING_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, EditCommand.MESSAGE_INVALID_SPENDING_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, EditCommand.MESSAGE_INVALID_SPENDING_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", EditCommand.MESSAGE_INVALID_SPENDING_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", EditCommand.MESSAGE_INVALID_SPENDING_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COST_DESC, Cost.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // date too far"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" \" + PREFIX_DATE + \"28/10/2100\", ParserUtil.DATE_INVALID_TOO_FAR);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // invalid date followed by valid remark"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC + REMARK_DESC_AMY, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // valid date followed by invalid date. The test case for invalid date followed by valid date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_BOB + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_REMARK_AMY + VALID_COST_AMY + VALID_DATE_AMY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_SPENDING;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                + REMARK_DESC_AMY + COST_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .withDate(VALID_DATE_BOB).withRemark(VALID_REMARK_AMY).withCost(VALID_COST_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_BOB + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder().withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_SPENDING;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        descriptor \u003d new EditSpendingDescriptorBuilder().withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // remark"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        descriptor \u003d new EditSpendingDescriptorBuilder().withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COST_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        descriptor \u003d new EditSpendingDescriptorBuilder().withCost(VALID_COST_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        descriptor \u003d new EditSpendingDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY + REMARK_DESC_AMY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                + TAG_DESC_FRIEND + DATE_DESC_AMY + REMARK_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                + DATE_DESC_BOB + COST_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder().withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .withRemark(VALID_REMARK_BOB).withCost(VALID_COST_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DATE_DESC + DATE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder().withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMARK_DESC_BOB + INVALID_DATE_DESC + COST_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                + DATE_DESC_BOB;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        descriptor \u003d new EditSpendingDescriptorBuilder().withDate(VALID_DATE_BOB).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                .withCost(VALID_COST_BOB).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_SPENDING;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 18,
      "Nanosync": 59,
      "choongyx": 4,
      "-": 123,
      "austinsantoso": 10
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/ExchangeRateCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExchangeRateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class ExchangeRateCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private ExchangeRateCommandParser parser \u003d new ExchangeRateCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_emptyArg_returnsExchangeRateCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \"     \", new ExchangeRateCommand());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_validArgs_returnsExchangeRateCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \"\", new ExchangeRateCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" 5 USD\", new ExchangeRateCommand(5, \"USD\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" 5 MYEEE\", Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" -1\", ExchangeRateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" -1 USD\", ExchangeRateCommand.MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + Double.MAX_VALUE + \" USD\", ExchangeRateCommand.MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" 1 SGD\", ExchangeRateCommand.MESSAGE_SAME_CURRENCY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 33
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/ExportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FolderPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\".\", \"src\", \"test\", \"data\", \"SampleSpendings\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_PATH + TEST_DATA_FOLDER.toString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new ExportCommand(new FolderPath(TEST_DATA_FOLDER.toString())));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_FORMAT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parse_invalidPath_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_PATH, FolderPath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_PATH + \"abc\", FolderPath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 39
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.FindCommand.MESSAGE_COST_RANGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.FindCommand.MESSAGE_DATE_RANGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.CostInRangePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.DateInRangePredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.RemarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.TagPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // two predicates to avoid \u0027\u003d\u003d\u0027 bug"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new DateInRangePredicate(new Date(\"01/01/2019\"), new Date(\"02/01/2019\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice Bob \" + PREFIX_DATE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                + \"d/01/01/2019 - 02/01/2019\", expectedFindCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Cost"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new CostInRangePredicate(new Cost(VALID_COST_BOB), new Cost(VALID_COST_AMY)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // c/COST1 c/COST2"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COST + VALID_COST_BOB + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                + PREFIX_COST + VALID_COST_AMY, expectedFindCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // c/COST1-COST2"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COST + VALID_COST_BOB + \"-\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                + VALID_COST_AMY, expectedFindCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // c/COST1 - COST2"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COST + VALID_COST_BOB + \" - \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                + VALID_COST_AMY, expectedFindCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Remark"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new RemarkContainsKeywordsPredicate(Arrays.asList(VALID_REMARK_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_REMARK + VALID_REMARK_AMY, expectedFindCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Tag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new TagPredicate(Set.of(VALID_TAG_FRIEND)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TAG + VALID_TAG_FRIEND, expectedFindCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_validDateRange_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Same day"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new DateInRangePredicate(new Date(\"25/12/2019\"), new Date(\"25/12/2019\")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE + \"25/12/2019\" + \" \" + PREFIX_DATE + \"25/12/2019\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Before"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new DateInRangePredicate(new Date(\"24/12/2019\"), new Date(\"25/12/2019\")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(predicates);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE + \"24/12/2019\" + \" \" + PREFIX_DATE + \"25/12/2019\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_invalidDateRange_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + \"26/12/2019\" + PREFIX_DATE + \"25/12/2019\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                MESSAGE_DATE_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // empty date"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // empty name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // empty remark"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_REMARK, Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // empty tag"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TAG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // one Date only"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + \"1/1/2019\", MESSAGE_DATE_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // one Cost only"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_COST + \"1.00\", MESSAGE_COST_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Cost max \u003e min"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_COST + \"2.00-1.00\", MESSAGE_COST_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 138,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/GraphCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choongyx"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "class GraphCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private GraphCommandParser parser \u003d new GraphCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_validInputs_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date date1 \u003d new Date(VALID_DATE_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date date2 \u003d new Date(VALID_DATE_BOB);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // 2 valid different dates"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC_AMY + DATE_DESC_BOB ,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            new GraphCommand(date1, date2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // 2 valid same dates"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC_AMY + DATE_DESC_AMY ,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            new GraphCommand(date1, date1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_noInputsProvided_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        //no dates provided"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        GraphCommand expectedCommand \u003d new GraphCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_invalidDates_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC , Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_BOB + INVALID_DATE_DESC , Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_invalidDateRange_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // start date is later than end date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_BOB + DATE_DESC_AMY ,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_INVALID_DATERANGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_moreThan2Parameters_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // more than 2 date parameters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_BOB + DATE_DESC_AMY + DATE_DESC_AMY ,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_INVALID_DATERANGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choongyx": 62
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/ImportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.path.FilePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\".\", \"src\", \"test\", \"data\", \"SampleSpendings\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \"invalidDateSpending.csv\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parse_validArgs_returnsImportCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_PATH + TEST_DATA_FOLDER.toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new ImportCommand(new FilePath(TEST_DATA_FOLDER.toString())));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_FORMAT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parse_invalidPath_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_PATH, FilePath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_PATH + \"abc\", FilePath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 40
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.ReminderMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static final String INVALID_COST \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final String VALID_DATE_1 \u003d \"21/1/2019\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final String VALID_DATE_2 \u003d \"23/1/2019\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static final String VALID_COST \u003d \"123\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final String VALID_REMARK \u003d \"Likes to watch movies\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final String VALID_REMINDER_MESSAGE \u003d \"Pay school fee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(INDEX_FIRST_SPENDING, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(INDEX_FIRST_SPENDING, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE_1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE_1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE_1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseDates_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDates(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseDates_collectionWithInvalidDates_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDates(Arrays.asList(VALID_DATE_1, INVALID_DATE)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseDates_emptyCollection_returnsEmptyList() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(ParserUtil.parseDates(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseDates_collectionWithValidDates_returnsDateSet() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        List\u003cDate\u003e actualDateList \u003d ParserUtil.parseDates(Arrays.asList(VALID_DATE_1, VALID_DATE_2));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cDate\u003e expectedDateList \u003d new ArrayList\u003c\u003e(Arrays.asList(new Date(VALID_DATE_1),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            new Date(VALID_DATE_2)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expectedDateList, actualDateList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseCost_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCost((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseCost_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCost(INVALID_COST));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseCost_validValueWithoutWhitespace_returnsCost() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Cost expectedCost \u003d new Cost(VALID_COST);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expectedCost, ParserUtil.parseCost(VALID_COST));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseCost_validValueWithWhitespace_returnsTrimmedCost() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String costWithWhitespace \u003d WHITESPACE + VALID_COST + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Cost expectedCost \u003d new Cost(VALID_COST);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expectedCost, ParserUtil.parseCost(costWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCosts_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCosts(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCosts_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCosts(Collections.singletonList(INVALID_COST)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCosts(Collections.singletonList(\"123.000-123.00\")));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCosts_validValueWithoutWhitespace_returnsCost() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost expectedCost \u003d new Cost(VALID_COST);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cCost\u003e costs \u003d ParserUtil.parseCosts(Collections.singletonList(VALID_COST));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(1, costs.size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedCost, costs.get(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCosts_validValueWithWhitespace_returnsTrimmedCost() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String costWithWhitespace \u003d WHITESPACE + VALID_COST + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost expectedCost \u003d new Cost(VALID_COST);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cCost\u003e costs \u003d ParserUtil.parseCosts(Collections.singletonList(costWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(1, costs.size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedCost, costs.get(0));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author Nanosync"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCostsRange_validValue() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost expectedCost1 \u003d new Cost(\"1\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost expectedCost2 \u003d new Cost(\"2\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cCost\u003e expectedCosts \u003d List.of(expectedCost1, expectedCost2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedCosts, ParserUtil.parseCostsRange(\"1 - 2\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedCosts, ParserUtil.parseCostsRange(\"1.0 - 2.0\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedCosts, ParserUtil.parseCostsRange(\"1.0 - 2\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedCosts, ParserUtil.parseCostsRange(\"1 - 2.0\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCostsRange_invalidValues_emptyList() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cCost\u003e costs \u003d new ArrayList\u003cCost\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(costs, ParserUtil.parseCostsRange(\"\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(costs, ParserUtil.parseCostsRange(\"1 - \"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(costs, ParserUtil.parseCostsRange(\" - 2\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(costs, ParserUtil.parseCostsRange(\" - \"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCostsRange(\"+1 - +2\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parseRemark_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((String) null));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parseRemark_validValueWithoutWhitespace_returnsRemark() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parseRemark_validValueWithWhitespace_returnsTrimmedRemark() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String remarkWithWhitespace \u003d WHITESPACE + VALID_REMARK + WHITESPACE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseReminderMessage_validValueWithoutWhitespace_returnsReminderMessage() throws Exception {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ReminderMessage expectedReminderMessage \u003d new ReminderMessage(VALID_REMINDER_MESSAGE);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expectedReminderMessage, ParserUtil.parseMessage(VALID_REMINDER_MESSAGE));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseReminderMessage_validValueWithWhitespace_returnsTrimmedReminderMessage() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String reminderMessageWithWhitespace \u003d WHITESPACE + VALID_REMINDER_MESSAGE + WHITESPACE;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ReminderMessage expectedReminderMessage \u003d new ReminderMessage(VALID_REMINDER_MESSAGE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expectedReminderMessage, ParserUtil.parseMessage(reminderMessageWithWhitespace));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 65,
      "jonathantjendana": 11,
      "Nanosync": 64,
      "choongyx": 4,
      "-": 142,
      "austinsantoso": 2
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/ReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.COMMAND_WORD_DESC_ADD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.COMMAND_WORD_DESC_DELETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_COMMAND_WORD_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.REMINDER_MESSAGE_DESC_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMINDER_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_REMINDER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BILL_REMINDER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class ReminderCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private ReminderCommandParser parser \u003d new ReminderCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder expectedReminder \u003d new ReminderBuilder(BILL_REMINDER).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // whitespace only preamble for adding reminder"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + COMMAND_WORD_DESC_ADD + DATE_DESC_VALID"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new AddReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // multiple dates for adding reminder - last date accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseSuccess(parser, COMMAND_WORD_DESC_ADD + DATE_DESC_VALID + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new AddReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // Deleting reminder"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseSuccess(parser, COMMAND_WORD_DESC_DELETE + \" 1\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new DeleteReminderCommand(INDEX_FIRST_REMINDER));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // missing command word"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_VALID + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, VALID_DATE + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // missing message prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_VALID + VALID_REMINDER_MESSAGE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, VALID_DATE + VALID_REMINDER_MESSAGE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parse_invalidCommandWord_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertParseFailure(parser, INVALID_COMMAND_WORD_DESC + DATE_DESC_VALID + REMINDER_MESSAGE_DESC_VALID,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                ReminderCommand.MESSAGE_USAGE), () -\u003e parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 81
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/SortCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortAttribute;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortOrder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_validArgsOneParam_returnsFindCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ---------- Date ----------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ASC"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortField\u003e fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.DATE, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE + \"ASC\", expectedSortCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // DESC"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.DATE, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE + \"DESC\", expectedSortCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ---------- Cost ----------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ASC"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.COST, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COST + \"ASC\", expectedSortCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // DESC"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.COST, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COST + \"DESC\", expectedSortCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ---------- Name ----------"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ASC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.NAME, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"ASC\", expectedSortCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // DESC"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.NAME, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"DESC\", expectedSortCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ---------- Remark ----------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ASC"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.REMARK, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_REMARK + \"ASC\", expectedSortCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // DESC"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.REMARK, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_REMARK + \"DESC\", expectedSortCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_validArgsTwoParam_returnsFindCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // ---------- Date ----------"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortField\u003e fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.DATE, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.COST, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DATE + \"ASC\" + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                + PREFIX_COST + \"DESC\", expectedSortCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_duplicateArgs_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + \"DESC\" + \" \" + PREFIX_DATE + \"ASC\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                SortCommand.MESSAGE_SORT_DUPLICATE_FIELD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + \"ASC\" + \" \" + PREFIX_DATE + \"ASC\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                SortCommand.MESSAGE_SORT_DUPLICATE_FIELD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Unrecognised prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + \"aaaa/ASC\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // No value for prefixes"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_COST,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_REMARK,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Combined invalid args"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + \" \" + PREFIX_COST,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Two args with one arg defined before"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + \"ASC\" + \" \" + PREFIX_COST,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Two args with one arg defined after"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE + \" \" + PREFIX_COST + \"ASC\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 136
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/SpendingBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalIndexes.INDEX_FIRST_SPENDING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.CurrencyCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand.EditSpendingDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExchangeRateCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import seedu.moneygowhere.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ShowBudgetCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.EditSpendingDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class SpendingBookParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final SpendingBookParser parser \u003d new SpendingBookParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spending \u003d new SpendingBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(SpendingUtil.getAddCommand(spending));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(new AddCommand(spending), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SPENDING.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_SPENDING), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spending \u003d new SpendingBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        EditSpendingDescriptor descriptor \u003d new EditSpendingDescriptorBuilder(spending).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                + INDEX_FIRST_SPENDING.getOneBased() + \" \" + SpendingUtil.getEditSpendingDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_SPENDING, descriptor), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + String.join(\" \", keywords));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cPredicate\u003cSpending\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicates.add(new NameContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(new FindCommand(predicates), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parseCommand_graph() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(parser.parseCommand(GraphCommand.COMMAND_WORD) instanceof GraphCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(parser.parseCommand(GraphCommand.COMMAND_WORD + \" 3\") instanceof GraphCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD + \" 3\") instanceof StatsCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String command \u003d SortCommand.COMMAND_WORD + \" \" + PREFIX_DATE + \"ASC\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(parser.parseCommand(command) instanceof SortCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCommand_exchangeRate() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(parser.parseCommand(ExchangeRateCommand.COMMAND_WORD) instanceof ExchangeRateCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(parser.parseCommand(ExchangeRateCommand.COMMAND_WORD + \" 5 USD\") instanceof ExchangeRateCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void parseCommand_currency() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(parser.parseCommand(CurrencyCommand.COMMAND_WORD) instanceof CurrencyCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(parser.parseCommand(CurrencyCommand.COMMAND_WORD + \" SGD\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new CurrencyCommand(\"SGD\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseCommand_addReminder() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder reminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        AddReminderCommand command \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                (AddReminderCommand) parser.parseCommand(SpendingUtil.getAddReminderCommand(reminder));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(new AddReminderCommand(reminder), command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void parseCommand_deleteReminder() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DeleteReminderCommand command \u003d (DeleteReminderCommand) parser.parseCommand("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                ReminderCommand.COMMAND_WORD + \" \" + DeleteReminderCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        + \" \" + INDEX_FIRST_SPENDING.getOneBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(new DeleteReminderCommand(INDEX_FIRST_SPENDING), command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void parseCommand_budget() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget budget \u003d new Budget(300);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetCommand command \u003d (BudgetCommand) parser.parseCommand("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                BudgetCommand.COMMAND_WORD + \" 300\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(new BudgetCommand(budget), command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void parseCommand_showBudget() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(parser.parseCommand(ShowBudgetCommand.COMMAND_WORD) instanceof ShowBudgetCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(parser.parseCommand(ShowBudgetCommand.COMMAND_WORD + \" 3\") instanceof ShowBudgetCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void parseCommand_import() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(parser.parseCommand(ImportCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                + \" \" + PREFIX_PATH + \"src/test/data/invalidDateSpending.csv\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                instanceof ImportCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 50,
      "jonathantjendana": 8,
      "Nanosync": 30,
      "choongyx": 13,
      "-": 66,
      "austinsantoso": 23
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/parser/StatsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "public class StatsCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private StatsCommandParser parser \u003d new StatsCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_validInputs_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date date1 \u003d new Date(VALID_DATE_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Date date2 \u003d new Date(VALID_DATE_BOB);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // 2 valid different dates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC_AMY + DATE_DESC_BOB ,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            new StatsCommand(date1, date2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // 2 valid same dates"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseSuccess(parser, DATE_DESC_AMY + DATE_DESC_AMY ,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            new StatsCommand(date1, date1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_noInputsProvided_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        //no dates provided"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        StatsCommand expectedCommand \u003d new StatsCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_invalidDates_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC , Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_BOB + INVALID_DATE_DESC , Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_invalidDateRange_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // start date is later than end date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_BOB + DATE_DESC_AMY ,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_INVALID_DATERANGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void parse_moreThan2Parameters_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // more than 2 date parameters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_BOB + DATE_DESC_AMY + DATE_DESC_AMY ,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_INVALID_DATERANGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 11,
      "choongyx": 51
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/logic/sorting/SpendingComparatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.logic.sorting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@@author Nanosync"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class SpendingComparatorTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void compare_greaterThan() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Default order"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder1 \u003d new SpendingBuilder().withDate(VALID_DATE_AMY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder2 \u003d new SpendingBuilder().withDate(VALID_DATE_BOB);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        int result \u003d spendingComparator.compare(builder1.build(), builder2.build());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(1, result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void compare_lessThan() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Default order"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder1 \u003d new SpendingBuilder().withDate(VALID_DATE_AMY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder2 \u003d new SpendingBuilder().withDate(VALID_DATE_BOB);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        int result \u003d spendingComparator.compare(builder2.build(), builder1.build());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(-1, result);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void compare_equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Default order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder1 \u003d new SpendingBuilder().withDate(VALID_DATE_AMY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder2 \u003d new SpendingBuilder().withDate(VALID_DATE_AMY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        int result \u003d spendingComparator.compare(builder1.build(), builder2.build());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(0, result);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void compare_nameSort_sortedCorrectly() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortField\u003e fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.NAME, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder1 \u003d new SpendingBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withCost(VALID_COST_AMY) // 312"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_AMY) // 01/01"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(VALID_REMARK_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withName(\"Apple\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder2 \u003d new SpendingBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withCost(VALID_COST_AMY) // 312"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_AMY) // 01/01"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(VALID_REMARK_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withName(\"apple\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder3 \u003d new SpendingBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withCost(VALID_COST_AMY) // 312"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_AMY) // 01/01"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(VALID_REMARK_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withName(\"applea\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder4 \u003d new SpendingBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withCost(VALID_COST_AMY) // 312"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_AMY) // 01/01"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(VALID_REMARK_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withName(\"Banana\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator(fields);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cSpending\u003e spendingList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                Arrays.asList(builder4.build(), builder1.build(), builder3.build(), builder2.build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingList.sort(spendingComparator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Apple, Banana, apple, applea"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cSpending\u003e expectedSpendingList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                Arrays.asList(builder1.build(), builder4.build(), builder2.build(), builder3.build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(expectedSpendingList, spendingList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void compare_multipleFields_valid() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortField\u003e fields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.COST, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.DATE, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.REMARK, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        fields.add(new SortField(SortAttribute.NAME, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingComparator spendingComparator \u003d new SpendingComparator(fields);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder1 \u003d new SpendingBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withCost(VALID_COST_AMY) // 312"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_AMY) // 01/01"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(\"A\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withName(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder2 \u003d new SpendingBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withCost(VALID_COST_BOB) // 123"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_BOB) // 02/01"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(\"B\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withName(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder3 \u003d new SpendingBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withCost(VALID_COST_BOB) // 123"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_AMY) // 01/01"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(\"A\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withName(\"Chicken\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBuilder builder4 \u003d new SpendingBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withCost(VALID_COST_BOB) // 123"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withDate(VALID_DATE_AMY) // 01/01"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(\"A\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withName(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // builder1 \u003e builder2 (DESC - Cost)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // builder1 \u003e builder2 (ASC - Date)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        int result \u003d spendingComparator.compare(builder1.build(), builder2.build());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(-1, result); // DESC"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        result \u003d spendingComparator.compare(builder1.build(), builder3.build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(-1, result); // ASC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        result \u003d spendingComparator.compare(builder3.build(), builder4.build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(-1, result); // DESC"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 148
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.model.Model.PREDICATE_SHOW_ALL_SPENDINGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BILL_REMINDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.CATFOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(new SpendingBook(), new SpendingBook(modelManager.getSpendingBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        userPrefs.setSpendingBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        userPrefs.setSpendingBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setSpendingBookFilePath(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        modelManager.setSpendingBookFilePath(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(path, modelManager.getSpendingBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void hasSpending_nullSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSpending(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void hasSpending_spendingNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(modelManager.hasSpending(APPLE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void hasSpending_spendingInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        modelManager.addSpending(APPLE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(modelManager.hasSpending(APPLE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void hasMultipleSpending_spendingInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        List\u003cSpending\u003e spendings \u003d new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA, CATFOOD));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        modelManager.addSpending(spendings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(modelManager.hasSpending(APPLE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(modelManager.hasSpending(BANANA));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(modelManager.hasSpending(CATFOOD));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void hasReminder_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasReminder(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void hasReminder_reminderNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(modelManager.hasReminder(BILL_REMINDER));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void hasReminder_reminderInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        modelManager.addReminder(BILL_REMINDER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(modelManager.hasReminder(BILL_REMINDER));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getFilteredSpendingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredSpendingList().remove(0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        SpendingBook spendingBook \u003d new SpendingBookBuilder().withSpending(APPLE).withSpending(BANANA).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        SpendingBook differentSpendingBook \u003d new SpendingBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        modelManager \u003d new ModelManager(spendingBook, userPrefs);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(spendingBook, userPrefs);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentSpendingBook, userPrefs)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        String[] keywords \u003d APPLE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        modelManager.updateFilteredSpendingList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(spendingBook, userPrefs)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        modelManager.updateFilteredSpendingList(PREDICATE_SHOW_ALL_SPENDINGS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        differentUserPrefs.setSpendingBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(spendingBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 36,
      "jonathantjendana": 13,
      "choongyx": 7,
      "-": 98,
      "austinsantoso": 8
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/SpendingBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BILL_REMINDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.CATFOOD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.DESSERT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.util.CurrencyDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class SpendingBookTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final SpendingBook addressBook \u003d new SpendingBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getSpendingList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getReminderList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(new Budget(1000), addressBook.getBudget());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        SpendingBook newData \u003d getTypicalSpendingBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void hasSpending_nullSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasSpending(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void hasReminder_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasReminder(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void hasSpending_spendingNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(addressBook.hasSpending(APPLE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void hasReminder_reminderNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(addressBook.hasReminder(BILL_REMINDER));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void hasSpending_spendingInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        addressBook.addSpending(APPLE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(addressBook.hasSpending(APPLE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        List\u003cSpending\u003e spendings \u003d new ArrayList\u003c\u003e(Arrays.asList(BANANA, CATFOOD, DESSERT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        addressBook.addSpending(spendings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(addressBook.hasSpending(BANANA));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(addressBook.hasSpending(CATFOOD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(addressBook.hasSpending(DESSERT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void hasReminder_reminderInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        addressBook.addReminder(BILL_REMINDER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(addressBook.hasReminder(BILL_REMINDER));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void hasSpending_spendingWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        addressBook.addSpending(APPLE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Spending editedAlice \u003d new SpendingBuilder(APPLE).withCost(VALID_COST_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(addressBook.hasSpending(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getSpendingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getSpendingList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setBudget_validInput_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget budget \u003d new Budget(1000);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        addressBook.setBudget(budget);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(addressBook.getBudget().equals(budget));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * A stub ReadOnlyAddressBook whose spendings list can violate interface constraints."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static class SpendingBookStub implements ReadOnlySpendingBook {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        private final ObservableList\u003cSpending\u003e spendings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        private final ObservableList\u003cReminder\u003e reminders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        private final Budget budget \u003d new Budget(0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        private final ObservableList\u003cCurrency\u003e currencies \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                FXCollections.observableArrayList(CurrencyDataUtil.getSampleCurrencies());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        private ObjectProperty\u003cCurrency\u003e currencyInUse;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        SpendingBookStub(Collection\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            this.spendings.setAll(spendings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public ObservableList\u003cSpending\u003e getSpendingList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return spendings;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return reminders;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public ObservableList\u003cCurrency\u003e getCurrencies() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return currencies;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public Currency getCurrencyInUse() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            return currencyInUse.getValue();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        public void registerCurrencyChangedListener(ChangeListener\u003cCurrency\u003e currencyChangeListener) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            currencyInUse.addListener(currencyChangeListener);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        public Budget getBudget() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return budget;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 38,
      "jonathantjendana": 14,
      "Nanosync": 25,
      "choongyx": 6,
      "-": 55,
      "austinsantoso": 26
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setSpendingBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/budget/BudgetMonthTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.commons.util.DateUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class BudgetMonthTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private LocalDate old \u003d LocalDate.of(2010, 01, 01);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private LocalDate now \u003d DateUtil.getTodayDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private LocalDate future \u003d now.plusYears(10);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BudgetMonth(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void constructor_validBudgetMonth_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetMonth temp \u003d new BudgetMonth(old);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(old.getMonthValue(), temp.getMonth());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(old.getYear(), temp.getYear());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void parse_invalidBudgetMonth_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String invalidBudgetMonth \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e BudgetMonth.parse(invalidBudgetMonth));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BudgetMonth.parse(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getMonth_validInput_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetMonth temp \u003d new BudgetMonth(old);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(old.getMonthValue(), temp.getMonth());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getYear_validInput_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetMonth temp \u003d new BudgetMonth(old);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(old.getYear(), temp.getYear());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void now_validInput_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetMonth temp \u003d new BudgetMonth(now);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(temp, BudgetMonth.now());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void isValidBudgetMonth_validInput_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        //null Budget Month"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e BudgetMonth.isValidBudgetMonth(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        //invalid dates"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(BudgetMonth.isValidBudgetMonth(\" \")); //whitespace"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(BudgetMonth.isValidBudgetMonth(\"\")); //empty string"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(BudgetMonth.isValidBudgetMonth(\"asdf\")); //invalid format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(BudgetMonth.isValidBudgetMonth(\"01 2019\")); //invalid format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        //valid dates"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(BudgetMonth.isValidBudgetMonth(\"01/2010\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(BudgetMonth.isValidBudgetMonth(\"12/2019\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void isBehind_validInput_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(BudgetMonth.now().isBehind(future));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(BudgetMonth.now().isBehind(old));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(BudgetMonth.now().isBehind(now));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetMonth temp \u003d new BudgetMonth(old);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetMonth temp2 \u003d new BudgetMonth(old.getMonthValue(), old.getYear());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(temp, temp2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 86
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/budget/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getSpendingSum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class BudgetTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Budget oldBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private LocalDate oldDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Budget newBudget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private LocalDate newDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        oldBudget \u003d new Budget(100, \"01/2010\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        newBudget \u003d new Budget(123, \"12/2020\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // oldDate is date of spendings in TypicalSPendingBook"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        oldDate \u003d LocalDate.of(2019, 01, 01);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // newDate is not in typicalSpendingBook"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        newDate \u003d LocalDate.of(2020, 12, 01);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Budget(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void constructor_invalidBudgetValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String invalidBudget \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Budget(invalidBudget));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void isValidBudget_validInput_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        //valid Budget"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"0\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"0.123\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"10000\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(Budget.isValidBudget(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(Budget.isValidBudget(0.123));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(Budget.isValidBudget(10000));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void isValidBudget_invalidInput_false() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Budget.isValidBudget(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        //invalid Budgets"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"\")); // empty string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(Budget.isValidBudget(\" \")); // spaces only"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"incorrect\")); // strings need to be numbers"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"-1\")); //  numeric strings need to be positive"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(Budget.isValidBudget(-1)); //  cannot be negative"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void initialize_validInput_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget temp \u003d new Budget(100, \"01/2010\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        temp.initialize(newDate, getTypicalSpendingBook().getSpendingList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(100, temp.getAmount());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals((new BudgetMonth(newDate)).toString(), temp.getMonthString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(0, temp.getSum());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        temp \u003d new Budget(1000, \"01/2010\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        temp.initialize(oldDate, getTypicalSpendingBook().getSpendingList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(1000, temp.getAmount());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals((new BudgetMonth(oldDate)).toString(), temp.getMonthString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(getSpendingSum(), temp.getSum());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void inSameMonth_validInput_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending temp \u003d new SpendingBuilder().withName(\"name\").withCost(\"10\").withDate(\"10/01/2010\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(oldBudget.inSameMonth(temp));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(newBudget.inSameMonth(temp));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void addSpending_differentDate_noAdd() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending temp \u003d new SpendingBuilder().withName(\"name\").withCost(\"10\").withDate(\"10/01/2010\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget newBudgetTemp \u003d new Budget(123, \"12/2020\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        newBudgetTemp.addSpending(temp);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(0, newBudgetTemp.getSum());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void addSpending_validDate_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending temp \u003d new SpendingBuilder().withName(\"name\").withCost(\"10\").withDate(\"10/01/2010\").build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Budget oldBudgetTemp \u003d new Budget(100, \"01/2010\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        oldBudgetTemp.addSpending(temp);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(10, oldBudgetTemp.getSum());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void addSpending_multipleSpending_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        List\u003cSpending\u003e spendingList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            Arrays.asList("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new SpendingBuilder().withName(\"name\").withCost(\"10\").withDate(\"10/01/2010\").build(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new SpendingBuilder().withName(\"name2\").withCost(\"10\").withDate(\"10/01/2010\").build(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new SpendingBuilder().withName(\"name3\").withCost(\"10\").withDate(\"10/01/2010\").build()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            )"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Budget oldBudgetTemp \u003d new Budget(100, \"01/2010\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        oldBudgetTemp.addSpending(spendingList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(30, oldBudgetTemp.getSum());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void deleteSpending_wrongDate_noAdd() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending temp \u003d new SpendingBuilder().withName(\"name\").withCost(\"10\").withDate(\"10/01/2010\").build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        double originalValue \u003d newBudget.getAmount();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        double originalSum \u003d newBudget.getSum();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        newBudget.deleteSpending(temp);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(originalValue, newBudget.getAmount());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(originalSum, newBudget.getSum());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void deleteSpending_validDate_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending temp \u003d new SpendingBuilder().withName(\"name\").withCost(\"10\").withDate(\"10/01/2010\").build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        double originalSum \u003d oldBudget.getSum();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        oldBudget.deleteSpending(temp);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(originalSum - 10, oldBudget.getSum());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 17,
      "Nanosync": 2,
      "austinsantoso": 128
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/currency/CurrencyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.currency;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class CurrencyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void isSameCurrency() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency one \u003d new Currency(\"SGD\", \"$\", 1.00);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency two \u003d new Currency(\"SGD\", \"@\", 1.00);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency three \u003d new Currency(\"MYR\", \"$\", 1.00);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency four \u003d new Currency(\"SGD\", \"$\", 1.05);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(one.isSameCurrency(one));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(one.isSameCurrency(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same name but different symbol -\u003e same"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(one.isSameCurrency(two));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same name but different rate -\u003e same"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(four.isSameCurrency(one));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different name but same symbol"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(one.isSameCurrency(three));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency one \u003d new Currency(\"SGD\", \"$\", 1.00);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency two \u003d new Currency(\"SGD\", \"@\", 1.00);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency three \u003d new Currency(\"MYR\", \"$\", 1.00);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency four \u003d new Currency(\"SGD\", \"$\", 1.05);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(one.equals(one));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(one \u003d\u003d null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse((\"Apple\").equals(one));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same name but different symbol"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(one.equals(two));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same name but different rate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(four.equals(one));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different name but same symbol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(one.equals(three));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toString_equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(\"SGD ($): 1.000\", new Currency(\"SGD\", \"$\", 1.00).toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void compareTo_equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency one \u003d new Currency(\"SGD\", \"$\", 1.00);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Currency two \u003d new Currency(\"SGD\", \"@\", 1.00);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(0, one.compareTo(two));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 72
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/path/FilePathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.model.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class FilePathTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final Path TEST_DATA_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"SampleSpendings\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            \"invalidDateSpending.csv\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FilePath(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void constructor_invalidPath_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String invalidPath \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FilePath(invalidPath));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FilePath.isValidPath(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertFalse(FilePath.isValidPath(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertFalse(FilePath.isValidPath(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(FilePath.isValidPath(TEST_DATA_FILE.toString()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 40
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/path/FolderPathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.model.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class FolderPathTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private static final Path TEST_DATA_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"SampleSpendings\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FolderPath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void constructor_invalidPath_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String invalidPath \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FolderPath(invalidPath));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FolderPath.isValidFolderPath(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertFalse(FolderPath.isValidFolderPath(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertFalse(FolderPath.isValidFolderPath(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(FolderPath.isValidFolderPath(TEST_DATA_FILE.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 39
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/reminder/ReminderListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BILL_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.SCHOOL_FEE_REMINDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.exception.ReminderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class ReminderListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private final ReminderList reminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void contains_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e reminderList.contains(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void contains_reminderNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertFalse(reminderList.contains(BILL_REMINDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void contains_reminderInList_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderList.add(SCHOOL_FEE_REMINDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(reminderList.contains(SCHOOL_FEE_REMINDER));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void add_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e reminderList.add(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void remove_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e reminderList.remove(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void remove_reminderDoesNotExist_throwsReminderNotFoundException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(ReminderNotFoundException.class, () -\u003e reminderList.remove(SCHOOL_FEE_REMINDER));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void remove_existingReminder_removesSpending() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderList.add(SCHOOL_FEE_REMINDER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderList.remove(SCHOOL_FEE_REMINDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ReminderList expectedReminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expectedReminderList, reminderList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                reminderList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 63
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/reminder/ReminderMessageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderMessageTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReminderMessage(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 14
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/reminder/ReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class ReminderTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void getReminderMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder dummyReminder \u003d new Reminder(new Date(\"today\"), new ReminderMessage(\"Pay Bill\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(new ReminderMessage(\"Pay Bill\"), dummyReminder.getReminderMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void getDeadline() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder dummyReminder \u003d new Reminder(new Date(\"30/11/2999\"), new ReminderMessage(\"Pay Bill\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(new Date(\"30/11/2999\"), dummyReminder.getDeadline());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void isSameReminder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder firstDummyReminder \u003d new Reminder(new Date(\"today\"), new ReminderMessage(\"Pay Bill\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(firstDummyReminder.isSameReminder(new Reminder(new Date(\"today\"), new ReminderMessage(\"Pay Bill\"))));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder secondDummyReminder \u003d new Reminder(new Date(\"30/11/2999\"), new ReminderMessage(\"Pay rental fees\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertTrue(secondDummyReminder.isSameReminder(new Reminder(new Date(\"30/11/2999\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new ReminderMessage(\"Pay rental fees\"))));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void isValidReminder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Reminder dummyReminder \u003d new Reminder(new Date(\"today\"), new ReminderMessage(\"Pay Bill\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertNotEquals(null, dummyReminder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 40
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/CostInRangePredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class CostInRangePredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost min \u003d new Cost(\"1.00\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost max \u003d new Cost(\"2.00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CostInRangePredicate firstPredicate \u003d new CostInRangePredicate(min, max);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CostInRangePredicate firstPredicateCopy \u003d new CostInRangePredicate(min, max);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_costInRange_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost min \u003d new Cost(\"1.00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost max \u003d new Cost(\"3.00\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Cost within range"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CostInRangePredicate predicate \u003d new CostInRangePredicate(min, max);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withCost(\"1.00\").build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withCost(\"2.00\").build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withCost(\"3.00\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_costOutOfRange_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost min \u003d new Cost(\"1.00\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Cost max \u003d new Cost(\"3.00\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Cost out of range"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        CostInRangePredicate predicate \u003d new CostInRangePredicate(min, max);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withCost(\"4.00\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // invalid predicate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(RuntimeException.class, () -\u003e new CostInRangePredicate(new Cost(\"2.00\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new Cost(\"1.00\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 59
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/CostTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "public class CostTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Cost(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void constructor_invalidCost_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        String invalidCost \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Cost(invalidCost));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public void isValidCost() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // null cost"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Cost.isValidCost(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // invalid cost"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(Cost.isValidCost(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(Cost.isValidCost(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(Cost.isValidCost(\"hi:\")); // non-numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(Cost.isValidCost(\"1.100\")); // numbers with more than 2 decimal places"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        // valid cost"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(Cost.isValidCost(\"100\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(Cost.isValidCost(\"100.5\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(Cost.isValidCost(\"100.50\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "choongyx": 36
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/DateInRangePredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class DateInRangePredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Date start \u003d new Date(\"1/1/2019\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Date end \u003d new Date(\"2/1/2019\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        DateInRangePredicate firstPredicate \u003d new DateInRangePredicate(start, end);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        DateInRangePredicate firstPredicateCopy \u003d new DateInRangePredicate(start, end);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_dateInRange_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Date start \u003d new Date(\"1/1/2019\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Date end \u003d new Date(\"3/1/2019\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Date within range"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        DateInRangePredicate predicate \u003d new DateInRangePredicate(start, end);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withDate(\"1/1/2019\").build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withDate(\"2/1/2019\").build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withDate(\"3/1/2019\").build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_dateOutOfRange_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Date start \u003d new Date(\"1/1/2019\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Date end \u003d new Date(\"3/1/2019\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Date out of range"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        DateInRangePredicate predicate \u003d new DateInRangePredicate(start, end);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withDate(\"4/1/2019\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 54
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/DateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String invalidDate \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // null date number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/1/2019\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(Date.isValidDate(\"25/12/2019\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(Date.isValidDate(\"today\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(Date.isValidDate(\"yesterday\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Equal"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(0, new Date(\"1/1/2019\").compareTo(new Date(\"1/1/2019\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Less than"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(-1, new Date(\"1/1/2019\").compareTo(new Date(\"2/1/2019\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Greater than"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(1, new Date(\"2/1/2019\").compareTo(new Date(\"1/1/2019\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(1, new Date(\"12/1/2019\").compareTo(new Date(\"1/12/2018\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 51
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different predicate list -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // Keywords match date, remark and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1/1/2019\", \"Amazing\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withName(\"Alice\").withDate(\"1/1/2019\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .withRemark(\"Amazing\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 3,
      "Nanosync": 7,
      "-": 60,
      "austinsantoso": 6
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/RemarkContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class RemarkContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        RemarkContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new RemarkContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        RemarkContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new RemarkContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        RemarkContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new RemarkContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different predicate list -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_remarkContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        RemarkContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                new RemarkContainsKeywordsPredicate(Collections.singletonList(\"watch\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withRemark(\"Likes to watch movies\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicate \u003d new RemarkContainsKeywordsPredicate(Arrays.asList(\"watch\", \"movies\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withRemark(\"Likes to watch movies\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicate \u003d new RemarkContainsKeywordsPredicate(Arrays.asList(\"Likes\", \"swimming\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withRemark(\"Likes movies\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicate \u003d new RemarkContainsKeywordsPredicate(Arrays.asList(\"taSty\", \"fOod\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withRemark(\"tasty food\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_remarkDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        RemarkContainsKeywordsPredicate predicate \u003d new RemarkContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withRemark(\"Apple\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicate \u003d new RemarkContainsKeywordsPredicate(Collections.singletonList(\"Chicken\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withRemark(\"Apple Briyani\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Keywords match name, date, but does not match remark"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        predicate \u003d new RemarkContainsKeywordsPredicate(Arrays.asList(\"1/1/2019\", \"Apple\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withName(\"Apple\").withDate(\"1/1/2019\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                .withRemark(\"Tasty\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 80
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/RemarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 12,
      "Nanosync": 2
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/SpendingListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.model.spending.exceptions.SpendingNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "public class SpendingListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private final SpendingList spendingList \u003d new SpendingList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void contains_nullSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e spendingList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void contains_spendingNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertFalse(spendingList.contains(APPLE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void contains_spendingInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.add(APPLE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(spendingList.contains(APPLE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void contains_spendingWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.add(APPLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Spending editedAlice \u003d new SpendingBuilder(APPLE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertTrue(spendingList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void add_nullSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e spendingList.add((Spending) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void add_nullListSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e spendingList.add((List\u003cSpending\u003e) null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpending_nullTargetSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e spendingList.setSpending(null, APPLE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpending_nullEditedSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e spendingList.setSpending(APPLE, null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpending_targetSpendingNotInList_throwsSpendingNotFoundException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(SpendingNotFoundException.class, () -\u003e spendingList.setSpending(APPLE, APPLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpending_editedSpendingIsSameSpending_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.add(APPLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.setSpending(APPLE, APPLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        SpendingList expectedSpendingList \u003d new SpendingList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        expectedSpendingList.add(APPLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(expectedSpendingList, spendingList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpending_editedSpendingHasSameIdentity_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.add(APPLE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        Spending editedApple \u003d new SpendingBuilder(APPLE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.setSpending(APPLE, editedApple);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        SpendingList expectedSpendingList \u003d new SpendingList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        expectedSpendingList.add(editedApple);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(expectedSpendingList, spendingList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpending_editedSpendingHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.add(APPLE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.setSpending(APPLE, BANANA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        SpendingList expectedSpendingList \u003d new SpendingList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        expectedSpendingList.add(BANANA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(expectedSpendingList, spendingList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void remove_nullSpending_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e spendingList.remove(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void remove_spendingDoesNotExist_throwsSpendingNotFoundException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(SpendingNotFoundException.class, () -\u003e spendingList.remove(APPLE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void remove_existingSpending_removesSpending() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.add(APPLE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.remove(APPLE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        SpendingList expectedSpendingList \u003d new SpendingList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(expectedSpendingList, spendingList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpendings_nullSpendingList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e spendingList.setSpendings((SpendingList) null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpendings_uniqueSpendingList_replacesOwnListWithProvidedSpendingList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.add(APPLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        SpendingList expectedSpendingList \u003d new SpendingList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        expectedSpendingList.add(BANANA);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.setSpendings(expectedSpendingList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(expectedSpendingList, spendingList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpendings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e spendingList.setSpendings((List\u003cSpending\u003e) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void setSpendings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        spendingList.add(APPLE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        List\u003cSpending\u003e spendingList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        this.spendingList.setSpendings(spendingList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        SpendingList expectedSpendingList \u003d new SpendingList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        expectedSpendingList.add(BANANA);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertEquals(expectedSpendingList, this.spendingList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            -\u003e spendingList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 153
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/spending/SpendingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.spending;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class SpendingTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Spending spending \u003d new SpendingBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e spending.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void isSameSpending() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(APPLE.isSameSpending(APPLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.isSameSpending(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // different date and remark -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Spending editedAlice \u003d new SpendingBuilder(APPLE).withDate(VALID_DATE_BOB).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.isSameSpending(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        editedAlice \u003d new SpendingBuilder(APPLE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.isSameSpending(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same name, same date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        editedAlice \u003d new SpendingBuilder(APPLE).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(APPLE.isSameSpending(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // same name, same remark, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        editedAlice \u003d new SpendingBuilder(APPLE).withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(APPLE.isSameSpending(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // same name, same date, same remark, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        editedAlice \u003d new SpendingBuilder(APPLE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(APPLE.isSameSpending(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Spending aliceCopy \u003d new SpendingBuilder(APPLE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(APPLE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // different Spending -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        Spending editedAlice \u003d new SpendingBuilder(APPLE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        editedAlice \u003d new SpendingBuilder(APPLE).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        editedAlice \u003d new SpendingBuilder(APPLE).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        editedAlice \u003d new SpendingBuilder(APPLE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertFalse(APPLE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 4,
      "Nanosync": 10,
      "choongyx": 27,
      "-": 44,
      "austinsantoso": 5
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/tag/TagPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.SpendingBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class TagPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        Set\u003cString\u003e tagKeywordSet \u003d Set.of(\"tag\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        TagPredicate firstPredicate \u003d new TagPredicate(tagKeywordSet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        TagPredicate firstPredicateCopy \u003d new TagPredicate(tagKeywordSet);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_matchingTags_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Only one tag matches"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        TagPredicate predicate2 \u003d new TagPredicate(Set.of(\"three\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate2.test(new SpendingBuilder().withTags(\"one\", \"two\", \"three\").build()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Both tags match"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        TagPredicate predicate \u003d new TagPredicate(Set.of(\"one\", \"two\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertTrue(predicate.test(new SpendingBuilder().withTags(\"one\", \"two\").build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void predicate_missingTags_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        // Tag does not exist"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        TagPredicate predicate \u003d new TagPredicate(Set.of(\"one\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withTags(\"two\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertFalse(predicate.test(new SpendingBuilder().withTags(\"three\", \"two\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 52
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/CommandStorageImplTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class CommandStorageImplTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private CommandStorageImpl commandStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getPrevCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // before any commands were inputted"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandStorage \u003d new CommandStorageImpl();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", commandStorage.getPrevCommand());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // after commands were inputted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandStorage.addCommand(\"command1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandStorage.addCommand(\"command2\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"command2\", commandStorage.getPrevCommand());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"command1\", commandStorage.getPrevCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getNextCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // before any commands were inputted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandStorage \u003d new CommandStorageImpl();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", commandStorage.getNextCommand());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // after commands were inputted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandStorage.addCommand(\"command1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        commandStorage.addCommand(\"command2\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", commandStorage.getNextCommand());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"command2\", commandStorage.getPrevCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"command1\", commandStorage.getPrevCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"command2\", commandStorage.getNextCommand());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", commandStorage.getNextCommand());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 40
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/JsonAdaptedBudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.storage.JsonAdaptedBudget.INVALID_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.storage.JsonAdaptedBudget.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.budget.BudgetMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "class JsonAdaptedBudgetTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final Budget VALID_BUDGET \u003d new Budget(100, \"10/2019\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final String INVALID_MONTH \u003d \"2019/99999\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final String INVALID_VALUE \u003d \"asdf\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final String VALID_VALUE \u003d \"100\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static final String VALID_MONTH \u003d \"10/2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toModelType_validInput_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_VALUE, VALID_MONTH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(VALID_BUDGET, budget.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (IllegalValueException er) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(VALID_BUDGET, \"invalid Budget.toModelType()\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toModelType_invalidMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_VALUE, INVALID_MONTH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, BudgetMonth.MESSAGE_CONSTRAINTS, budget::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toModelType_nullMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_VALUE, null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"BudgetMonth\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toModelType_invalidValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(INVALID_VALUE, VALID_MONTH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(INVALID_FIELD_MESSAGE_FORMAT, \"value\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toModelType_nullValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(null, VALID_MONTH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"value\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 59
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/JsonAdaptedCurrencyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.storage.JsonAdaptedCurrency.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.currency.Currency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "//@author Nanosync"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "class JsonAdaptedCurrencyTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String INVALID_NAME \u003d \"SGDEE\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String INVALID_SYMBOL \u003d \"aaaaaaaaaaaaaaaa\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final double INVALID_RATE \u003d -1.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String VALID_NAME \u003d \"SGD\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String VALID_SYMBOL \u003d \"$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final double VALID_RATE \u003d 1.0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Currency SGD_CURRENCY \u003d new Currency(VALID_NAME, VALID_SYMBOL, VALID_RATE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toModelType_validCurrency_returnsCurrency() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonAdaptedCurrency currency \u003d new JsonAdaptedCurrency(VALID_NAME, VALID_SYMBOL, VALID_RATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(SGD_CURRENCY, currency.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonAdaptedCurrency currency \u003d new JsonAdaptedCurrency(INVALID_NAME, VALID_SYMBOL, VALID_RATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d Currency.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, currency::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonAdaptedCurrency currency \u003d new JsonAdaptedCurrency(null, VALID_SYMBOL, VALID_RATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, currency::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toModelType_invalidSymbol_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonAdaptedCurrency currency \u003d new JsonAdaptedCurrency(VALID_NAME, INVALID_SYMBOL, VALID_RATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d Currency.MESSAGE_CONSTRAINT_SYMBOL;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, currency::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toModelType_nullSymbol_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonAdaptedCurrency currency \u003d new JsonAdaptedCurrency(VALID_NAME, null, VALID_RATE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Symbol\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, currency::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toModelType_invalidRate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d Currency.MESSAGE_CONSTRAINT_RATE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonAdaptedCurrency currency1 \u003d new JsonAdaptedCurrency(VALID_NAME, VALID_SYMBOL, INVALID_RATE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, currency1::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonAdaptedCurrency currency2 \u003d new JsonAdaptedCurrency(VALID_NAME, VALID_SYMBOL, Double.MAX_VALUE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, currency2::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void compareTo_equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(0, SGD_CURRENCY.compareTo(SGD_CURRENCY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 74
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/JsonAdaptedReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.storage.JsonAdaptedReminder.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.ReminderMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class JsonAdaptedReminderTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final String VALID_DATE \u003d \"today\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final String VALID_REMINDER_MESSAGE \u003d \"Pay Monthly school fees\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        JsonAdaptedReminder reminder \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new JsonAdaptedReminder(INVALID_DATE, VALID_REMINDER_MESSAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        JsonAdaptedReminder reminder \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new JsonAdaptedReminder(null, VALID_REMINDER_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        JsonAdaptedReminder reminder \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                new JsonAdaptedReminder(VALID_DATE, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ReminderMessage.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 42
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/JsonAdaptedSpendingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.storage.JsonAdaptedSpending.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class JsonAdaptedSpendingTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static final String INVALID_COST \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static final String VALID_NAME \u003d BANANA.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static final String VALID_DATE \u003d BANANA.getDate().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static final String VALID_COST \u003d BANANA.getCost().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static final String VALID_REMARK \u003d BANANA.getRemark().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BANANA.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toModelType_validSpendingDetails_returnsSpending() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        JsonAdaptedSpending spending \u003d new JsonAdaptedSpending(BANANA);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        assertEquals(BANANA, spending.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedSpending spending \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new JsonAdaptedSpending(INVALID_NAME, VALID_DATE, VALID_REMARK, VALID_COST, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, spending::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedSpending spending \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new JsonAdaptedSpending(null, VALID_DATE, VALID_REMARK, VALID_COST, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, spending::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedSpending spending \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new JsonAdaptedSpending(VALID_NAME, INVALID_DATE, VALID_REMARK, VALID_COST, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, spending::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedSpending spending \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new JsonAdaptedSpending(VALID_NAME, null, VALID_REMARK, VALID_COST, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, spending::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedSpending spending \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "                new JsonAdaptedSpending(VALID_NAME, VALID_DATE, null, VALID_COST, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, spending::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedSpending spending \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new JsonAdaptedSpending(VALID_NAME, VALID_DATE, VALID_REMARK, INVALID_COST, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        String expectedMessage \u003d Cost.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, spending::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedSpending spending \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new JsonAdaptedSpending(VALID_NAME, VALID_DATE, VALID_REMARK, null, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, spending::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        JsonAdaptedSpending spending \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "                new JsonAdaptedSpending(VALID_NAME, VALID_DATE, VALID_REMARK, VALID_COST, invalidTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertThrows(IllegalValueException.class, spending::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 10,
      "Nanosync": 13,
      "choongyx": 12,
      "-": 53,
      "austinsantoso": 18
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/JsonSerializableSpendingBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.testutil.TypicalSpendings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class JsonSerializableSpendingBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableSpendingBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Path TYPICAL_SPENDINGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalSpendingBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private static final Path INVALID_SPENDING_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidSpendingBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toModelType_typicalSpendingsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonSerializableSpendingBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SPENDINGS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                JsonSerializableSpendingBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBook spendingBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBook typicalSpendingBook \u003d TypicalSpendings.getTypicalSpendingBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        System.out.println(spendingBookFromFile.getSpendingList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        System.out.println(typicalSpendingBook.getSpendingList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(spendingBookFromFile, typicalSpendingBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toModelType_invalidSpendingFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonSerializableSpendingBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SPENDING_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "                JsonSerializableSpendingBook.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 1,
      "Nanosync": 17,
      "choongyx": 2,
      "-": 18,
      "austinsantoso": 2
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/JsonSpendingBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.BILL_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.HAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choongyx"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.ICECREAM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class JsonSpendingBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSpendingBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private java.util.Optional\u003cReadOnlySpendingBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new JsonSpendingBookStorage(Paths.get(filePath)).readSpendingBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatSpendingBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void readAddressBook_invalidSpendingAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidSpendingSpendingBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void readAddressBook_invalidAndValidSpendingAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidSpendingSpendingBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        SpendingBook original \u003d getTypicalSpendingBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        JsonSpendingBookStorage jsonSpendingBookStorage \u003d new JsonSpendingBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        jsonSpendingBookStorage.saveSpendingBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ReadOnlySpendingBook readBack \u003d jsonSpendingBookStorage.readSpendingBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(original, new SpendingBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        original.addSpending(HAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        original.removeSpending(APPLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        original.removeReminder(BILL_REMINDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        jsonSpendingBookStorage.saveSpendingBook(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        readBack \u003d jsonSpendingBookStorage.readSpendingBook(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(original, new SpendingBook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        original.addSpending(ICECREAM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        jsonSpendingBookStorage.saveSpendingBook(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        readBack \u003d jsonSpendingBookStorage.readSpendingBook().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(original, new SpendingBook(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private void saveAddressBook(ReadOnlySpendingBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            new JsonSpendingBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    .saveSpendingBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new SpendingBook(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 30,
      "choongyx": 6,
      "-": 74,
      "austinsantoso": 2
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        userPrefs.setSpendingBookFilePath(Paths.get(\"moneygowhere.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.TypicalSpendings.getTypicalSpendingBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.ReadOnlySpendingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        JsonSpendingBookStorage spendingBookStorage \u003d new JsonSpendingBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        storageManager \u003d new StorageManager(spendingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void spendingBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "         * {@link JsonSpendingBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        SpendingBook original \u003d getTypicalSpendingBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        storageManager.saveSpendingBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(\"debug\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        System.out.println(storageManager.readSpendingBook());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        ReadOnlySpendingBook retrieved \u003d storageManager.readSpendingBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertEquals(original, new SpendingBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public void getSpendingBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        assertNotNull(storageManager.getSpendingBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getPrevCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", storageManager.getPrevCommand());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storageManager.addCommand(\"command1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"command1\", storageManager.getPrevCommand());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void getNextCommand() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", storageManager.getNextCommand());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storageManager.addCommand(\"command1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storageManager.addCommand(\"command2\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storageManager.getPrevCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storageManager.getPrevCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storageManager.getPrevCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"command1\", storageManager.getNextCommand());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"command2\", storageManager.getNextCommand());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"\", storageManager.getNextCommand());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 17,
      "-": 52,
      "austinsantoso": 20
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/EditSpendingDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand.EditSpendingDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class EditSpendingDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private EditSpendingDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EditSpendingDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        descriptor \u003d new EditSpendingDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EditSpendingDescriptorBuilder(EditSpendingDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.descriptor \u003d new EditSpendingDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code Spending}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EditSpendingDescriptorBuilder(Spending spending) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        descriptor \u003d new EditSpendingDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        descriptor.setName(spending.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        descriptor.setDate(spending.getDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        descriptor.setRemark(spending.getRemark());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        descriptor.setCost(spending.getCost());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        descriptor.setTags(spending.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EditSpendingDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Sets the {@code Date} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public EditSpendingDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public EditSpendingDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Sets the {@code Cost} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public EditSpendingDescriptorBuilder withCost(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        descriptor.setCost(new Cost(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor} that we are"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EditSpendingDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EditSpendingDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjendana": 6,
      "Nanosync": 12,
      "choongyx": 4,
      "austinsantoso": 65
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/ReminderBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.ReminderMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * A utility class to help with building Reminder objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ReminderBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"25/12/2019\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String DEFAULT_REMINDER_MESSAGE \u003d \"Pay Bill\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Date deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private ReminderMessage reminderMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        deadline \u003d new Date(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderMessage \u003d new ReminderMessage(DEFAULT_REMINDER_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Initializes the ReminderBuilder with the data of {@code reminderToCopy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderBuilder(Reminder reminderToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        deadline \u003d reminderToCopy.getDeadline();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        reminderMessage \u003d reminderToCopy.getReminderMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadline \u003d new Date(deadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Sets the {@code ReminderMessage} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ReminderBuilder withRemark(String reminderMessage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.reminderMessage \u003d new ReminderMessage(reminderMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Reminder build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Reminder(deadline, reminderMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 48,
      "Nanosync": 1
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/SortUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortAttribute;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.logic.sorting.SortOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * A utility class for Sorting."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class SortUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Gets the default sort field set which sorts by both date and cost in descending order."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * @return Sort field set"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static LinkedHashSet\u003cSortField\u003e getDefaultSortFieldSet() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        LinkedHashSet\u003cSortField\u003e sortFields \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sortFields.add(new SortField(SortAttribute.DATE, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sortFields.add(new SortField(SortAttribute.COST, SortOrder.DESCENDING));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sortFields.add(new SortField(SortAttribute.NAME, SortOrder.ASCENDING));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return sortFields;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 25
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/SpendingBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * A utility class to help with building SpendingBook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " *     {@code SpendingBook sb \u003d new SpendingBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nanosync"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "public class SpendingBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private SpendingBook spendingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBook \u003d new SpendingBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingBookBuilder(SpendingBook spendingBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.spendingBook \u003d spendingBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Adds a new {@code Spending} to the {@code SpendingBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingBookBuilder withSpending(Spending spending) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBook.addSpending(spending);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * sets a new {@code Budget} to the {@code SpendingBook} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingBookBuilder withBudget(Budget budget) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        spendingBook.setBudget(budget);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nanosync"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingBook build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        return spendingBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 43
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/SpendingBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Cost;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Remark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * A utility class to help with building Spending objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class SpendingBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"25/12/2019\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Likes to play games\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"123\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public SpendingBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public SpendingBuilder(Spending spendingToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        name \u003d spendingToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        date \u003d spendingToCopy.getDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        cost \u003d spendingToCopy.getCost();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        remark \u003d spendingToCopy.getRemark();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(spendingToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Sets the {@code Name} of the {@code Spending} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public SpendingBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Spending} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public SpendingBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "     * Sets the {@code Date} of the {@code Spending} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public SpendingBuilder withDate(String date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "     * Sets the {@code Remark} of the {@code Spending} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "    public SpendingBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choongyx"
        },
        "content": "     * Sets the {@code Cost} of the {@code Spending} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public SpendingBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Spending build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        return new Spending(name, date, remark, cost, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 9,
      "jonathantjendana": 8,
      "Nanosync": 7,
      "choongyx": 7,
      "-": 52,
      "austinsantoso": 10
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/SpendingUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.EditCommand.EditSpendingDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * A utility class for Spending."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class SpendingUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns an add command string for adding the {@code Spending}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static String getAddCommand(Spending spending) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getSpendingDetails(spending);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns a reminder command string for adding the {@code Reminder}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getAddReminderCommand(Reminder reminder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return ReminderCommand.COMMAND_WORD + \" \" + AddReminderCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + getReminderDetails(reminder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the part of command string for the given {@code Spending}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static String getSpendingDetails(Spending spending) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        sb.append(PREFIX_NAME + spending.getName().fullName + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        sb.append(PREFIX_DATE + spending.getDate().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        sb.append(PREFIX_REMARK + spending.getRemark().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        sb.append(PREFIX_COST + spending.getCost().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        spending.getTags().stream().forEach("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the part of command string for the given {@code Reminder}\u0027s details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getReminderDetails(Reminder reminder) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        sb.append(PREFIX_DATE + reminder.getDeadline().value + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        sb.append(PREFIX_MESSAGE + reminder.getReminderMessage().value + \" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the part of command string for the given {@code EditSpendingDescriptor}\u0027s details."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static String getEditSpendingDescriptorDetails(EditSpendingDescriptor descriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.value).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "        descriptor.getRemark().ifPresent(remark -\u003e sb.append(PREFIX_REMARK).append(remark.value).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        descriptor.getCost().ifPresent(cost -\u003e sb.append(PREFIX_COST).append(cost.value).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 32,
      "jonathantjendana": 2,
      "Nanosync": 2,
      "choongyx": 2,
      "-": 35,
      "austinsantoso": 11
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the middle index of the Spending in the {@code model}\u0027s Spending list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return Index.fromOneBased(model.getFilteredSpendingList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the last index of the Spending in the {@code model}\u0027s Spending list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return Index.fromOneBased(model.getFilteredSpendingList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the Spending in the {@code model}\u0027s Spending list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static Spending getSpending(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return model.getFilteredSpendingList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 4,
      "-": 44,
      "austinsantoso": 7
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final Index INDEX_FIRST_SPENDING \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final Index INDEX_SECOND_SPENDING \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static final Index INDEX_THIRD_SPENDING \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final Index INDEX_FIRST_REMINDER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final Index INDEX_SECOND_REMINDER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final Index INDEX_THIRD_REMINDER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 4,
      "Nanosync": 2,
      "-": 7,
      "austinsantoso": 3
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/testutil/TypicalSpendings.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package seedu.moneygowhere.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_COST_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static seedu.moneygowhere.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.SpendingBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import seedu.moneygowhere.model.budget.BudgetMonth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.reminder.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import seedu.moneygowhere.model.spending.Spending;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * A utility class containing a list of {@code Spending} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class TypicalSpendings {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending APPLE \u003d new SpendingBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withCost(\"1.00\").withRemark(\"An apple a day keeps the doctor away\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "            .withDate(\"1/1/2019\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withTags(\"fruit\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending BANANA \u003d new SpendingBuilder().withName(\"Banana\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withCost(\"1.00\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withRemark(\"The store ran out of apples\").withDate(\"2/1/2019\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withTags(\"fruit\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending CATFOOD \u003d new SpendingBuilder().withName(\"Cat food\").withDate(\"3/1/2019\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withRemark(\"For my pet cat\").withCost(\"5.50\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending DESSERT \u003d new SpendingBuilder().withName(\"Dessert\").withDate(\"4/1/2019\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withRemark(\"Supper\").withCost(\"15\").withTags(\"supper\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending ENCYCLOPEDIA \u003d new SpendingBuilder().withName(\"Encyclopedia\").withDate(\"5/1/2019\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withRemark(\"Hobby\").withCost(\"80\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending FLIGHTTICKET \u003d new SpendingBuilder().withName(\"Flight ticket\").withDate(\"6/1/2019\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withRemark(\"To Hong Kong\").withCost(\"400\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending GLASSES \u003d new SpendingBuilder().withName(\"Glasses\").withDate(\"7/1/2019\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withRemark(\"New spectacles\").withCost(\"270\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending HAT \u003d new SpendingBuilder().withName(\"Hat\").withDate(\"8/1/2019\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withRemark(\"Snapback\").withCost(\"17\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choongyx"
        },
        "content": "    public static final Spending ICECREAM \u003d new SpendingBuilder().withName(\"Ice Cream\").withDate(\"9/1/2019\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choongyx"
        },
        "content": "            .withRemark(\"Weather was hot\").withCost(\"1.50\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    // Manually added - Spending\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final Spending AMY \u003d new SpendingBuilder().withName(VALID_NAME_AMY).withDate(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            .withRemark(VALID_REMARK_AMY).withCost(VALID_COST_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "    public static final Spending BOB \u003d new SpendingBuilder().withName(VALID_NAME_BOB).withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjendana"
        },
        "content": "            .withRemark(VALID_REMARK_BOB).withCost(VALID_COST_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final Reminder BILL_REMINDER \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final Reminder SCHOOL_FEE_REMINDER \u003d new ReminderBuilder().withDeadline(\"30/08/2020\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            .withRemark(\"Pay School Fee\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private TypicalSpendings() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns an {@code SpendingBook} with all the typical spendings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static SpendingBook getTypicalSpendingBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        SpendingBook ab \u003d new SpendingBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        for (Spending spending : getTypicalSpendings()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            ab.addSpending(spending);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ab.addReminder(BILL_REMINDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ab.setBudget(getTypicalBudget());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static List\u003cSpending\u003e getTypicalSpendings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choongyx"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA, CATFOOD, DESSERT, ENCYCLOPEDIA, FLIGHTTICKET, GLASSES));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static Budget getTypicalBudget() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        BudgetMonth temp \u003d new BudgetMonth(10, 2019);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return new Budget(10000, temp.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static double getSpendingSum() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // this is the sum of all values in getTypicalSpending"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        // in the month january 2019"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return 772.5;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 23,
      "jonathantjendana": 2,
      "Nanosync": 3,
      "choongyx": 22,
      "-": 26,
      "austinsantoso": 20
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/moneygowhere/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "package seedu.moneygowhere.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import static seedu.moneygowhere.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "import seedu.moneygowhere.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003c?import seedu.moneygowhere.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nanosync"
        },
        "content": "\u003cfx:root type\u003d\"seedu.moneygowhere.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Nanosync": 1,
      "-": 5
    }
  }
]
