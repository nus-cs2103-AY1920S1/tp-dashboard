[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d KeyboardFlashCards (KFC)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103T-T12-4/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103T-T12-4/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "https://ci.appveyor.com/project/LeowWB/main[image:https://ci.appveyor.com/api/projects/status/ulv9a15d5m66r77j/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T12-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T12-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/05d1413bcace464099c78365c60e6028[\"Codacy Badge\", link\u003d\"https://www.codacy.com/manual/keiteo/KFC?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY1920S1-CS2103T-T12-4/main\u0026amp;utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "image:https://api.netlify.com/api/v1/badges/95133284-8c5e-44f8-b437-958adf99f239/deploy-status[\"Netlify Status\", link\u003d\"https://app.netlify.com/sites/team-kfc/deploys\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "****"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "We’re hardworking studious students who want only the best-quality software for our learning. And we’re always on the go to achieve that perfect 5.0. That’s why we created KeyboardFlashCards: a highly efficient flashcard manager catered to the fastest typists, saving time for the optimal learning experience."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "****"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* This is a desktop Flashcard management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* It is developed mainly to assist students in learning and preparing for examinations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 3,
      "LeonardTay748": 3,
      "keiteo": 6,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    enableAssertions(true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    implementation group: \u0027org.apache.poi\u0027, name: \u0027poi-ooxml\u0027, version: \u00274.1.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    archiveName \u003d \u0027KeyboardFlashCards.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \u0027site-name\u0027: \u0027KeyboardFlashCards\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T12-4/main\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 4,
      "dalsontws": 2,
      "keiteo": 1,
      "-": 156
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Leow Wen Bin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::leowwb.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "{empty}[https://github.com/leowwb[github]] [\u003c\u003cleowwb#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Responsibilities: Integration, Git"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Yang Shuting"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::shutingy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "{empty}[http://github.com/shutingy[github]] [\u003c\u003cshutingy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Role: IntelliJ Expert +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Responsibilities: UI, Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Keith Teo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::keiteo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "{empty}[http://github.com/keiteo[github]] [\u003c\u003ckeiteo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Role: Documentation and Code Quality Lead +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Dalson Tan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::dalsontws.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "{empty}[http://github.com/dalsontws[github]] [\u003c\u003cdalsontws#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "Role: Project Management Lead +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Responsibilities: Deliverables \u0026 Deadlines"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Leonard Tay"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::leonardtay748.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "{empty}[http://github.com/leonardtay748[github]] [\u003c\u003cleonardtay748#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Role: Lead Tester"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 24,
      "dalsontws": 1,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T12-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* *Email us* : You can also reach us at `leowwb [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/rating/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d KeyboardFlashCards (KFC) - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "By: `T12-4`      Since: `Sept 2019`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Defines its _API_ in an `interface` with the same question as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CategoryListPane`, `CommandBox`, `ResultDisplay`, `FlashCardListPanel`, `StatusBarFooter`, `DeadlineListPane` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a flashCard)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFlashCard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "As a more OOP model, we can store a `Category` list in `Address Book`, which `FlashCard` can reference. This would allow `Address Book` to only require one `Category` object per unique `Category`, instead of each `Flashcard` needing their own `Category` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image:BetterModelClassDiagram.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//@@author shutingy"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// tag::addflashcard[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Add feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "The add feature allows the user to add flashcard with compulsory field of `QUESTION` and `ANSWER`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " `RATING` and `CATEGORY` are optional fields which the user can add to the flashcard later using the `edit` feature."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Following are the prefixes for each field: +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "- q\u003e : `QUESTION` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "- a\u003e : `ANSWER` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "- r\u003e : `RATING` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "- c\u003e : `CATEGORY`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Given below is an example usage scenario of `add` :"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "The user executes `add q\u003e1+1 a\u003e2 c\u003emath` to add new flashcard."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "The following sequence diagram shows how the add operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::AddSequenceDiagram.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "The add feature does not allow adding of duplicate flashcards."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "If the flashcard exists in the storage, an error will be shown."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an add command:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::AddActivityDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to implement add"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* **Alternative 1(current choice):** Use command `add` together with"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "prefixes like `q\u003e`, `a\u003e`, `r\u003e` and `c\u003e`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "** pros: Easier to implement."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "** cons: User might miss the prefixes hence adding wrong flashcards"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* **Alternative 2:** Make use of the GUI. After user execute `add` command,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " an **add flash card window** would pop up and there is segment for individual fields."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "** pros: More user friendly."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "** cons: Harder to implement."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// end::addflashcard[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author: dalsontws"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "// tag::deadline[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d\u003d Deadline feature"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "The deadline feature allows the user to add tasks with specific due dates, with a compulsory field"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "of `TASK` and `DUE DATE`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "Following are the prefixes for each field: +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "- t\u003e : `TASK` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "- d\u003e : `DUE DATE`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "- For `DUE DATE` : Date format must be in dd/MM/yyyy"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "i.e. 01/01/2019"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "Given below is an example usage scenario of `deadline` :"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "The user executes `deadline t\u003eComplete Homework d\u003e04/10/2019` to add new deadline to the task"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "of completing homework by the 4th October 2019."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "The following sequence diagram shows how the deadline operation works:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "image::DeadlineSequenceDiagram.png[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "The deadline feature does not allow adding of duplicate/identical deadlines."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "i.e. A duplicated/identical deadline is one that has identical fields for both the task and the due date."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "If the duplicated/identical deadline exists in the storage, an error will be shown."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a deadline command:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "image::DeadlineActivityDiagram.png[width\u003d320,height\u003d480]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to implement Deadline"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "* **Alternative 1(current choice):** Use command `deadline` together with"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "prefixes like `t\u003e` and `d\u003e`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Cons: User might miss the prefixes hence adding wrong deadlines"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "* **Alternative 2:** Make use of the GUI. after user execute `deadline` command,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " an **add deadline window** would pop up with a section for individual fields."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Pros: More user friendly."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Cons: Difficult to implement."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "// end::deadline[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "// tag::flashcardexportimport[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Exporting/Importing of FlashCards"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Our application currently supports the exporting of `FlashCards` to two file formats (`.docx` and `.json`) and importing of `FlashCards` from one"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "file format (`.json`). These mechanisms are primarily facilitated by the following classes:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `ExportCommand` -- Embodies an `export` command by the user; carries information about which `FlashCards` are to be exported, and to where"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `ExportCommandParser` -- Parses user input and uses it to construct an `ExportCommand` instance"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `ImportCommand` -- Embodies an `import` command by the user; carries information about where `FlashCards` are to be imported from"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `ImportCommandParser` -- Parses user input and uses it to construct an `ImportCommand` instance"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `ExportPath` -- Represents the path to a specific file - either absolute or relative to the application directory"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `ExportPathFactory` -- Parses the user-provided file path and creates instances of `ExportPath`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: The \"export\" in `ExportPath` is to be taken as a noun, not a verb. An `ExportPath`, therefore, is not the path that we export to, but the"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "path of an export. `ExportPaths` are used in both exporting and importing of files."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "`ExportPath` is an abstract class that follows the factory pattern. Each subclass of `ExportPath` represents the path to a specific file of a"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "specific extension (e.g. an instance of `DocumentPath` represents the path to a specific document). Instances of these subclasses are created by"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "`ExportPathFactory#getExportPath(String)`, which determines the appropriate subclass to create based on the extension of the provided file path String."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Once created, an `ExportPath` will expose the following relevant methods:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `getPath()` -- Returns a Java `Path` object that represents this `ExportPath`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `export(List\u003cFlashCard\u003e list)` -- Exports the given `List` of `FlashCards` to the file path embodied by this `ExportPath`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* `importFrom()` -- Attempts to import `FlashCards` from the file path represented by this `ExportPath`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "CAUTION: Not all `ExportPath` subclasses will implement the `importFrom()` method. `DocumentPath`, for example, does not - this is because documents are"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "relatively unstructured and impractical to import from, and there are other reasons for exporting to a document (e.g. to use as cheat sheet)."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Because `ExportPath` follows the factory pattern, any class that deals with `ExportPath` or its subclasses need not know which particular subclass it is"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "dealing with exactly. Each `ExportPath` subclass will implement its own `export` and `import` methods, which, when called, will perform the required operations"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "without any further hassle. Of course, due to the Separation of Concerns principle, the `ExportPath` subclasses will not handle these directly."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Instead, they will delegate the work to other utility classes, which, in turn, interface with the external libraries necessary to complete the task."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "TIP: The exporting/importing functionality is extremely easy to extend - support for new formats can be added simply through the creation of new subclasses of `ExportPath`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: All relevant classes can be found in the `seedu.address.model.export` package. The only exceptions are `ExportCommand`, `ImportCommand`, `ExportCommandParser`, and `ImportCommandParser`, which can be found in the `seedu.address.logic` package."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "The following table shows the classes and methods that you may have to deal with when exporting to or importing from each format:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"20%,35%,35%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|**File format**                        |Document           |JSON"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|**File extension**                     |`.docx`            |`.json`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|**`ExportPath` subclass**              |`DocumentPath`     |`JsonExportPath`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "a|**Export utility class and method**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "a|`DocumentExportUtil#exportFlashCardsToDocument( List\u003cFlashCard\u003e, DocumentPath)`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "a|`JsonExportUtil#exportFlashCardsToJson( List\u003cFlashCard\u003e, JsonExportPath)`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "a|**Import utility class and method**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "a|_None - importing not supported_"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "a|`JsonImportUtil#importFlashCardsFromJson( JsonExportPath)`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|**External library used**              |Apache POI         |Jackson"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "The number of classes supporting the import/export feature is rather large. The following class diagram will help to clarify the associations"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "between these classes:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ExportClassDiagram.png[height\u003d700]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_Figure 1: Class diagram showing the classes directly relevant to importing and exporting_"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "The following sequence diagram shows how the export operation works when the user tries to export to a document (`.docx`) file:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ExportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_Figure 2: Sequence diagram showing the process of exporting to a document file_"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: Due to a limitation of PlantUML, object lifelines in the diagram extend beyond the destroy markers. This, of course, should be ignored."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an export command:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ExportActivityDiagram.png[width\u003d500,height\u003d540]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_Figure 3: Activity diagram of when the user executes an export command_"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an import command:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ImportActivityDiagram.png[width\u003d500,height\u003d580]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_Figure 4: Activity diagram of when the user executes an import command_"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|_This section describes some of the design considerations that went into the implementation of this feature._"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of exporting functionality for different file formats"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* **Alternative 1 (current choice):** Have a single `export` command - leave file formats to be handled by underlying classes"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Pros: Is easier for user to remember; can easily be extended to support additional file formats"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Cons: Is harder to implement"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* **Alternative 2:** Have a separate command for exporting to each format (e.g. `exportdoc`, `exportjson`, etc.)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Pros: Is easier to implement"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Cons: Results in user having more commands to remember; new commands must be added to support new file formats"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: **Alternative 1** was preferred for its ease of extensibility."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Method of obtaining desired `FlashCards` for exporting"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* **Alternative 1:** Update the `Model` to show all desired `FlashCards`, then export all of said `FlashCards`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Pros: Is easy to implement as it makes use of existing logic in `Model`; user receives immediate visual feedback regarding which specific `FlashCards` were exported"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Cons: May cause confusion - `export` command does not imply that the selected `FlashCards` will also be shown to the user"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* **Alternative 2 (current choice):** Implement a new method in `Model` that returns the selected `FlashCards`, without updating the on-screen list"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Pros: Will not cause confusion to user - `export` command does exactly what one would expect it to do"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Cons: Is harder to implement and might result in duplication of logic"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: **Alternative 2** was preferred as it provides users with an experience closer to what they would expect."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Parsing of file path from user input"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: The original AddressBook application, from which KeyboardFlashCards was morphed, delimited its command arguments using slash-containing flags"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "(e.g. `c/CATEGORY`). This sometimes caused parsing problems due to the nature of file paths, which likewise contain slashes."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* **Alternative 1:** Read file path as-is, using the existing AddressBook parser"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Pros: Does not require further code changes"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Cons: Means that errors may occur for certain file paths"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* **Alternative 2:** Disallow user from selecting file path - instead, always export to and import from a specific directory"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Pros: Is somewhat easy to implement"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Cons: Requires user to navigate to the specified directory; requires a means of finding alternatives if the default directory does not exist"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* **Alternative 3:** Ask user to replace slashes in file path with another character"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Pros: Is very easy to implement"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Cons: Greatly inconveniences the user; extra work must be done to restore the input to the original file path"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* **Alternative 4 (current choice):** Overhaul the AddressBook parser to use `\u003e` rather than `/` as a delimiter"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Pros: Provides the user with the most power and convenience"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Cons: Might possibly break existing functional and test code; may require an additional button press from the user (`Shift`) in order to type `\u003e`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: **Alternative 4** was preferred as it provides users with the greatest overall convenience."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "// end::flashcardexportimport[]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "keiteo"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003d\u003d\u003d Test mode"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "keiteo"
        },
        "content": "Test mode allows users to start a flash card test from a selected list of tags. If no parameters are provided, all"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "keiteo"
        },
        "content": "flashcards contained in the system will be tested."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "keiteo"
        },
        "content": "This feature is supported by the following classes:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "keiteo"
        },
        "content": "* `AddressBookParser` to control the flow of command in the entire program."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "keiteo"
        },
        "content": "* `StartCommandParser` to parse arguments for StartCommand."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "keiteo"
        },
        "content": "* `ModelManager` which stores `FlashCardTestModel`, an aggregation of `FlashCards`, to be used for test mode."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "keiteo"
        },
        "content": "* `CategoryContainsAnyKeywordsPredicate` to search and generate a list of `FlashCards` with relevant tags."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "keiteo"
        },
        "content": "The following sequence diagram shows the intended case for the `start` command:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "keiteo"
        },
        "content": "image::StartSequenceDiagram.png[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "keiteo"
        },
        "content": "Aspect: Data structure to support `FlashCardTestModel`:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "keiteo"
        },
        "content": "* **Alternative 1 (Current choice):** `LinkedList` implementation:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "keiteo"
        },
        "content": "** Pros: Very efficient, with O(1) complexity removing the head of the list every time a question is tested."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "keiteo"
        },
        "content": "** Cons: Less memory efficient than `ArrayList`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "keiteo"
        },
        "content": "* **Alternative 2:** ArrayList implementation:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "keiteo"
        },
        "content": "** Pros: More memory efficient than `LinkedList`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "keiteo"
        },
        "content": "** Cons: To obtain the same performance as `LinkedList`, the last index/size of the `ArrayList` has to be constantly tracked."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "keiteo"
        },
        "content": "This slightly decreases code readability compared to the `LinkedList` implementation."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "keiteo"
        },
        "content": "* **Alternative 3:** Queue interface:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "keiteo"
        },
        "content": "** Pros: Use of `Queue` interface brings simplicity to code structure and readability while having the same performance"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "keiteo"
        },
        "content": "as a `LinkedList` implementation."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "keiteo"
        },
        "content": "** Cons: There will be potential coupling by using `Queue` instead of `List` interface."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "keiteo"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "// tag::statistics[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d\u003d Statistics feature"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The statistics feature allows users to view the overall statistics in a single pop-up window."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "This feature is supported by the following classes:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `StatsCommand` -- Carries the message to be displayed to the user."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `MainWindow` -- Opens a specific window as required."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `StatsWindow` -- Builds the statistics window display."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `Model` -- To provide a list of FlashCards given a rating predicate and the statistics from test mode."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `Stage` -- To create the pop-up window."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `Scene` -- To create an object that contains all the physical contents of the pop-up window."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `FlowPane` -- To create the layout of the pop-up window."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The sequence diagram below shows how the statistics operation works."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::StatisticsSequenceDiagram.png[width\u003d700]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The sequence diagram below details how these other classes (i.e. `Stage`, `Scene` and `FlowPane`) work with `StatsWindow` to create the statistics pop-up window."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::StatisticsShow.png[width\u003d600]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The activity diagram below summarizes what happens when a user executes the `stats` command."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::StatisticsActivityDiagram.png[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The following aspect was a consideration when designing the statistics feature."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Aspect: Methods to collect statistics"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* **Alternative 1 (Current choice):** Collect total number of good/hard/easy flashcards using predicates and those completed in test mode using the model."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Pros: This is easy to implement."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Cons: This requires extra lines of code to combine all the statistics."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* **Alternative 2:** Collect all statistics using the model."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Pros: This allows the collection of all statistics with minimal methods involved."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Cons: This requires constant updating of the model when new FlashCards are added, removed or edited."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Alternative 1 was chosen simply because it was easier to implement within the given period of time."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "// tag::help[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d\u003d Help feature"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The help feature allows a user to refer to a summary of commands supported by the application."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "This feature is supported by the following classes:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `HelpCommand` -- Carries the message to be displayed to the user."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `MainWindow` -- Opens a specific window as required."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `HelpWindow` -- Builds the help window display."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `Image` -- To convert a png file into an `Image` object."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `ImageView` -- To convert an `Image` object into a view."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `Stage` -- To display the view."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The sequence diagram below shows how the help operation works."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::HelpSequenceDiagram.png[width\u003d700]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The sequence diagram below details how these other classes (i.e. `Stage`, `Image` and `ImageView`) work with `HelpWindow` to create the help pop-up window."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::HelpShow.png[width\u003d500]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The activity diagram below summarizes what happens when a user executes the `help` command."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::HelpActivityDiagram.png[width\u003d300, height\u003d300]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The following aspect was a consideration when designing the help feature."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Aspect: Ways to display the command summary"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* **Alternative 1 (Current choice):** Display a snapshot with all the commands supported by the application."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Pros: The display can be quickly ammended with any addition or removal of command(s)."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Cons: The size of the snapshot displayed needs to be large to ensure sufficient picture resolution."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* **Alternative 2:** Display as text."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Pros: This results in a higher-resolution display of the command summary."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Cons: This requires changing the code."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Alternative 1 was chosen simply because it was easier to update the displayed command summary."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "// end::help[]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "* is a student that needs to revise for exams"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "* has a need to remember certain things"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*Value proposition*: learning platform to help students remember things easily, test their knowledge on certain subjects and at the same time be reminded on important study sessions and exams"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| Priority | As a... | I want to... | So that I can..."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | familiar with command line | type commands into a command line interface | perform tasks faster"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | university student | use flashcards to remember things easily | prepare better for my exams"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | meticulous student | set priorities of each subject I am studying  | study subjects in an orderly manner"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | forgetful student | set exam reminders   | remember when to start studying for my exams"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "| `* * *` | busy student  | exit the \u003c\u003ctest, test\u003e\u003e mode at any time  | perform other tasks"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | meticulous student  | search for a particular flashcard | review a specific flashcard whenever I want"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | new user | key in part of a command and let the program suggest the rest | key in commands more easily"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | student | see a timer next to each flashcard  | know how long I\u0026#39;ve spent answering the current question"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | student studying multiple subjects | categorize my flashcards under different modules | study them in such manner"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "| `* * *` | meticulous student | sort my subjects  | study subjects in an orderly manner"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | meticulous student | make use of colour codes  | highlight and know my weaknesses"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | advanced user | search through my content   | find subjects/topics easily"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | meticulous student,   | use the calendar to plan my study |  so that I will not miss any subject"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | meticulous student | view what tasks are overdue | know what I have not done"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "| `* * *` | meticulous student | a mock \u003c\u003ctest, test\u003e\u003e timer to simulate exam situation | be prepared for my upcoming exams"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | meticulous student | label difficult questions | the flash cards will appear more frequently for better knowledge absorption"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* * *` | student | move backward through the flashcards  | recall the previous question/answer"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* *`  | meticulous student | view the overall statistic | monitor my performance overtime"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* *`  | meticulous student | use the scoring system  | know how well prepared I am"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* *`  | As a user | hide the answer until I finish all the questions | remember better"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* *`  | meticulous student | check the correctness of my answer | know whether my answer was right"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* *`  | busy student | use the night mode  | study in a dark environment"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* *`  | student with many friends | export flashcards in a simple shareable format | share with my friends"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* *`  | artistic student | customise the theme | so that I would have a better user experience"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `* *`  | colour blind student | special accessibility options  | see my flashcards clearly"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `*` | competitive student | export and share my statistics with my friends | compare my performance to theirs"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `*` | forgetful student | key in my answer | see my own attempt to compare with the correct answer"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| `*` | competitive student | compare my results with others | so that I can be recognised for my skills and knowledge"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "(For all use cases below, the *System* is `KeyboardFlashCards` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "1.  User requests to list all flashcards in a \u003c\u003ccategory, category\u003e\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "2.  System shows a list of flashcards with index"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "3.  User requests to delete a flashcard in the list by providing \u003c\u003ccategory, category\u003e\u003e and index"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "4.  System deletes the flashcard"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* 3a. The given \u003c\u003ccategory, category\u003e\u003e is invalid."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* 3b. The given index is invalid."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** 3b1. System shows an error message."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Flashcard"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "1.  User requests to list all flashcards in a \u003c\u003ccategory, category\u003e\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "2.  System shows a list of flashcards with index"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "3.  User requests to edit a flashcard in the list by providing \u003c\u003ccategory, category\u003e\u003e and index"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "4.  System provides a pop-up for user to enter changes"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "5.  User enters changes"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "6.  System updates flashcard with the user input"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* 3a. The given \u003c\u003ccategory, category\u003e\u003e is invalid."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* 3b. The given index is invalid."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** 3b1. System shows an error message."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "keiteo"
        },
        "content": ".  Should be able to hold up to 2000 flash cards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "keiteo"
        },
        "content": ".  Should be able to hold up to 4000 (2 times that of flash cards?) tags without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "keiteo"
        },
        "content": ".  The programme should be able to respond within 1 second."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "keiteo"
        },
        "content": ".  The file export format to be shared with friends should be backwards compatible."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "keiteo"
        },
        "content": ".  The user interface should be intuitive enough for users familiar with the command line and/or vim."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "keiteo"
        },
        "content": ".  The source code should be open source."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "keiteo"
        },
        "content": ".  Flash card tests should be not be executable if there are no flash cards in the system."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "keiteo"
        },
        "content": ".  Old flash cards should still be working every time there\u0027s an update to the programme."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "[[category]] Category::"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "A tag that can be assigned to a flashcard for better categorisation"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "[[test]] Test::"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "The state in which the user is shown their flashcards one-by-one and in succession, allowing them to test their understanding of the covered content"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Deleting a flashCard"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Deleting a flashCard while all flashCards are listed"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".. Prerequisites: List all flashCards using the `list` command. Multiple flashCards in the list."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "   Expected: No flashCard is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 56,
      "LeowWB": 155,
      "LeonardTay748": 140,
      "dalsontws": 77,
      "keiteo": 43,
      "-": 302
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "|Attribute question |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 122
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `answer`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 215
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d KeyboardFlashCards - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "By: `CS2103T-T12-4`      Since: `Aug 2019`      Licence: `-`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "KeyboardFlashCards (KFC) is for those who prefer to use a desktop app to study using flashcards."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "More importantly, it is optimized for those who prefer to work with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, KFC"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "can help you manage your flashcards much more efficiently than traditional GUI apps."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Interested? You should be! KFC is perfect for NUS Computing students. We even have additional"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "features not available with most flashcard managers that we\u0027re sure you\u0027ll love. Enjoy!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ".  Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ".  Download the latest build keyboardflashcards.jar link:https://github.com/AY1920S1-CS2103T-T12-4/main/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your KFC app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::annotatedUi.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This section contains the features and their respective commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add \u003eQUESTION`, `QUESTION` is a parameter. The command format would thus be as such: `add q\u003e1+1`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Items in square brackets are optional e.g `q\u003eQUESTION [c\u003eCATEGORY]` can be used as `q\u003e1+1 c\u003emath` or as `q\u003e1+1`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Items with `…`​ after them can be inserted zero or more times e.g. `[c\u003eCATEGORY]...` can be used as `{nbsp}` (i.e. 0 times), `c\u003emath`, `c\u003emath c\u003eschool` etc."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `q\u003eQUESTION a\u003eANSWER`, `a\u003eANSWER q\u003eQUESTION` is also acceptable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Currently, our application does not support emoji."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Please also note the following icons, which will indicate points of interest throughout this document."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: A point of information that you may wish to note"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "TIP: A tip or suggestion"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "CAUTION: A cautionary word of advice"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// tag::flashcard[]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Add new flashcard: `add q\u003eQUESTION a\u003eANSWER [c\u003eCATEGORY]...`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows to you to add a new flashcard with question and answer. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "`add q\u003eWhat is CS2103T a\u003eSoftware engineering`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "You may also include the category for the flashcard. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "`add q\u003eWhat is CS2103T a\u003eSoftware engineering c\u003eCS2103T`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "To add:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `add q\u003eWhat is the use of checksum ? a\u003eTo detect \"error\"` and press **Enter**."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::AddStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will display the message: _\"New flashCard added: What is the use of checksum ? Answer: To detect \"error\"\"_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::AddStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". And you can check the new flashcard has been added to bottom of the flashcard list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::AddStep3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Edit an existing flashcard: `edit INDEX {fields wanted to edit}...`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows you to edit the flashcard with index corresponding to the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "display list with 1 or multiple fields +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "e.g: +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* `edit 7 c\u003eCS2105`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "To edit:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `edit 7 c\u003eCS2105` and press *Enter*."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::EditStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will display the message: _\"Edited FlashCard: What is the use of checksum ? Answer: To detect \"error\" Categories: [CS2105]\"_."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::EditStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". And you can see that the 7th flashcard has been edited on the flashcard list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::EditStep3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Delete flashcard: `delete INDEX`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows you the delete a"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "particular flashcard with the index"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "show on the flashcard list. e.g."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "`delete 7`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "To delete:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `delete 7` and press *Enter*."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::DeleteStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will show the message: _\"Deleted FlashCard: What is the use of checksum ? Answer: To detect \"error\" Categories: [CS2105]\"_"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::DeleteStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". And you can check the flashcard list that the flashcard has been deleted."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::DeleteStep3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Clear all the flashcard: `clear`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows you to delete all the flashcard in the storage."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "To clear:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `clear` and press *Enter*."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::ClearStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will show the message: -\"Flash card has been cleared!\"_"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "And you will see that all lists turn empty."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::ClearStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Search for flashcards: `search`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "The section will show you 3 methods to search for flashcards. Keywords are case-insensitive."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Current search function does not support fuzzy search, so remove punctuations when adding the flashcards or include the punctuations for searching"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d\u003d Either the question or the answer matches the keyword(s): \"search KEYWORD(S)\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows you to search for flashcards with the question or answer matching the keyword(s)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Multiple keywords are separated by a single space."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "To search:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `search pointer` and press *Enter*."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::SearchStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will show message: _\"2  flash cards listed!\"_ and the flashcard list will show the matching flashcards"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::SearchStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d\u003d Question matching the keyword(s) only: `searchqn KEYWORD(S)`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows you to search for flashcards with the question matching the keyword(s)."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Multiple keywords are separated by a single space."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "to search question:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `searchqn C` and press *Enter*."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::SearchqStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will show message: _\"2  flash cards listed!\"_ and the flashcard list will show the matching flashcards"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::SearchqStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d\u003d Answer matching the keyword(s) only: `searchans KEYWORD(S)`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows you to search for flashcards with the answer matching the keyword(s)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Multiple keywords are separated by a single space."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "to search for answer:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `searchans name` and press *Enter*."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::SearchaStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will show message: _\"1  flash cards listed!\"_ and the flashcard list will show the matching flashcards"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::SearchaStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d List all flashcards: `listall`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows you to lists all the flashcards in the storage."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "To listall:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `listall` and press *Enter*."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::ListAllStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will show message: _\"Listed all Flash Cards\"_."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::ListAllStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".  And the flashcard list will show all the flashcards. You can move your mouse"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "to the flashcard list and scroll up and down to view the flashcards."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::ListAllStep3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d List of category : `list CATEGORY`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command allows you to list all flashcards under one or multiple categories."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Multiple keywords are separated by a single space."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "to list category:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". Type `list CS2105` and press *Enter*."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::ListCatStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". The result box will show message: _\"1 flashcard is listed!\"_ ."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::ListCatStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ". And the flashcard list is updated."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "+"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::ListcatStep3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//end::flashcard[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Add general deadlines reminders: `deadline t\u003eTASK d\u003eDUE DATE`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "This command adds a general deadline into a list of deadlines. The list will be display on the right-side pane."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Note: [DUE DATE] has to be in dd/MM/yyyy format."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "You can refer to the example below:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "`deadline t\u003eCS2103 Exam d\u003e10/11/2019`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Key the above mentioned into the command box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::deadline-entry.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "After which, the result box will show the success message. The new deadline will now be shown at the right side-bar."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "image::deadline-entered.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d\u003d Set a reminder for a specific category of flashcards. [coming in v1.3]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "`remind Math 04/11 1030`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Remove deadline from list: `remove index`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Removes a specific deadline into the deadline list. The list on the right-side pane will no longer have the deadline."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "`remove 2`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Removes the deadline at the specified `INDEX` from the list. The index refers to the index number shown in the displayed deadline list on the right-sde pane. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003d\u003d\u003d Show monthly calendar with all deadlines: `calendar`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Shows the calendar filled with all deadlines in the month. The calendar will be shown as a new window pop-up."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "`calendar`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003d\u003d\u003d Test mode"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003d\u003d\u003d\u003d Start command"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "keiteo"
        },
        "content": "This command starts the flashcard test mode."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "keiteo"
        },
        "content": "`start`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "keiteo"
        },
        "content": "Starts the flashcard test from any specific category"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "keiteo"
        },
        "content": "`start [category]`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003d\u003d\u003d\u003d See flashcard answer"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "keiteo"
        },
        "content": "This command allows you to check the answer of the flashcard question."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "keiteo"
        },
        "content": "`ans`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003d\u003d\u003d\u003d Rate flashcard"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "keiteo"
        },
        "content": "This command rates the flashcard, depending on how well you answered the question i.e. easy, good, hard."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "keiteo"
        },
        "content": "`rate [rating]`, e.g. `rate hard`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003d\u003d\u003d\u003d End test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "keiteo"
        },
        "content": "You can stop the test any time simply by typing `end`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "// tag::flashcardexport[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Export flashcards to a file: `export c\u003eCATEGORY p\u003eFILE_PATH`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "You can use this command to export all your FlashCards in a particular category, to an external file."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "This may be useful if you wish to publish your FlashCards somewhere, print them out, or share them with a friend."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "The file will be located at the file path that you specify, and the format of the file will be inferred from the"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "extension. We currently support exporting to JSON (.json) and document (.docx) file formats. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Example: `export c\u003eCS2105 p\u003eC:\\Documents\\cs2105.json`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Suppose you have a category named `CS2105`, and you wanted to export the FlashCards in that category to an external file"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "(so you can share them with your friend). Here\u0027s how you would go about this:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Type the example command given above into the command box (`export c\u003eCS2105 p\u003eC:\\Documents\\cs2105.json`), as shown below."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ExportDemo1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Press **Enter** to execute the command. The results box will display a success message similar to the one shown in the screenshot below."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ExportDemo2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Navigate to the directory that you specified in the command (in this case, it would be \u0027C:\\Documents\u0027). Sure enough, your exported file is there!"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ExportDemo3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: Only the questions and answers of FlashCards will be exported."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "CAUTION: Your file paths must be comprised solely of alphanumeric characters, spaces, and the following characters: `~\\/-_!:[]()` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "It must also end in either `.json` or `.docx`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "CAUTION: Do note that some directories may be protected by your operating system (`C:\\` on Windows, `/` on Unix). You may not be allowed to save files to these directories."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "TIP: Use this to export your flashcards into an easily-printable cheat sheet! Use them for your assessments or"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "self-learning."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "// end::flashcardexport[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "// tag::flashcardimport[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Import flashcards from a JSON file: `import p\u003eFILE_PATH`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "You can use this command to import FlashCards from a file that you or someone else had exported to earlier."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "We currently only support importing from JSON (.json) files. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Example: `import p\u003eC:\\Downloads\\cs2105.json`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Suppose your friend has kindly exported some of his FlashCards for you to use. You have download the `.json` file that he sent you,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "and it\u0027s currently located at the following path: `C:\\Downloads\\cs2105.json`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Your next step is to get those FlashCards into your copy of KFC. Here\u0027s how you\u0027d go about this:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Type the example command given above into the command box (`import p\u003eC:\\Downloads\\cs2105.json`), as shown below."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ImportDemo1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Press **Enter** to execute the command. The results box will display a success message similar to the one shown in the screenshot below."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Furthermore, the category list on the left will now display the category of the newly-imported FlashCards!"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ImportDemo2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: Duplicate FlashCards will not be imported. You will be notified when we detect duplicate FlashCards in the file you provide."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "// end::flashcardimport[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Get the full list of commands: `help`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "This command allows you to view all the commands available in the application. +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Type `help` and press **Enter** to execute it."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::HelpCommand1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". The result box will display the message:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Opened help window."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::HelpCommandBox1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". A help window with all the commands will also be displayed:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::HelpWindow1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d View overall statistics: `stats`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "This command allows you to view three different type of statistics. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "`stats`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "To view statistics:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Type `stats` and press **Enter**."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::StatsCommand1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". The result box will display the message:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Statistics displayed"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::StatsCommandBox1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". A window will appear, displaying 3 charts:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::StatsWindow1.png[width\u003d\"850\", height\u003d\"250\"]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Starting from the left, the first chart displays the total number of FlashCards rated as good, hard and easy. The second chart displays the total number of FlashCards rated as good, hard and easy that are completed during test mode. The last chart displays your performance (in percentage) for all tests completed. Performance is determined by the ratio of FlashCards rated as good and easy to FlashCards rated as hard."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Note that the second and third chart will be empty if the `stats` command is executed before running at least one test, since both of these charts are dependent on the test mode. Furthermore, the statistics displayed on these two charts will reset when the application is closed."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//tag::theme[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Change color themes: `theme [THEMENAME]`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "This command allows you to change the theme of the app."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Follow are the current available themes"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* dark"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* light"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* pink"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* blue"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* hacker"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* nus"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "To change theme:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Type \"theme hacker\" and press *Enter*"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ThemeStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". The result box will show the message: _\"Theme changed to hackerTheme\"_ and the theme will be changed."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "+"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::ThemeStep2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//end::theme[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Flashcard data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//tag:: flashcard2[]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d\u003d Exit: `exit`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "This command allows you to exit the application."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "To exit:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". Type `exit` and press *Enter*."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ". The application window will close by itself."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//end::flashcard2[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*Q*: How will the program know the correct answer to the questions? +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*A*: You have to key in the answer manually when you create the question - it’s similar to a real set of flashcards."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*Q*: How does the reminder system work? +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*A*: You select a category and a date, and the program will remind you to revise that category when the date comes."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*Q*: How will the program know if my answer is good or bad? +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*A*: It doesn’t know - you have to decide for yourself whether you are satisfied with your answer."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*Q*: Will I be able to resume the test from where I left off after I have stopped? +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*A*: No. The program does not support that."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*Q*: Can I change the category of a flashcard? +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*A*: Yes, it will be one of the fields you can change when you edit the flashcard. Do note that after you change the category, you will have to refer to it using its new category and ID."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*Q*: Can I use my mouse to interact with the user interface? +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*A*: Yes, but only to a very small extent, like closing the window. This application is targeted primarily at keyboard users."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*Q*: What if I forget the format of a command’s arguments? +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*A*: Don’t worry! Just try your best. If the format you\u0027ve provided is wrong, you will be prompted with the correct format."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Add new flashcard - `add q\u003eQUESTION a\u003eANSWER [c\u003eCATEGORY]…​` +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g. `add q\u003e1+1 a\u003e2`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Set a flashcard as bad - `bad INDEX` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `bad 2`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Show Calendar of Deadlines - `calendar`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Clear all the flashcard - `clear` +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g. `clear`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Edit an existing flashcard - `edit INDEX {fields wanted to edit}…​` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `edit 2 c\u003eCS2103`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Add a new Deadline - `deadline t\u003eTASK d\u003eDUE DATE` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `deadline t\u003eMath Test d\u003e01/10/2019`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Delete an existing flashcard - `delete INDEX` +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `delete 10`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Export all flashcards under a specific category, to a specific filepath - `export c\u003eCATEGORY p\u003eFILE_PATH` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `export c\u003eCS2105 p\u003eC:\\Users\\User\\Documents\\cheat_sheet.docx`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Get full list of commands - `help` +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `help`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Import flashcards from a JSON file - `import p\u003eFILE_PATH` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `import p\u003eC:\\Users\\User\\Documents\\flashcards.json`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* List all flashcards - list"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* List all flashcards under a specific category - `list [category]` +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `list Math`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* List all flashcards - \u0027listall\u0027"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Set user preference for reminders - `remind CATEGORY DD/MM HHmm` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `remind Math 04/10 1230`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Remove Deadline from list - `remove INDEX` +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `remove 2`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Search of flashcards - `search`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** `search` KEYWORD(S)  e.g `search c`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** `searchqn` KEYWORD(S)  e.g `searchqn pointer`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** `searchans` KEYWORD(S)  e.g `searchans name`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Start a certain topic of flashcards - `start KEYWORD` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "e.g.  `start Mathematics`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* View overall statistics - `stats`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Change theme - `theme dark`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* Stop flashcard test - `end`"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 182,
      "LeowWB": 233,
      "dalsontws": 11,
      "keiteo": 17,
      "-": 56
    }
  },
  {
    "path": "docs/diagrams/AddActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ":User executes add command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "if () then ([question and answer"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " prefixes are present])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    :Parse the input string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    to respective fields;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    :Create FlashCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    if () then([flashCard does"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    not existed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    in the storage]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    )"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      :Add FlashCard to the storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      :Update the GUI flashCard list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      :display error message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  :display error message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "stop"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 26
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "participant \":KeyboardFlashCardsParser\" as KeyboardFlashCardsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "participant \":FlashCard\" as FlashCard LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "[-\u003e LogicManager : execute(\"add q\u003e1+1 a\u003e2 c\u003emath\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "LogicManager -\u003e KeyboardFlashCardsParser : parseCommand(\"add q\u003e1+1 a\u003e2 c\u003emath\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCardsParser -\u003e AddCommandParser : AddCommandParser()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommandParser --\u003e KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCardsParser -\u003e AddCommandParser : parse(\"q\u003e1+1 a\u003e2 c\u003emath\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "create FlashCard"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommandParser -\u003e FlashCard: FlashCard(qn, ans, r, c)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate FlashCard"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCard --\u003e AddCommandParser: fc"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate FlashCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommandParser -\u003e AddCommand: AddCommand(fc)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommandParser --\u003e KeyboardFlashCardsParser : a"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommandParser -[hidden]-\u003e KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCardsParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "LogicManager -\u003e AddCommand : execute(model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommand -\u003e Model : addFlashCard(fc)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommand -\u003e CommandResult: CommandResult()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "CommandResult --\u003e AddCommand : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 79
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteFlashCard(fc)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveKeyboardFlashCards(keyboardFlashCards)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/BadFlashCardActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ":User rates flashcard as \"Bad\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "if () then ([Flashcard is not in \"bad-list\"])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    :Create flashcard entry in \"bad-list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    :Add list as deadline on GUI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    if () then([No existing \"bad-list\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     in deadline list]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    )"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      :Create new Deadline with list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      of \"bad\" flashcards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      :Add Deadline to the storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      :Update the GUI Deadline list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      with due date of 3 days later;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      :add flashcard entry in existing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      \"bad-list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "  :display error message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 27
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCards *-right-\u003e \"1\" UniqueFlashCardList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCards *-right-\u003e \"1\" UniqueCategoryList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "UniqueCategoryList -[hidden]down- UniqueFlashCardList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "UniqueCategoryList -[hidden]down- UniqueFlashCardList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "UniqueCategoryList *-right-\u003e \"*\" Category"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "UniqueFlashCardList o-right-\u003e FlashCard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCard o-up-\u003e \"*\" Category"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCard *--\u003e Question"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCard *--\u003e Answer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCard *--\u003e rating"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 10,
      "-": 10
    }
  },
  {
    "path": "docs/diagrams/DeadlineActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ":User executes Deadline command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "if () then ([task and due date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " prefixes are present])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    :Parse the input string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    to respective fields;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    :Create Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    if () then([Exact Deadline does"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    not exist in storage ])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      :Add Deadline to Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      :Update GUI Deadline list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      :Display error message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "  :Display error message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 24
    }
  },
  {
    "path": "docs/diagrams/DeadlineSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "participant \":DeadlineCommandParser\" as DeadlineCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "participant \":DeadlineCommand\" as DeadlineCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "participant \":Deadline\" as Deadline LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "[-\u003e LogicManager : execute(\"deadline t\u003eTask d\u003e01/01/2019\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"deadline t\u003eTask d\u003e01/01/2019\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "create DeadlineCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "AddressBookParser -\u003e DeadlineCommandParser : DeadlineCommandParser()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate DeadlineCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate DeadlineCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "AddressBookParser -\u003e DeadlineCommandParser : parse(\"t\u003eTask d\u003e01/01/2019\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate DeadlineCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommandParser -\u003e ParserUtil: parseTask(\"Task\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "ParserUtil --\u003e DeadlineCommandParser: Task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommandParser -\u003e ParserUtil: parseDueDate(\"01/01/2019\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "ParserUtil --\u003e DeadlineCommandParser: DueDate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "create Deadline"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommandParser -\u003e Deadline: FlashCard(Task, DueDate)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate Deadline"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "Deadline --\u003e DeadlineCommandParser: deadline"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate Deadline"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "create DeadlineCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommandParser -\u003e DeadlineCommand: DeadlineCommand(deadline)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate DeadlineCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommand --\u003e DeadlineCommandParser : deadline"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate DeadlineCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommandParser --\u003e AddressBookParser : deadline"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate DeadlineCommandParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "destroy DeadlineCommandParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "AddressBookParser --\u003e LogicManager : deadline"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "LogicManager -\u003e DeadlineCommand : execute(model)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate DeadlineCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommand -\u003e Model : addDeadline(deadline)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "Model --\u003e DeadlineCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommand -\u003e CommandResult: CommandResult()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "CommandResult --\u003e DeadlineCommand : result"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "DeadlineCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate DeadlineCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 92
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "participant \":KeyboardFlashCardsParser\" as KeyboardFlashCardsParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "LogicManager -\u003e KeyboardFlashCardsParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "activate KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCardsParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DeleteCommandParser --\u003e KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCardsParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DeleteCommandParser --\u003e KeyboardFlashCardsParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCardsParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "deactivate KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DeleteCommand -\u003e Model : deleteFlashCard(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ExportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ":User executes export command, with a specified category and file path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "if () then ([file path is valid and represents\\na document or JSON file])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    if () then ([Category exists and is non-empty])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        :Obtain all FlashCards from category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if () then ([file path is for document file])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            :Create a new document;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        else ([file path is for a JSON file])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            :Create a new JSON file;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        repeat"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            :Write FlashCard to file;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        repeat while () is ([more FlashCards\\nto write])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        -\u003e[all FlashCards written];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        :Save file to given file path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        :Display success message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        :Display error message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    :Display error message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "endif"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "stop"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 29
    }
  },
  {
    "path": "docs/diagrams/ExportClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Package Logic \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class ImportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class ExportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class ImportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Abstract Class Command LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class Parser \u003c\u003cinterface\u003e\u003e LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Command \u003c|- ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Command \u003c|- ImportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Parser \u003c|.. ExportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Parser \u003c|.. ImportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Parser .. Command LOGIC_COLOR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommandParser .. ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ImportCommandParser .. ImportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Package seedu.address.model.export \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class DirectoryPath"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class DocumentExportUtil"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class DocumentFilePath"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class DocumentPath"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Abstract Class ExportPath"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class ExportPathFactory"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class JsonExportFilePath"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class JsonExportPath"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class JsonExportUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    Class JsonImportUtil"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportPath \u003c|- DocumentPath"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportPath \u003c|- JsonExportPath"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentPath *-- DocumentFilePath"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentPath *-- DirectoryPath"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "JsonExportPath *-- JsonExportFilePath"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "JsonExportPath *-- DirectoryPath"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportPathFactory .up. ExportPath"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentExportUtil .. DocumentPath"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "JsonExportUtil .. JsonExportPath"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "JsonImportUtil .. JsonExportPath"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand \"0..1\" ------\u003e \"1\" ExportPath LOGIC_COLOR"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ImportCommand \"0..1\" --\u003e \"1\" ExportPath LOGIC_COLOR"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommandParser .. ExportPath LOGIC_COLOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ImportCommandParser .. ExportPath LOGIC_COLOR"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 65
    }
  },
  {
    "path": "docs/diagrams/ExportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "participant \":ExportCommand\" as ExportCommand LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "participant \":DocumentPath\" as DocumentPath MODEL_COLOR_T3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:DocumentExportUtil\" as DocumentExportUtil MODEL_COLOR_T4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "box org.apache.poi.xwpf.usermodel EXTERNAL_LIBRARY_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "participant \":XWPFDocument\" as XWPFDocument EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "[-\u003e ExportCommand : execute(model)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand -\u003e ExportCommand : categoryToPredicate(category)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand \u003c-- ExportCommand : predicate"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand -\u003e Model : getFilteredFlashCardListNoCommit(predicate)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand \u003c-- Model : list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand -\u003e ExportCommand : wipeTransientData(list)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand \u003c-- ExportCommand : list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand -\u003e DocumentPath : export(list)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "activate DocumentPath"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentPath -\u003e DocumentExportUtil : exportFlashCardsToDocument(list, documentPath)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "activate DocumentExportUtil"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "create XWPFDocument"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentExportUtil -\u003e XWPFDocument : XWPFDocument()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "activate XWPFDocument"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentExportUtil \u003c-- XWPFDocument : document"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "deactivate XWPFDocument"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "loop while there are still FlashCards to write"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    DocumentExportUtil -\u003e XWPFDocument : createParagraph()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    activate XWPFDocument"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    DocumentExportUtil \u003c-- XWPFDocument"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    deactivate XWPFDocument"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentExportUtil -\u003e DocumentExportUtil : writeDocumentToFile(document, documentPath)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "activate DocumentExportUtil"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentExportUtil \u003c-- DocumentExportUtil"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "deactivate DocumentExportUtil"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "DocumentPath \u003c-- DocumentExportUtil"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "deactivate DocumentExportUtil"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "destroy XWPFDocument"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "ExportCommand \u003c-- DocumentPath"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "deactivate DocumentPath"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "[\u003c-- ExportCommand : commandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "destroy DocumentPath"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 74
    }
  },
  {
    "path": "docs/diagrams/HelpActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":User executes help command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":Gets image of command summary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":Displays image ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "stop"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 10
    }
  },
  {
    "path": "docs/diagrams/HelpSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":HelpCommand\" as HelpCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":HelpWindow\" as HelpWindow UI_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box JavaFx EXTERNAL_LIBRARY_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":Image\" as Image EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":ImageView\" as ImageView EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":Stage\" as Stage EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[-\u003e LogicManager : parseCommand(stats)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    LogicManager -\u003e HelpCommand : execute(model)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    activate HelpCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        LogicManager \u003c-- HelpCommand : CommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    deactivate HelpCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[-\u003e MainWindow : executeCommand(stats)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "       MainWindow -\u003e MainWindow : handleHelp()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "           activate MainWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow -\u003e HelpWindow : isShowing()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate HelpWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow \u003c-- HelpWindow : result"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate HelpWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                alt result \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow -\u003e HelpWindow : show()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                ref over HelpWindow, Stage : show help"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow \u003c-- HelpWindow :"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow \u003c-- MainWindow :"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "           deactivate MainWindow"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "           [\u003c-- MainWindow :"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "           deactivate MainWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "       end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 59
    }
  },
  {
    "path": "docs/diagrams/HelpShow.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":HelpWindow\" as HelpWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box JavaFx EXTERNAL_LIBRARY_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":Image\" as Image EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":ImageView\" as ImageView EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":Stage\" as Stage EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "group sd show help"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "-\u003e HelpWindow : show()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                HelpWindow -\u003e Image : Image()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Image"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                HelpWindow \u003c-- Image : image"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Image"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                HelpWindow -\u003e ImageView : setImage(image)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate ImageView"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                HelpWindow \u003c-- ImageView :"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate ImageView"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                HelpWindow -\u003e Stage : getRoot()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Stage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                HelpWindow \u003c-- Stage : root"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Stage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                HelpWindow -\u003e Stage : show()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Stage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                HelpWindow \u003c-- Stage :"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Stage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                \u003c-- HelpWindow :"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate HelpWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 43
    }
  },
  {
    "path": "docs/diagrams/ImportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ":User executes import command, with a specified file path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "if () then ([file path is valid and represents a JSON file])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    :Open JSON file;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    if () then ([JSON file is valid\\nand non-empty])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            repeat"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            :Read next FlashCard from file;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            if () then ([User already has a\\ncopy of this FlashCard])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                :Copy FlashCard into user\u0027s data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            repeat while () is ([there are more\\nFlashCards to read])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            -\u003e[else];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        :Display success message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        :Display error message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    :Display error message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 27
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "skinparam linetype ortho"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "LogicManager --\u003e\"1\" KeyboardFlashCardsParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCardsParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 4,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Interface ReadOnlyKeyboardFlashCards \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class KeyboardFlashCards"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class ReadOnlyKeyboardFlashCards"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Package Flashcard {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class Flashcard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class Question"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class Answer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class Rating"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class UniqueFlashcardList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Package Category {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class UniqueCategoryList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class Category"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Package Deadline  {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class Deadline"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class DueDate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class UniqueDeadlineList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Package Export {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class DirectoryPath"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class DocumentFilePath"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class DocumentPath"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class HiddenOutside1 #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class HiddenOutside2 #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class HiddenOutside3 #FFFFFF"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "HiddenOutside1 ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "HiddenOutside2 ..\u003e DocumentPath"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "HiddenOutside3 ..\u003e Deadline"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "ReadOnlyKeyboardFlashCards \u003c|..KeyboardFlashCards"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "ModelManager o--\u003e \"1\" KeyboardFlashCards"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "KeyboardFlashCards *--\u003e \"1\" UniqueFlashcardList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "UniqueFlashcardList o--\u003e \"*\" Flashcard"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Flashcard *--\u003e Question"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Flashcard *--\u003e Answer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Flashcard *--\u003e Rating"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Flashcard *--\u003e \"*\" Category"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Question -[hidden]right-\u003e Answer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Answer -[hidden]right-\u003e Rating"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "ModelManager --\u003e\"1\" Flashcard : filtered list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "UniqueCategoryList o--\u003e \"*\" Category"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DocumentPath *--\u003e DocumentFilePath"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DocumentPath *--\u003e DirectoryPath"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Deadline *--\u003e Task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Deadline*--\u003e DueDate"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "UniqueDeadlineList o-up-\u003e \"*\" Deadline"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 50,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/StartSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "participant \":StartCommandParser\" as StartCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "participant \"d:StartCommand\" as StartCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "[-\u003e LogicManager : execute(\"start cs2103\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"start cs2103\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "AddressBookParser -\u003e AddressBookParser : parseNormalCommand(\"start cs2103\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "create StartCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "AddressBookParser -\u003e StartCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate StartCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate StartCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "AddressBookParser -\u003e StartCommandParser : parse(\"cs2103\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate StartCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "create StartCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommandParser -\u003e StartCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate StartCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommand --\u003e StartCommandParser : d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate StartCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate StartCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keiteo"
        },
        "content": "AddressBookParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keiteo"
        },
        "content": "destroy StartCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keiteo"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keiteo"
        },
        "content": "LogicManager -\u003e StartCommand : execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate StartCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommand -\u003e StartCommand : searchTag(\"cs2103\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate StartCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommand --\u003e StartCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate StartCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommand -\u003e Model : initialiseTestModel()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keiteo"
        },
        "content": "Model --\u003e StartCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommand -\u003e AddressBookParser : startTestMode()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keiteo"
        },
        "content": "AddressBookParser --\u003e StartCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommand -\u003e Model : getTestQuestion()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keiteo"
        },
        "content": "Model --\u003e StartCommand : question"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keiteo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keiteo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keiteo"
        },
        "content": "CommandResult --\u003e StartCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keiteo"
        },
        "content": "StartCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate StartCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keiteo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keiteo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keiteo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "keiteo": 89
    }
  },
  {
    "path": "docs/diagrams/StatisticsActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":User executes stats command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":Gets an updated FlashCard list based on given predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":Gets the size of the list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":Number of predicate++ ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "repeat while () is  ([number of predicate \u003c 3])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":Gets performance data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":Gets test statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":Displays all statistics ;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 16
    }
  },
  {
    "path": "docs/diagrams/StatisticsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":StatsCommand\" as StatsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":StatsWindow\" as StatsWindow UI_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box MODEL MODEL_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box JavaFx EXTERNAL_LIBRARY_COLOR_T1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":Scene\" as Scene EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":FlowPane\" as FlowPane EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":Stage\" as Stage EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[-\u003e LogicManager : parseCommand(stats)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    LogicManager -\u003e StatsCommand : execute(model)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    activate StatsCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        LogicManager \u003c-- StatsCommand : CommandResult"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    deactivate StatsCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "[-\u003e MainWindow : executeCommand(stats)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "       MainWindow -\u003e MainWindow : handleStats()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "           activate MainWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow -\u003e StatsWindow : isShowing()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate StatsWindow"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow \u003c-- StatsWindow : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate StatsWindow"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                alt result \u003d false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow -\u003e Logic :"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                Logic -\u003e LogicManager : getModel()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                Logic \u003c-- LogicManager : model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                Logic -\u003e MainWindow : model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow -\u003e StatsWindow : show(model)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                ref over StatsWindow, Model, Scene, Stage : show statistics"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow \u003c-- StatsWindow :"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                MainWindow \u003c-- MainWindow :"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "           deactivate MainWindow"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "           [\u003c-- MainWindow :"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "           deactivate MainWindow"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "       end"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 71
    }
  },
  {
    "path": "docs/diagrams/StatisticsShow.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":StatsWindow\" as StatsWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box MODEL MODEL_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "box JavaFx EXTERNAL_LIBRARY_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":Scene\" as Scene EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":FlowPane\" as FlowPane EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "participant \":Stage\" as Stage EXTERNAL_LIBRARY_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "group sd show statistics"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "-\u003e StatsWindow : show(model)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                loop for each rating"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate StatsWindow"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow -\u003e Model : updateFilteredFlashCardList(rating)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow \u003c-- Model : ObservableList\u003cFlashCard\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow -\u003e Model : size()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow \u003c-- Model : number"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                end"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow -\u003e Model : getPerformance()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow \u003c-- Model : ArrayList\u003cInteger\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow -\u003e Model : getTestStats()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow \u003c-- Model : stats[]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow -\u003e FlowPane : FlowPane()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate FlowPane"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow \u003c-- FlowPane : root"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate FlowPane"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow -\u003e Scene : Scene(root)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Scene"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow \u003c-- Scene : scene"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Scene"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow -\u003e Stage : setScene(scene)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                activate Stage"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                StatsWindow \u003c-- Stage :"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate Stage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                \u003c-- StatsWindow :"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                deactivate StatsWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "end"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 64
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Interface KeyboardFlashCardsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class JsonKeyboardFlashCardsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "StorageManager o--\u003e KeyboardFlashCardsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "JsonKeyboardFlashCardsStorage .left.|\u003e KeyboardFlashCardsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "JsonKeyboardFlashCardsStorage .right.\u003e JsonSerializableKeyboardFlashCardsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "JsonSerializableKeyboardFlashCardsStorage .right.\u003e JsonAdaptedFlashcard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "JsonSerializableKeyboardFlashCardsStorage ..\u003e JsonAdaptedDeadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "JsonAdaptedFlashcard ..\u003e JsonAdaptedCategory"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 8,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "skinparam linetype ortho"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class FlashCardListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class FlashCardPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class CategoryListPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class CategoryPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class DeadlineListPanel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Class DeadlinePanel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "MainWindow *-down-\u003e CategoryListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "MainWindow *-down-\u003e FlashCardListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "MainWindow *-down-\u003e DeadlineListPanel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "CategoryListPanel -down-\u003e CategoryPanel"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCardListPanel -down-\u003e FlashCardPanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DeadlineListPanel -down-\u003e DeadlinePanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCardListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCardPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "CategoryPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "CategoryListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DeadlinePanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DeadlineListPanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCardPanel ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "FlashCardListPanel -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "DeadlineListPanel -[hidden]left- FlashCardListPanel"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "CategoryListPanel -[hidden]left- DeadlineListPanel"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 24,
      "-": 50
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "!define UI_COLOR_T5 #C67CFE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "!define UI_COLOR_T6 #9A16FE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define COMMONS_COLOR #b06300"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define COMMONS_COLOR_T1 #ffd39e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define COMMONS_COLOR_T2 #a88e6d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define COMMONS_COLOR_T3 #ff8f00"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define COMMONS_COLOR_T4 #593200"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define EXTERNAL_LIBRARY_COLOR #420061"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define EXTERNAL_LIBRARY_COLOR_T1 #e09eff"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define EXTERNAL_LIBRARY_COLOR_T2 #7800b0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define EXTERNAL_LIBRARY_COLOR_T3 #845c96"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "!define EXTERNAL_LIBRARY_COLOR_T4 #7700ff"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "LeowWB": 12,
      "-": 75
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "ecp -\u003e ec ++: index, editFlashCardDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 20
    }
  },
  {
    "path": "docs/team/LeonardTay748.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d Leonard Tay - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d PROJECT: KeyboardFlashCards"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "This project was part of an assignment for a second year software engineering module (2103T) offered by the National University of Singapore (NUS). The assignment required my team which consists of 5 members to morph an Address Book application (which manages contact information of people) to suit our newly identified users, within a period of 6 weeks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The target user group that we have selected are software engineering students like ourselves, who are more familiar and prefer to use a Command Line. As students, we take multiple modules each semester and in doing so, it can be difficult to organize notes for revision. Thus, we decided to provide a single platform for software engineering students to organize their learning resources into flashcards with each flashcard consisting of a question, an answer, and a rating."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "This is what the Graphical User Interface (GUI) of our application looks like."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::annotatedUi.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "My role in the team was to design and write the codes for the statistics and help features which uses the commands `stats` and `help` respectively. I will go into more detail about my contributions to the project in the following sections."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "**Note the formatting used in this document**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* Commands are highlighted: `help`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* Class and objects are highlighted with italic font: `_class_`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* *Major enhancement*: Added a statistics feature."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** *What it does:* It allows the user to view three different types of statistics in a single pop-up window. The statistics are displayed in the form of two bar charts and a line chart. The first bar chart shows the number of FlashCards that are rated as good, hard and easy. The second bar chart shows the number of FlashCards (good, hard and easy) that are completed during the test mode. Lastly, the line chart shows the performance of the user, displayed in percentage format. The performance takes into consideration the ratings of the FlashCards. If there are greater number of FlashCards rated as good or easy, the performance shown will be higher."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** *Justification:* This feature improves the product significantly because a user would not have to painstakingly keep track of the number of FlashCards that have ratings. The user can also identify if his/her knowledge has improved after each test, which is a good indication of exam readiness."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** *Highlights:* This enhancement required a synchronisation between the test mode and the statistics feature itself. The test mode was completed by another one of my team members. This made it harder to integrate my feature since it required an in-depth understanding of how the test mode works. This also required me to add codes within the framework of the test mode feature."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* *Minor enhancement*: Modified the exisiting help feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** *What it does:* It displays a full list of commands that are supported by our application, instead of providing a url to the user that directs him/her back to the user guide page."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** *Justification:* My experience with the help feature in various applications led me to believe that providing a url link back to the user guide does not serve a good purpose. If the user is just looking for the list of commands available, then it would be a time-consuming process."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* *Code contributed*:  [https://github.com/LeonardTay748/main/blob/master/src/main/java/seedu/address/ui/StatsWindow.java[Statistics Window]] [https://github.com/LeonardTay748/main/blob/master/src/main/java/seedu/address/ui/HelpWindow.java[Help Window]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* *Other contributions*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Project management"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*** Ensure that the application is tested"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*** Ensure that the displayed messages in the application follows the standard agreed by our team"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Enhancements to existing features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*** Added more statistics (pull request https://github.com/AY1920S1-CS2103T-T12-4/main/pull/169[#169])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*** Standardised display output (pull request https://github.com/AY1920S1-CS2103T-T12-4/main/pull/169[#169])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Documentation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*** Made significant changes to existing contents of the User Guide and Developers Guide: https://github.com/AY1920S1-CS2103T-T12-4/main/pull/154/files[#154], https://github.com/AY1920S1-CS2103T-T12-4/main/pull/169[#169]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Community"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*** PRs reviewed: https://github.com/AY1920S1-CS2103T-T12-4/main/pull/150[#150]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: https://github.com/LeonardTay748/ped/issues/2[#2], https://github.com/LeonardTay748/ped/issues/3[#3], https://github.com/LeonardTay748/ped/issues/6[#6], https://github.com/LeonardTay748/ped/issues/7[#7], https://github.com/LeonardTay748/ped/issues/8[#8], https://github.com/LeonardTay748/ped/issues/9[#9], https://github.com/LeonardTay748/ped/issues/10[#10], https://github.com/LeonardTay748/ped/issues/11[#11]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "This section will explain the operation of two features that I have implemented, starting with the statistics feature and followed by the help feature."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Viewing the statistics: `stats`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "This command displays three types of statistics to the user when the command `stats` is executed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "To view statistics:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ". Type `stats` into the command box, and press *enter* to execute it."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::StatsCommand1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ". The result box will display the message \"Statistics displayed\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::StatsCommandBox1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ". A pop-up window will appear, displaying three different charts. However, the middle and rightmost charts will be empty initially because they are synchronised with the test feature, and will only display values after a test has been ran."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::StatsWindow1.png[width\u003d\"850\", height\u003d\"250\"]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The following portion is an explanation of how the help feature operates."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Help feature: `help`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "This commmand displays to the user, a full list of commands supported by the application, when the command `help` is executed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "To get help:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ". Type `help` into the command box, and press *enter* to execute it."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::HelpCommand1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ". The result box will display the message \"Opened help window.\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::HelpCommandBox1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ". A pop-up window will appear, displaying a summary of all the commands available to the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "+"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::HelpWindow1.png[]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The statistics feature is facilitated by the following classes"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_StatsCommand_` -- Returns the message to be displayed on the command box."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_MainWindow_` -- Checks if the statistics window should be opened."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_StatsWindow_` -- Builds the statistics window display."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_Model_` -- Provides the statistics needed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_Scene_` -- To create an object that contains all the physical contents of the pop-up window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_FlowPane_` -- To create the layout of the pop-up window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_Stage_` -- To display the window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Given below is a sequence diagram on the operation of the statistics feature."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::StatisticsSequenceDiagram.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The sequence diagram below details how these other classes (i.e. `_Stage_`, `_Scene_` and `_FlowPane_`) work with `_StatsWindow_` to create the statistics pop-up window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::StatisticsShow.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The next portion explains the help feature."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The help feature is facilitated by the following classes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_HelpCommand_` -- Returns the message to be displayed on the command box."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_MainWindow_` -- Checks if the help window should be opened."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_HelpWindow_` -- Builds the help window display."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_Image_` -- To convert a png file into an `_Image_` object."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_ImageView_` -- To convert an `_Image_` object into a view."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* `_Stage_` -- To display the window."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Given below is a sequence diagram on the operation of the help feature."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::HelpSequenceDiagram.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The sequence diagram below details how these other classes (i.e. `_Stage_`, `_Image_` and `_ImageView_`) work with `_HelpWindow_` to create the help pop-up window."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "image::HelpShow.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The following aspect was a consideration when designing the statistics feature."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Aspect: Methods to collect statistics"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* **Alternative 1 (Current choice):** Collect total number of good/hard/easy flashcards using predicates and those completed in test mode using the model."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Pros: This is easy to implement."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Cons: This requires extra lines of code to combine all the statistics."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* **Alternative 2:** Collect all statistics using the model."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Pros: This allows the collection of all statistics with minimal methods involved."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Cons: This requires constant updating of the model when new FlashCards are added, removed or edited."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Alternative 1 was chosen simply because it was easier to implement within the given period of time."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "The following aspect was a consideration when designing the help feature."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Aspect: Ways to display the command summary"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* **Alternative 1 (Current choice):** Display a snapshot with all the commands supported by the application."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Pros: The display can be quickly ammended with any addition or removal of command(s)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Cons: The size of the snapshot displayed needs to be large to ensure sufficient picture resolution."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "* **Alternative 2:** Display as text."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Pros: This results in a higher-resolution display of the command summary."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "** Cons: This requires changing the code."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "Alternative 1 was chosen simply because it was easier to update the displayed command summary."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 182
    }
  },
  {
    "path": "docs/team/dalsontws.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d Dalson Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d PROJECT: KeyboardFlashCards"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "This project portfolio..."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 72
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "AddressBook - Level 3 is a desktop rating book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/leowwb.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d Leow Wen Bin - Project Portfolio for KeyboardFlashCards"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "This document details the various contributions that I have made to my team project, _KeyboardFlashCards_. Done as part of a second-year software engineering module,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "the project requires that students work in teams to morph a desktop addressbook application into another product. The"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "project is required to conform to a number of constraints, the most significant being that the product must have primarily utilize a CLI (command-line interface); this"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "means that the primary means of user input to the product must be through the typing of commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "This project was the result of six weeks of hard work by my team, which comprises two final-year Computer Engineering students and three sophomore Computer Science"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "students (including myself). All are students in the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Our final product is _KeyboardFlashCards_ - a desktop flashcard manager application targeted at"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "computing students (in particular, NUS School of Computing students), who will be able to use it to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "enhance their learning experience. It does this by simulating a real deck of flashcards on the user\u0027s"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "computer, complete with features including creation, editing, deletion, revision, and sharing of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "flashcards. The application is written in the Java programming language, and has a GUI (graphical"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "user interface) created with the JavaFX library. It has roughly 17 KLoC, up from the original"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "addressbook application\u0027s 10 KLoC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Here is a screenshot of our project:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "image::annotatedUi.png[KeyboardFlashCards]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_Figure 1. The graphical user interface of **KeyboardFlashCards**_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "Please note the following symbols and formatting, which will appear throughout the rest of the document:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "NOTE: A point of information to take note of"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "TIP: A tip or suggestion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "CAUTION: A cautionary piece of advice"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|_This section is a summary of the contributions I have made to the team project. It includes code, documentation, and various helpful contributions._"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* *Major enhancement #1*: I added *the ability to export flashcards to various file formats*."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** What it does: It allows the user to save their flashcards from the application into a specified external file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    The file format can be either \u0027.docx\u0027 or \u0027.json\u0027, and is inferred from the file extension specified by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    To avoid clutter, any data that would only be relevant in the context of the application (e.g. a user-given rating)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    is not exported with the flashcards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Justification: This feature greatly improves the application. The ability to export flashcards"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    means that the user can easily generate cheat sheets (by exporting to a document file),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    or share flashcards with others (by exporting to a JSON file) - all through the convenience of a single command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Highlights: This enhancement was designed in such a way as to maximize extensibility in the future"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    (if a future developer ever wishes to add support for more file formats). It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    The implementation was challenging due to the dependence on an external library,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    as well as the tendency of certain file paths to break our user input parser."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Credits: All writing of flashcards to the \u0027.docx\u0027 and \u0027.json\u0027 formats is done with the use of two external libraries;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    these are Apache POI and Jackson, respectively."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* *Major enhancement #2: I added *the ability to import flashcards from an external file*."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** What it does: It allows the user to import flashcards from a JSON file (a file that ends in \u0027.json\u0027)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    The imported flashcards are added to the application, and the user will be able to use them as if they were their own."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Justification: This feature, when used in combination with the `export` feature, allows users to share their flashcards with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    one another."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Highlights: This feature does not import flashcards which the user already has. This is because"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    there\u0027s no good reason for the user to have two copies of the same flashcard."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    The user will be notified if a duplicate is detected in a file while importing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Credits: All reading of flashcards from the `.json` format is done with the use of Jackson, an external library."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* *Code contributed*: Please click on these links to see a sample of my code:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "[https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_ (reposense link??)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "* *Other contributions*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Project management"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Managed releases `v1.1` - `v1.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Updated the project website with the team\u0027s details ("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/19[#19],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/24[#24]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    )"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Documentation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Created the general framework that would be used by the User Guide ("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/19[#19]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    )"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Wrote the FAQ and an early version of the Command Summary section for the User Guide ("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/19[#19]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    )"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Wrote the User Guide and Developer Guide content pertaining to the exporting and importing of flashcards ("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/137[#137],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/141[#141],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/151[#151],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/221[#221],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/224[#224]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    )"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Community"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Reviewed the following PRs (with non-trivial review comments):"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/98[#98],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/154[#154]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/53[1],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/23[2]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    )"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "** Tools"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Integrated a third party library (Apache POI) to the project ("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    https://github.com/AY1920S1-CS2103T-T12-4/main/pull/44[#44]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    )"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "*** Integrated new Github plugins (Travis CI, Appveyor, Coveralls) to the team repository"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|_My team\u0027s complete overhaul of the addressbook application meant that we also had to rewrite much of the User Guide. The following are excerpts of my contributions to this effort. They showcase my ability to write documentation that targets end-users._"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_(start of extract from User Guide)_"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "include::../UserGuide.adoc[tag\u003dflashcardexport]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "include::../UserGuide.adoc[tag\u003dflashcardimport]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_(end of extract from User Guide)_"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|_The following are sections that I have written for the Developer Guide. They showcase my ability to write technical documentation targeting developers, as well as the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_(start of extract from Developer Guide)_"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dflashcardexportimport]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "_(end of extract from Developer Guide)_"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 128
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.FlashCardPanel`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 424
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \"answer\": \"9482424\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \"address\": \"easy\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 3,
      "-": 112
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editFlashCardDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.storage.JsonKeyboardFlashCardsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.storage.KeyboardFlashCardsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing KeyboardFlashCards ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCardsStorage keyboardFlashCardsStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new JsonKeyboardFlashCardsStorage(userPrefs.getKeyboardFlashCardsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        storage \u003d new StorageManager(keyboardFlashCardsStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Optional\u003cReadOnlyKeyboardFlashCards\u003e addressBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ReadOnlyKeyboardFlashCards initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            addressBookOptional \u003d storage.readKeyboardFlashCards();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample KeyboardFlashCards\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty KeyboardFlashCards\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            initialData \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty KeyboardFlashCards\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            initialData \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty KeyboardFlashCards\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        logger.info(\"Starting KeyboardFlashCards \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 18,
      "keiteo": 1,
      "-": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String DEFAULT_STYLESHEET \u003d \"view/DarkTheme.css\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private String styleSheet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        styleSheet \u003d DEFAULT_STYLESHEET;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                       int xPosition, int yPosition,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                       String styleSheet) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.styleSheet \u003d styleSheet;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                       int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.styleSheet \u003d DEFAULT_STYLESHEET;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getStyleSheets() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return styleSheet;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setStyleSheet(String styleSheet) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.styleSheet \u003d styleSheet;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 styleSheet.equals(o.getStyleSheets());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        sb.append(\"Stylesheet: \" + styleSheet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 32,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The FlashCard index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_INVALID_DEADLINE_DISPLAYED_INDEX \u003d \"The deadline index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_INVALID_THEME \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \"The theme is not available. Existing themes: dark, light, pink, blue, hacker, nus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FLASHCARD_LISTED_OVERVIEW \u003d \"%1$d  FlashCard(s) listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_TEST_COMMAND \u003d \"Unknown test command!\\n%s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_EXPORT_IO_EXCEPTION \u003d \"There was an error in writing to the file.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"Some directories may be protected - please try a different directory.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "LeowWB": 2,
      "dalsontws": 1,
      "keiteo": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the KeyboardFlashCards."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @see seedu.address.model.Model#getKeyboardFlashCards()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    ReadOnlyKeyboardFlashCards getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of flashcards */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    ObservableList\u003cFlashCard\u003e getFilteredFlashCardList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /** Return an unmodifiable view of the category list**/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    ObservableList\u003cCategory\u003e getCategoryList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of deadline */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    ObservableList\u003cDeadline\u003e getFilteredDeadlineList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Path getKeyboardFlashCardsFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    Model getModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 13,
      "dalsontws": 3,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.KeyboardFlashCardsParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final KeyboardFlashCardsParser keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCardsParser \u003d new KeyboardFlashCardsParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Command command \u003d keyboardFlashCardsParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            storage.saveAddressBook(model.getKeyboardFlashCards());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ReadOnlyKeyboardFlashCards getAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return model.getKeyboardFlashCards();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e getFilteredFlashCardList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return model.getCategoryList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getFilteredDeadlineList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return model.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Path getKeyboardFlashCardsFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return model.getKeyboardFlashCardsFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 19,
      "dalsontws": 5,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Adds a flashCard to the storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a FlashCard to the application. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + PREFIX_QUESTION + \"End-to-end delay \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + PREFIX_ANSWER + \"2L/R (assuming no other delay) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + PREFIX_CATEGORY + \"CS2105 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + PREFIX_CATEGORY + \"computerNetworking\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New FlashCard added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This FlashCard already exists.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final FlashCard toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Creates an AddCommand to add the specified {@code FlashCard}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public AddCommand(FlashCard flashCard) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(flashCard);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        toAdd \u003d flashCard;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.addFlashCard(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return toAdd.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 26,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author: dalsontws"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.BadQuestions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.DueDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.exceptions.DuplicateDeadlineException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Set certain FlashCards as \u0027Bad\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * This will then add these set of flashcards into a certain Deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class BadCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bad\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \": Sets a specific FlashCard identified by the\\n \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"index number used in the displayed FlashCard list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"as a \u0027Bad\u0027 FlashCard that will require re-test.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"FlashCard has been added into Deadlines!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String DUPLICATE_DEADLINE \u003d \"FlashCard has been added into an existing deadline!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public BadCommand(Index index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        FlashCard badFlashcard \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Task task \u003d new Task(\"To Do: Bad Questions\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DueDate d \u003d BadQuestions.getBadDeadline();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline deadline \u003d new Deadline(task, d);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //TODO: add questions and due date into filtered bad flashcards list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Question q \u003d badFlashcard.getQuestion();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        BadQuestions badQuestions \u003d new BadQuestions();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        badQuestions.addBadQuestion(d, q);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        badQuestions.saveAsJson(badQuestions);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            model.addDeadline(deadline);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (DuplicateDeadlineException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return new CommandResult(DUPLICATE_DEADLINE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.ui.calendar.FullCalendarView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows full monthly schedule.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened calendar window.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //TODO: Replace with completed version of Calendar GUI"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Stage primaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        primaryStage.setTitle(\"Full Calendar Example\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        primaryStage.setX(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        primaryStage.setY(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        primaryStage.setScene(new Scene(new FullCalendarView(YearMonth.now()).getView()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, false, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"FlashCard has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.setKeyboardFlashCards(new KeyboardFlashCards());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.ui.TestFlashCardPanel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Statistics should be shown to the user. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showStats;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /** check test mode. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private boolean isTest \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private boolean isStartTest \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /** check detect change in the mode. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private boolean isEndTest \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private TestFlashCardPanel testFlashCardPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean showStats, boolean exit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showStats \u003d showStats;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public CommandResult(String feedbackToUser, TestFlashCardPanel testFlashCardPanel) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this (feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        isTest \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.testFlashCardPanel \u003d testFlashCardPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowStats() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return showStats;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean isTestMode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return isTest;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean isStartTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return isStartTest;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean isEndTest() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return isEndTest;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setTestMode(boolean start, boolean end) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        isStartTest \u003d start;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        isEndTest \u003d end;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public TestFlashCardPanel getTestFlashCardPanel () {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return testFlashCardPanel;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 39,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DUEDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Shows the details of upcoming deadlines."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add upcoming deadlines into personal schedule\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + PREFIX_TASK + \"TASK \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + PREFIX_DUEDATE + \"DUE DATE \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + PREFIX_TASK + \"Complete CS2100 Test \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + PREFIX_DUEDATE + \"22/10/2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Deadline added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DEADLINE \u003d \"This Deadline already exists in the address book\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final Deadline toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param deadline entered into schedule with task and due date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DeadlineCommand(Deadline deadline) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        toAdd \u003d deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (model.hasDeadline(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DEADLINE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        model.addDeadline(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                || (other instanceof DeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u0026\u0026 toAdd.equals(((DeadlineCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return toAdd.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Deletes a flashCard identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the FlashCard identified by the index number used in the displayed flashCard list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted FlashCard: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.deleteFlashCard(flashCardToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashCardToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 8,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Edits the details of an existing flashCard in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the FlashCard identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"by the index number used in the displayed flashCard list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + PREFIX_ANSWER + \"91234567 \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_EDIT_FLASHCARD_SUCCESS \u003d \"Edited FlashCard: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This FlashCard already exists in the application.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final EditFlashCardDescriptor editFlashCardDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param index of the flashCard in the filtered flashCard list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param editFlashCardDescriptor details to edit the flashCard with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditCommand(Index index, EditFlashCardDescriptor editFlashCardDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(editFlashCardDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.editFlashCardDescriptor \u003d new EditFlashCardDescriptor(editFlashCardDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedFlashCard \u003d createEditedFlashCard(flashCardToEdit, editFlashCardDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!flashCardToEdit.isSameFlashCard(editedFlashCard) \u0026\u0026 model.hasFlashcard(editedFlashCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.setFlashCard(flashCardToEdit, editedFlashCard);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.updateFilteredFlashCardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Creates and returns a {@code FlashCard} with the details of {@code flashCardToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * edited with {@code editFlashCardDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static FlashCard createEditedFlashCard(FlashCard flashCardToEdit,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                                                   EditFlashCardDescriptor editFlashCardDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert flashCardToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Question updatedQuestion \u003d editFlashCardDescriptor.getQuestion().orElse(flashCardToEdit.getQuestion());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Answer updatedAnswer \u003d editFlashCardDescriptor.getAnswer().orElse(flashCardToEdit.getAnswer());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Rating updatedRating \u003d editFlashCardDescriptor.getRating().orElse(flashCardToEdit.getRating());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                editFlashCardDescriptor.getCategories().orElse(flashCardToEdit.getCategories());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new FlashCard(updatedQuestion, updatedAnswer, updatedRating, updatedCategories);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 editFlashCardDescriptor.equals(e.editFlashCardDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Stores the details to edit the flashCard with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * corresponding field value of the flashCard."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static class EditFlashCardDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public EditFlashCardDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public EditFlashCardDescriptor(EditFlashCardDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return CollectionUtil.isAnyNonNull(question, answer, rating, categories);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         * Sets {@code categories} to this object\u0027s {@code categories}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setCategories(Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.categories \u003d (categories !\u003d null) ? new HashSet\u003c\u003e(categories) : null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code categories} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public Optional\u003cSet\u003cCategory\u003e\u003e getCategories() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return (categories !\u003d null) ? Optional.of(Collections.unmodifiableSet(categories)) : Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (!(other instanceof EditFlashCardDescriptor)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            EditFlashCardDescriptor e \u003d (EditFlashCardDescriptor) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    \u0026\u0026 getAnswer().equals(e.getAnswer())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    \u0026\u0026 getCategories().equals(e.getCategories());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 86,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EndTestCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.KeyboardFlashCardsParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Ends the current flashcard test."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class EndTestCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"end\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private KeyboardFlashCardsParser keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public EndTestCommand(KeyboardFlashCardsParser keyboardFlashCardsParser) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(keyboardFlashCardsParser);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.keyboardFlashCardsParser \u003d keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        //model.updatePerformance(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        keyboardFlashCardsParser.endTestMode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        CommandResult result \u003d new CommandResult(\"Test ended\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        result.setTestMode(false, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                || (other instanceof EndTestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                \u0026\u0026 keyboardFlashCardsParser.equals(((EndTestCommand) other).keyboardFlashCardsParser));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "keiteo": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPORT_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.category.CategoryContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.ExportPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Exports all {@code FlashCard}s whose category matches the supplied argument keyword. Keyword matching is case"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * insensitive. FlashCards will have their questions and answers copied to a specified file. Ratings and other"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * categories are removed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports your FlashCards into a file, \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"for easy sharing or use as a cheat sheet.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + PREFIX_EXPORT_PATH + \"FILE_PATH\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + PREFIX_CATEGORY + \"CS2105 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + PREFIX_EXPORT_PATH + \"C:\\\\Users\\\\damithc\\\\Documents\\\\CS2105_Cheat_Sheet.docx\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"%d FlashCard(s) were exported! You can find your file at \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"the following path:\\n%s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final ExportPath exportPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Creates a new ExportCommand with the given Category and ExportPath."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param category The Category from which the FlashCards will be exported"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param exportPath The ExportPath to which the FlashCards will be exported"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public ExportCommand(Category category, ExportPath exportPath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        this.exportPath \u003d exportPath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            List\u003cFlashCard\u003e flashCardList \u003d getFlashCardsByCategory(model, category);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            verifyNonEmptyFlashCardList("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    flashCardList,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    \"There are no FlashCards matching the specified category.\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            this.exportPath.export("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    wipeTransientData(flashCardList, category)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                            MESSAGE_EXPORT_SUCCESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                            flashCardList.size(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                            exportPath.toAbsolutePathString()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EXPORT_IO_EXCEPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 category.equals(((ExportCommand) other).category)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 exportPath.equals(((ExportCommand) other).exportPath)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Gets a list of FlashCards by category. Does not result in any change to model. Helper method for execute()."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param model The model from which the FlashCards will be obtained"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param category The desired category"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return ObservableList of the FlashCards in the model that match the Category."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static ObservableList\u003cFlashCard\u003e getFlashCardsByCategory(Model model, Category category) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireAllNonNull(model, category);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return model.getFilteredFlashCardListNoCommit("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                categoryToPredicate("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        category"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                )"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Converts a given Category to a CategoryContainsAnyKeywordsPredicate."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param category The Category to convert."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return CategoryContainsAnyKeywordsPredicate representing the Category."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static CategoryContainsAnyKeywordsPredicate categoryToPredicate(Category category) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return new CategoryContainsAnyKeywordsPredicate("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                categoryToKeywordList("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        category"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                )"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Converts a given Category to a singleton Category List."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param category The Category to convert into a List."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return Singleton List containing the given Category."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static List\u003cString\u003e categoryToKeywordList(Category category) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String categoryName \u003d category.categoryName;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        List\u003cString\u003e categoryKeywordList \u003d Collections.singletonList(categoryName);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return categoryKeywordList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static void verifyNonEmptyFlashCardList(List\u003cFlashCard\u003e flashCardList, String message)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (flashCardList \u003d\u003d null || flashCardList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new CommandException(message);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Wipes all transient data from a {@code List} of {@code FlashCard}s. We define transient data to be any data that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * does not need to be exported with the {@code FlashCard}. This includes rating and all categories, other than the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * category that was specified in the export command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param flashCardList List of FlashCards to export"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param category Category that was used to export these FlashCards - this category alone will not be considered"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *                 transient"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return A List of FlashCards with the transient data wiped"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static List\u003cFlashCard\u003e wipeTransientData(List\u003cFlashCard\u003e flashCardList, Category category) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert flashCardList.size() \u003e 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireAllNonNull(flashCardList, category);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return flashCardList.stream().map("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            flashCard -\u003e new FlashCard("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    flashCard.getQuestion(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    flashCard.getAnswer(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    new Rating(Rating.NULL),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    Collections.singleton(category)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            )"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        ).collect(Collectors.toList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPORT_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.ExportPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Imports all {@code FlashCard}s from a specified file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports your FlashCards from a file.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + PREFIX_EXPORT_PATH + \"FILE_PATH\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + PREFIX_EXPORT_PATH + \"C:\\\\Users\\\\damithc\\\\Documents\\\\CS2105_Cheat_Sheet.docx\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_IMPORT_EMPTY_OPTIONAL \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"Could not find any FlashCards to import. Are you sure you got the path correct?\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_IMPORT_DATA_CONVERSION_EXCEPTION \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"There was an error in reading from the file. Perhaps it was corrupted?\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_IMPORT_SUCCESS \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"Import was successful! Number of FlashCards imported: %d\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_IMPORT_DUPLICATES \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"%d duplicate FlashCard(s) were not imported.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_IMPORT_ALL_DUPLICATES \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"There are no new FlashCards to import from that file.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final ExportPath exportPath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Creates a new ImportCommand with the given ExportPath."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param exportPath The ExportPath from which the FlashCards will be imported."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public ImportCommand(ExportPath exportPath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        this.exportPath \u003d exportPath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return applyImport("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    exportPath.importFrom()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new CommandException(MESSAGE_IMPORT_DATA_CONVERSION_EXCEPTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (UnsupportedOperationException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 exportPath.equals(((ImportCommand) other).exportPath)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper function to add an imported List of {@code FlashCard}s to a {@code Model}. This imported List comes in an"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Optional. A CommandException will be thrown if the Optional is empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param model The Model to be updated"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param optionalList An Optional List of {@code FlashCard}s to add to the Model."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return CommandResult representing the operation\u0027s success."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws CommandException If the Optional List turns out to be empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private CommandResult applyImport(Model model, Optional\u003cList\u003cFlashCard\u003e\u003e optionalList) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        verifyOptionalFlashCardListPresent(optionalList, MESSAGE_IMPORT_EMPTY_OPTIONAL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        int successCount \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        int duplicateCount \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        List\u003cFlashCard\u003e list \u003d optionalList.get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (FlashCard flashCard : list) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            if (model.hasFlashcard(flashCard)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                duplicateCount++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                model.addFlashCard(flashCard);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                successCount++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                formatCommandResultString(successCount, duplicateCount)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Verifies that an Optional List of {@code FlashCard}s is present. Throws a CommandException otherwise."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param optionalList Optional List of {@code FlashCard}s"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param message Message to be thrown with the CommandException if the Optional turns out to be empty"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws CommandException If the Optional is empty"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private void verifyOptionalFlashCardListPresent(Optional\u003cList\u003cFlashCard\u003e\u003e optionalList, String message)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (optionalList \u003d\u003d null || optionalList.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                message"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper function to format the String that will be returned in the CommandResult of an ImportCommand."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param successCount Number of {@code FlashCard}s that were successfully imported"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param duplicateCount Number of {@code FlashCard}s that were found to be duplicates (already present in Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return String representing the formatted success message"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private String formatCommandResultString(int successCount, int duplicateCount) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert successCount \u003e\u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert duplicateCount \u003e\u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (successCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return MESSAGE_IMPORT_ALL_DUPLICATES;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String returnValue \u003d String.format("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                MESSAGE_IMPORT_SUCCESS,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                successCount"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (duplicateCount !\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            returnValue +\u003d String.format("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    MESSAGE_IMPORT_DUPLICATES,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    duplicateCount"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return returnValue;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAllCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Lists all flashcards in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class ListAllCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listall\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all FlashCard(s)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.updateFilteredFlashCardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCategoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.CategoryContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Finds and lists all flashcards in address book whose question contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class ListCategoryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all FlashCard(s) which contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"the specified category keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" math science\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final CategoryContainsAnyKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ListCategoryCommand(CategoryContainsAnyKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        model.getFilteredFlashCardList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof ListCategoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListCategoryCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 44,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NextQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.parser.KeyboardFlashCardsParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Represents a NextQuestionCommand to skip questions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "abstract class NextQuestionCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private static final String MESSAGE_SUCCESS_END_OF_TEST \u003d \"End of test!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final KeyboardFlashCardsParser keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final String messageSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    NextQuestionCommand(KeyboardFlashCardsParser keyboardFlashCardsParser, String messageSuccess) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.keyboardFlashCardsParser \u003d keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.messageSuccess \u003d messageSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (!model.hasTestFlashCard()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            keyboardFlashCardsParser.endTestMode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            CommandResult result \u003d new CommandResult(MESSAGE_SUCCESS_END_OF_TEST);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            result.setTestMode(false, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        //String nextQuestion \u003d model.getTestQuestion();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        model.setTestFlashCard();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        keyboardFlashCardsParser.setAwaitingAnswer(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                messageSuccess,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                model.getTestFlashCardPanel());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keiteo": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RateQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.KeyboardFlashCardsParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Allows users to rate the flashcard question and processes the next question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class RateQuestionCommand extends NextQuestionCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rate\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Rated successfully! Here\u0027s the next question\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"You can only rate after answering the question!\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            + \"Next available command: ans, skip, end\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Rates a FlashCard and gets the next question.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            + \"Parameter: rate easy/good/hard\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final KeyboardFlashCardsParser keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public RateQuestionCommand(KeyboardFlashCardsParser keyboardFlashCardsParser, Rating rating) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        super(keyboardFlashCardsParser, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.keyboardFlashCardsParser \u003d keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        updateModelStatistics(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        updateFlashCardRating(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return super.execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                || (other instanceof RateQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                \u0026\u0026 rating.equals(((RateQuestionCommand) other).rating)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                \u0026\u0026 keyboardFlashCardsParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                        .equals(((RateQuestionCommand) other).keyboardFlashCardsParser)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /** Updates statistics in the model. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private void updateModelStatistics(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assert model !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        String rating \u003d this.rating.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assert rating.equals(\"good\") || rating.equals(\"hard\") || rating.equals(\"easy\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (rating.equals(\"good\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            model.editStats(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        } else if (rating.equals(\"hard\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            model.editStats(1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        } else { // rating.equals(\"easy\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            model.editStats(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /** Updates the rating of a flashcard. */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private void updateFlashCardRating(Model model) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assert model !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        FlashCard flashCardToUpdate \u003d model.getCurrentTestFlashCard();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assert flashCardToUpdate !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        model.setFlashCard(flashCardToUpdate, createUpdatedFlashCard(flashCardToUpdate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /** Creates a new immutable flashcard with the updated rating. */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private FlashCard createUpdatedFlashCard(FlashCard flashCardToUpdate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assert flashCardToUpdate !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return new FlashCard(flashCardToUpdate.getQuestion(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                flashCardToUpdate.getAnswer(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                rating, flashCardToUpdate.getCategories());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "keiteo": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author:dalsontws"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Deletes a flashCard identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \": Remove the deadline identified by the index number used in the displayed deadline list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_DELETE_DEADLINE_SUCCESS \u003d \"Deleted Deadline: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public RemoveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        List\u003cDeadline\u003e lastShownList \u003d model.getFilteredDeadlineList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DEADLINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline deadlineToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        model.deleteDeadline(deadlineToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DEADLINE_SUCCESS, deadlineToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                || (other instanceof RemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchAnswerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//original code is form AB3"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.AnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Finds and lists all flashcards in address book whose question contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchAnswerCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchans\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches all FlashCards whose answers contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final AnswerContainsAnyKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public SearchAnswerCommand(AnswerContainsAnyKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        model.getFilteredFlashCardList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof SearchAnswerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchAnswerCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 44,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionOrAnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Finds and lists all flashcard in address book whose question or answer contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches all FlashCards whose questions or answers\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \" contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final QuestionOrAnswerContainsAnyKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public SearchCommand(QuestionOrAnswerContainsAnyKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        model.getFilteredFlashCardList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 12,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//original code is form AB3"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Finds and lists all flashcards in address book whose question contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchQuestionCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchqn\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all FlashCards whose questions contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final QuestionContainsAnyKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public SearchQuestionCommand(QuestionContainsAnyKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        model.getFilteredFlashCardList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof SearchQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchQuestionCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 44,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetThemeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//@@author shutingy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Change the theme of the GUI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SetThemeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"theme\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String THEME_FORMAT \u003d \"view/%s.css\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String DARKTHEME \u003d \"DarkTheme\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String LIGHTTHEME \u003d \"LightTheme\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String PINKTHEME \u003d \"PinkTheme\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String BLUETHEME \u003d \"BlueTheme\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String HACKERTHEME \u003d \"HackerTheme\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String NUSTHEME \u003d \"NUSTheme\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Theme changed to %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_SAME_STYLESHEET \u003d \"The current theme is already %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private String styleSheet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Creates a SetThemeCommand to change the theme of the gui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public SetThemeCommand(String styleSheet) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.styleSheet \u003d styleSheet;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String stylesheet \u003d String.format(THEME_FORMAT, styleSheet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String previousStylesheet \u003d model.getStyleSheet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (isSameStyleSheet(stylesheet, previousStylesheet)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SAME_STYLESHEET, styleSheet));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        MainWindow.setStylesheet(stylesheet);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.setStyleSheet(stylesheet);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, styleSheet));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private boolean isSameStyleSheet(String styleSheet, String preStyleSheet) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(styleSheet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(preStyleSheet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return styleSheet.equals(preStyleSheet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowAnswerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.KeyboardFlashCardsParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Shows the answer to a flashcard during the test."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class ShowAnswerCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ans\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"Answer has already been displayed!\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            + \"Next available command: rate, end\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final KeyboardFlashCardsParser keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public ShowAnswerCommand(KeyboardFlashCardsParser keyboardFlashCardsParser) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(keyboardFlashCardsParser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.keyboardFlashCardsParser \u003d keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        //String answer \u003d model.getTestAnswer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        model.showAnswer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        keyboardFlashCardsParser.setAwaitingAnswer(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return new CommandResult(\"To be change: better feedback message\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                || (other instanceof ShowAnswerCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                \u0026\u0026 keyboardFlashCardsParser.equals(((ShowAnswerCommand) other).keyboardFlashCardsParser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "keiteo": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SkipCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.parser.KeyboardFlashCardsParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * This creates a SkipCommand object that allows users to skip the current question."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class SkipCommand extends NextQuestionCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"skip\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully skipped question! Here\u0027s the next question\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"You can only skip after seeing the question!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            + \"Next available command: rate, end\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Skips a flashcard and gets the next question.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public SkipCommand(KeyboardFlashCardsParser keyboardFlashCardsParser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        super(keyboardFlashCardsParser, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return super.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "keiteo": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StartCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.KeyboardFlashCardsParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.category.CategoryContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Starts the flashcard test by going through the cards in the specified deck."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * If no deck name is supplied, a random deck will be chosen."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            + \": Starts the FlashCard test by going through the cards in the specified deck.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            + \"Parameters: DECK NAME. If no argument is supplied, a random deck will be chosen.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" physics\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String MESSAGE_NO_FLASHCARDS \u003d \"No FlashCard to test!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static final String MESSAGE_START_TEST_SUCCESS \u003d \"Starting test...\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final KeyboardFlashCardsParser keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public StartCommand(KeyboardFlashCardsParser keyboardFlashCardsParser, String tagName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(keyboardFlashCardsParser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.keyboardFlashCardsParser \u003d keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        List\u003cFlashCard\u003e testList \u003d searchTag(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        model.initializeTestModel(testList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (!model.hasTestFlashCard()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return new CommandResult(MESSAGE_NO_FLASHCARDS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        keyboardFlashCardsParser.startTestMode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        model.setTestFlashCard();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        //String question \u003d model.getTestQuestion();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        keyboardFlashCardsParser.setAwaitingAnswer(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        CommandResult result \u003d new CommandResult("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                MESSAGE_START_TEST_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                model.getTestFlashCardPanel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        result.setTestMode(true, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                || (other instanceof StartCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                \u0026\u0026 tagName.equals(((StartCommand) other).tagName)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                \u0026\u0026 keyboardFlashCardsParser.equals(((StartCommand) other).keyboardFlashCardsParser)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /** Searches the list of flashcard to fetch the relevant tags. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private List\u003cFlashCard\u003e searchTag(Model model) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assert model !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (tagName.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return new LinkedList\u003c\u003e(model.getFlashCardList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate predicate \u003d getSearchTermPredicate();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        model.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return new LinkedList\u003c\u003e(model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /** Converts tagName to a CategoryContainsAnyKeywordsPredicate for searchTag(). */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private CategoryContainsAnyKeywordsPredicate getSearchTermPredicate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        String[] tagList \u003d tagName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return new CategoryContainsAnyKeywordsPredicate(Arrays.asList(tagList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "keiteo": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": " * Lists Statistics"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Statistics displayed\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Should return a CommandResult with the statistics"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        return new CommandResult(MESSAGE_USAGE, false, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 20,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.model.flashcard.Rating.NULL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Rating rating \u003d ParserUtil.parseRating(NULL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCard \u003d new FlashCard(question, answer, rating, categoryList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new AddCommand(flashCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 17,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BadCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.BadCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class BadCommandParser implements Parser\u003cBadCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public BadCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return new BadCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BadCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q\u003e\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a\u003e\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r\u003e\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c\u003e\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"t\u003e\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final Prefix PREFIX_DUEDATE \u003d new Prefix(\"d\u003e\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final Prefix PREFIX_EXPORT_PATH \u003d new Prefix(\"p\u003e\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DUEDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.DueDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DeadlineCommandParser implements Parser\u003cDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_DUEDATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK, PREFIX_DUEDATE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Task task \u003d ParserUtil.parseTask(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DueDate date \u003d ParserUtil.parseDueDate(argMultimap.getValue(PREFIX_DUEDATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline deadline \u003d new Deadline(task, date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new DeadlineCommand(deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_RATING, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor editFlashCardDescriptor \u003d new EditFlashCardDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            editFlashCardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            editFlashCardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            editFlashCardDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        parseCategoryForEdit("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                argMultimap.getAllValues(PREFIX_CATEGORY)).ifPresent(editFlashCardDescriptor::setCategories);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!editFlashCardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new EditCommand(index, editFlashCardDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoryForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert categories !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Collection\u003cString\u003e categorySet \u003d categories.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 categories.contains(\"\") ? Collections.emptySet() : categories;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(categorySet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 27,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPORT_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.ExportPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_EXPORT_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        ExportPath exportPath \u003d ParserUtil.parseExportPath(argMultimap.getValue(PREFIX_EXPORT_PATH).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return new ExportCommand(category, exportPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindAnswerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchAnswerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.AnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FindAnswerCommandParser implements Parser\u003cSearchAnswerCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchAnswerCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * and returns a SearchAnswerCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public SearchAnswerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchAnswerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String[] questionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new SearchAnswerCommand(new AnswerContainsAnyKeywordsPredicate(Arrays.asList(questionKeywords)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 35,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCategoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.ListCategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.CategoryContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Parses input arguments and creates a new ListCategoryCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FindCategoryCommandParser implements Parser\u003cListCategoryCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCategoryCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * and returns a ListCategoryCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ListCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String[] questionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new ListCategoryCommand(new CategoryContainsAnyKeywordsPredicate(Arrays.asList(questionKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 33,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionOrAnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FindCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String[] questionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new SearchCommand(new QuestionOrAnswerContainsAnyKeywordsPredicate(Arrays.asList(questionKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 10,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchQuestionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Parses input arguments and creates a new SearchQuestionCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FindQuestionCommandParser implements Parser\u003cSearchQuestionCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchQuestionCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * and returns a SearchQuestionCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public SearchQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String[] questionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new SearchQuestionCommand(new QuestionContainsAnyKeywordsPredicate(Arrays.asList(questionKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 31,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPORT_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.ExportPath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EXPORT_PATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EXPORT_PATH)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        ExportPath exportPath \u003d ParserUtil.parseExportPath(argMultimap.getValue(PREFIX_EXPORT_PATH).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return new ImportCommand(exportPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/KeyboardFlashCardsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_TEST_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.BadCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.EndTestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.ListAllCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.ListCategoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.RateQuestionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchAnswerCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchQuestionCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SetThemeCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.ShowAnswerCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.SkipCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class KeyboardFlashCardsParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author keiteo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private boolean isRunningFlashcardTest \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private boolean isAwaitingAnswer \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (isRunningFlashcardTest) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return parseTestCommand(matcher);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return parseNormalCommand(matcher);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author keiteo"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void startTestMode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        isRunningFlashcardTest \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void endTestMode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        isRunningFlashcardTest \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void setAwaitingAnswer(boolean isAwaitingAnswer) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.isAwaitingAnswer \u003d isAwaitingAnswer;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /** Parses test specific commands. */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private Command parseTestCommand(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        case EndTestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return new EndTestCommand(this);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        case ShowAnswerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            if (isAwaitingAnswer) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                return new ShowAnswerCommand(this);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_TEST_COMMAND, ShowAnswerCommand.ERROR_MESSAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        case RateQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            if (!isAwaitingAnswer) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                return new RateQuestionCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_TEST_COMMAND, RateQuestionCommand.ERROR_MESSAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        case SkipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            if (isAwaitingAnswer) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                return new SkipCommand(this);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_TEST_COMMAND, SkipCommand.ERROR_MESSAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_TEST_COMMAND, \"\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /** Parses commands outside test mode i.e. list, add etc. */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private Command parseNormalCommand(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        case ListCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new FindCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        case SearchAnswerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new FindAnswerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        case SearchQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new FindQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        case ListAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new ListAllCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return new CalendarCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return new StatsCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return new DeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        case BadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return new BadCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return new StartCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        case SetThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new SetThemeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 21,
      "LeowWB": 9,
      "dalsontws": 16,
      "keiteo": 63,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.DueDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.ExportPath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.ExportPathFactory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses a {@code String rating} into an {@code Address}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws ParseException if the given {@code rating} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static Rating parseRating (String rating) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static Category parseCategory (String category) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!Category.isValidCategoryName(trimmedCategory)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories (Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return categorySet;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Parses a {@code String task} into a {@code Task}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static Task parseTask(String task) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String trimmedTask \u003d task.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!Task.isValidTask(trimmedTask)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new Task(trimmedTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Parses a {@code String task} into a {@code Task}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static DueDate parseDueDate(String dateStr) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(dateStr);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String trimmedDateStr \u003d dateStr.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!DueDate.isValidDate(trimmedDateStr)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new ParseException(DueDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new DueDate(trimmedDateStr);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    //@@author LeowWB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Parses a {@code String exportPath} into a {@code ExportPath}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws ParseException if the given {@code exportPath} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static ExportPath parseExportPath(String exportPath) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(exportPath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String trimmedExportPath \u003d exportPath.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return ExportPathFactory.getExportPath(trimmedExportPath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    e.getMessage()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 43,
      "LeowWB": 23,
      "dalsontws": 27,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RateQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.RateQuestionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Parses input arguments and creates a new RateQuestionCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class RateQuestionCommandParser implements Parser\u003cRateQuestionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final KeyboardFlashCardsParser keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public RateQuestionCommandParser(KeyboardFlashCardsParser keyboardFlashCardsParser) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(keyboardFlashCardsParser);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.keyboardFlashCardsParser \u003d keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RateQuestionCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "     * and returns a RateQuestionCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public RateQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        String getFirstWord \u003d args.trim().split(\"\\\\s+\")[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        switch (getFirstWord) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        case Rating.EASY:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        case Rating.GOOD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        case Rating.HARD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return new RateQuestionCommand(keyboardFlashCardsParser, new Rating(getFirstWord));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keiteo": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author: dalsontws"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Parses input arguments and creates a new RemoveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * and returns a RemoveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public RemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return new RemoveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetThemeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//@@author shutingy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_THEME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.SetThemeCommand.BLUETHEME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.SetThemeCommand.DARKTHEME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.SetThemeCommand.HACKERTHEME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.SetThemeCommand.LIGHTTHEME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.SetThemeCommand.NUSTHEME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.SetThemeCommand.PINKTHEME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SetThemeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Parses input arguments and creates a new SetThemeCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SetThemeCommandParser implements Parser\u003cSetThemeCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public SetThemeCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String styleSheet \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String trimedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (trimedInput.equalsIgnoreCase(\"light\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            styleSheet \u003d LIGHTTHEME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (trimedInput.equalsIgnoreCase(\"dark\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            styleSheet \u003d DARKTHEME;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (trimedInput.equalsIgnoreCase(\"pink\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            styleSheet \u003d PINKTHEME;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (trimedInput.equalsIgnoreCase(\"blue\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            styleSheet \u003d BLUETHEME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (trimedInput.equalsIgnoreCase(\"hacker\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            styleSheet \u003d HACKERTHEME;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (trimedInput.equalsIgnoreCase(\"nus\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            styleSheet \u003d NUSTHEME;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (styleSheet \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_THEME));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new SetThemeCommand(styleSheet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StartCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Parses input arguments and creates a new StartCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final KeyboardFlashCardsParser keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    StartCommandParser(KeyboardFlashCardsParser keyboardFlashCardsParser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(keyboardFlashCardsParser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.keyboardFlashCardsParser \u003d keyboardFlashCardsParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StartCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "     * and returns a StartCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public StartCommand parse(String args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return new StartCommand(keyboardFlashCardsParser, trimmedArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keiteo": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FlashCardTestModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.ui.TestFlashCardPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Creates a test model to contain relevant flashcards to test users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class FlashCardTestModel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private static FlashCard currentFlashCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private List\u003cFlashCard\u003e testList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private List\u003cFlashCard\u003e testListOld \u003d new LinkedList\u003c\u003e(); // placeholder for previous function"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private TestFlashCardPanel testFlashCardPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public FlashCardTestModel(List\u003cFlashCard\u003e testList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        this.testList \u003d testList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return testList.isEmpty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void setFlashcard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assert !testList.isEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        currentFlashCard \u003d testList.remove(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        testListOld.add(currentFlashCard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private void setTestFlashCardPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(currentFlashCard);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        testFlashCardPanel \u003d new TestFlashCardPanel(currentFlashCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public TestFlashCardPanel getTestFlashCardPanel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(currentFlashCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        setTestFlashCardPanel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return testFlashCardPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * link to the gui to display the answer during test mode."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void showAnswer() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(testFlashCardPanel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        testFlashCardPanel.showAnswer();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author keiteo"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(currentFlashCard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return currentFlashCard.getQuestion().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        requireNonNull(currentFlashCard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return currentFlashCard.getAnswer().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public static FlashCard getCurrentFlashCard() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return currentFlashCard;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (!(obj instanceof FlashCardTestModel)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (currentFlashCard \u003d\u003d null \u0026\u0026 ((FlashCardTestModel) obj).currentFlashCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return testList.equals(((FlashCardTestModel) obj).testList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        if (currentFlashCard !\u003d null \u0026\u0026 ((FlashCardTestModel) obj).currentFlashCard !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            return testList.equals(((FlashCardTestModel) obj).testList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                    \u0026\u0026 currentFlashCard.equals(((FlashCardTestModel) obj).currentFlashCard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 22,
      "keiteo": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/KeyboardFlashCards.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.UniqueCategoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.UniqueDeadlineList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.UniqueFlashCardList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Duplicates are not allowed (by .isSameFlashCard comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class KeyboardFlashCards implements ReadOnlyKeyboardFlashCards {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final UniqueFlashCardList flashCards;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final UniqueDeadlineList deadlines;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final UniqueCategoryList categories;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int[] stats;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCards \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlines \u003d new UniqueDeadlineList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories \u003d new UniqueCategoryList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        stats \u003d new int[3]; //good,hard,easy"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public KeyboardFlashCards() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Creates an KeyboardFlashCards using the Flashcards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public KeyboardFlashCards(ReadOnlyKeyboardFlashCards toBeCopied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Replaces the contents of the flashCard list with {@code flashCards}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * {@code flashCards} must not contain duplicate flashCards."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCards(List\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.flashCards.setFlashCards(flashCards);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //only when setFlashCards is success the set the categories"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        setCategories(flashCards);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setCategories(List\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //clear the existing data"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCards.forEach(flashCard -\u003e categories.add(flashCard.getCategories()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Resets the existing data of this {@code KeyboardFlashCards} with {@code newData}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void resetData(ReadOnlyKeyboardFlashCards newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        setFlashCards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        setDeadlines(newData.getDeadlineList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //// flashCard-level operations"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if a flashCard with the same identity as {@code flashCard} exists in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean hasFlashcard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(flashCard);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return flashCards.contains(flashCard);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Adds a flashCard to the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard must not already exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void addFlashcard(FlashCard c) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCards.add(c);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //update the categoryList"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        addCategory(c.getCategories());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Replaces the given flashCard {@code target} in the list with {@code editedFlashCard}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard identity of {@code editedFlashCard} must not be the same as another existing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * flashCard in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void addDeadline(Deadline d) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        deadlines.add(d);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void addCategory(Category category) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories.add(category);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void addCategory(Set\u003cCategory\u003e categorySet) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories.add(categorySet);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashcard(FlashCard target, FlashCard editedFlashCard) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(editedFlashCard);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCards.setFlashcard(target, editedFlashCard);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories.remove(target.getCategories());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories.add(editedFlashCard.getCategories());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Removes {@code key} from this {@code KeyboardFlashCards}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void removeFlashCard(FlashCard key) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCards.remove(key);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories.remove(key.getCategories());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void removeDeadline(Deadline key) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        deadlines.remove(key);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return flashCards.asUnmodifiableObservableList().size() + \"flash cards\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return flashCards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getDeadlineList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return deadlines.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return categories.asUnmodifiableObservablelist();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof KeyboardFlashCards // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 flashCards.equals(((KeyboardFlashCards) other).flashCards));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return flashCards.hashCode();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // Deadline methods"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Replaces the given deadline {@code target} in the list with {@code editedDeadline}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * The deadline identity of {@code editedFlashCard} must not be the same as another existing"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * deadline in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setDeadline(Deadline target, Deadline editedDeadline) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(editedDeadline);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlines.setDeadline(target, editedDeadline);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setDeadlines(List\u003cDeadline\u003e deadlines) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.deadlines.setDeadlines(deadlines);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns true if a deadline with the same identity as {@code deadline} exists in the address book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean hasDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return deadlines.contains(deadline);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    //@@author LeonardTay748"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void addGood() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        stats[0]++;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void addHard() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        stats[1]++;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void addEasy() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        stats[2]++;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public int[] getStats() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 86,
      "LeonardTay748": 16,
      "dalsontws": 35,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.ui.TestFlashCardPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Predicate\u003cFlashCard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Predicate\u003cCategory\u003e PREDICATE_SHOW_ALL_CATEGORIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    Predicate\u003cDeadline\u003e PREDICATE_SHOW_ALL_DEADLINES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void setStyleSheet(String string);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String getStyleSheet();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Path getKeyboardFlashCardsFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void setKeyboardFlashCardsFilePath(Path keyboardFlashCardsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Replaces address book data with the data in {@code keyboardFlashCards}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void setKeyboardFlashCards(ReadOnlyKeyboardFlashCards keyboardFlashCards);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /** Returns the KeyboardFlashCards */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    ReadOnlyKeyboardFlashCards getKeyboardFlashCards();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if a flashCard with the same identity as {@code flashCard} exists in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *///@@author shutingy"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    boolean hasFlashcard(FlashCard flashCard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Deletes the given flashCard."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *///@@author shutingy -reused"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void deleteFlashCard(FlashCard target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Adds the given deadline."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * {@code deadline} must not already exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void addDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if a deadline with the same identity as {@code deadline} exists in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    boolean hasDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Deletes the given deadline."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The deadline must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void deleteDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    //@@author LeonardTay748"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Updates the Statistics."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * type 0,1 \u0026 2 to edit number of Good, Hard \u0026 Easy qns completed during the test."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    void editStats(int type);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * returns the Statistics."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * type 0,1 \u0026 2 to edit number of Good, Hard \u0026 Easy qns completed during the test."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    int[] getTestStats();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * returns an int[] of performance values."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    ArrayList\u003cInteger\u003e getPerformance();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * updates the int[] that holds all performance values from test mode."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * adds a new performance value to the existing int[] that holds all performance values from test mode."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    void updatePerformance(Model model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * clears the int[] that holds all performance values from test mode."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    void resetPerformance(Model model);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Adds the given flashCard."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * {@code flashCard} must not already exist in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy -reused"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void addFlashCard(FlashCard flashCard);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Replaces the given flashCard {@code target} with {@code editedFlashCard}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard identity of {@code editedFlashCard}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * must not be the same as another existing flashCard in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy -reused"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void setFlashCard(FlashCard target, FlashCard editedFlashCard);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashCard list */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    ObservableList\u003cFlashCard\u003e getFilteredFlashCardList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Updates the filter of the filtered flashCard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void updateFilteredFlashCardList(Predicate\u003cFlashCard\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy -reused"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    ObservableList\u003cCategory\u003e getCategoryList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy -reused"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void updateFilteredCategoryList(Predicate\u003cCategory\u003e predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author keiteo"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    ObservableList\u003cFlashCard\u003e getFlashCardList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    void initializeTestModel(List\u003cFlashCard\u003e testList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    boolean hasTestFlashCard();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    void setTestFlashCard();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    String getTestQuestion();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    String getTestAnswer();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    TestFlashCardPanel getTestFlashCardPanel();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    FlashCard getCurrentTestFlashCard();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void showAnswer();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Replaces the given flashCard {@code target} with {@code editedFlashCard}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard identity of {@code editedFlashCard}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * must not be the same as another existing flashCard in the address book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void setDeadline(Deadline target, Deadline editedDeadline);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deadline list */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //@@author dalsontws"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    ObservableList\u003cDeadline\u003e getFilteredDeadlineList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Updates the filter of the filtered flashCard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //@@author dalsontws"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void updateFilteredDeadlineList(Predicate\u003cDeadline\u003e predicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Simulates updating the filter of the filtered flashCard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Does not actually result in any change to the flashCard list stored within this model."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns the simulated list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    //@@author LeowWB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    ObservableList\u003cFlashCard\u003e getFilteredFlashCardListNoCommit(Predicate\u003cFlashCard\u003e predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 82,
      "LeowWB": 3,
      "LeonardTay748": 33,
      "dalsontws": 18,
      "keiteo": 17,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.flashcard.RatingContainsKeywordPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.ui.TestFlashCardPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final KeyboardFlashCards keyboardFlashCards;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final FilteredList\u003cFlashCard\u003e filteredFlashCards;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final FilteredList\u003cDeadline\u003e filteredDeadlines;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final FilteredList\u003cCategory\u003e categoryList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private FlashCardTestModel flashCardTestModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cInteger\u003e performance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Initializes a ModelManager with the given keyboardFlashCards and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ModelManager(ReadOnlyKeyboardFlashCards addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keyboardFlashCards \u003d new KeyboardFlashCards(addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        filteredFlashCards \u003d new FilteredList\u003c\u003e(this.keyboardFlashCards.getFlashcardList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        filteredDeadlines \u003d new FilteredList\u003c\u003e(this.keyboardFlashCards.getDeadlineList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryList \u003d new FilteredList\u003c\u003e(this.keyboardFlashCards.getCategoryList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        flashCardTestModel \u003d new FlashCardTestModel(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.performance \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this(new KeyboardFlashCards(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setStyleSheet(String styleSheet) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userPrefs.setStyleSheet(styleSheet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getStyleSheet() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return userPrefs.getStyleSheet();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Path getKeyboardFlashCardsFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return userPrefs.getKeyboardFlashCardsFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setKeyboardFlashCardsFilePath(Path keyboardFlashCardsFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(keyboardFlashCardsFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userPrefs.setKeyboardFlashCardsFilePath(keyboardFlashCardsFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d KeyboardFlashCards \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setKeyboardFlashCards(ReadOnlyKeyboardFlashCards keyboardFlashCards) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keyboardFlashCards.resetData(keyboardFlashCards);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ReadOnlyKeyboardFlashCards getKeyboardFlashCards() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCards;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean hasFlashcard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(flashCard);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCards.hasFlashcard(flashCard);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void deleteFlashCard(FlashCard target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards.removeFlashCard(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void addFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards.addFlashcard(flashCard);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        updateFilteredFlashCardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        updateFilteredCategoryList(PREDICATE_SHOW_ALL_CATEGORIES);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCard(FlashCard target, FlashCard editedFlashCard) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireAllNonNull(target, editedFlashCard);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards.setFlashcard(target, editedFlashCard);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards.addDeadline(deadline);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        updateFilteredDeadlineList(PREDICATE_SHOW_ALL_DEADLINES);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean hasDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCards.hasDeadline(deadline);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    //@@author LeonardTay748"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void editStats(int type) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        if (type \u003d\u003d 0) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            keyboardFlashCards.addGood();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            keyboardFlashCards.addHard();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            keyboardFlashCards.addEasy();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public int[] getTestStats() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        return keyboardFlashCards.getStats();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public ArrayList\u003cInteger\u003e getPerformance() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void updatePerformance(Model model) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        model.updateFilteredFlashCardList(new RatingContainsKeywordPredicate(\"good\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        int numGood \u003d model.getFilteredFlashCardList().size();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        model.updateFilteredFlashCardList(new RatingContainsKeywordPredicate(\"hard\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        int numHard \u003d model.getFilteredFlashCardList().size();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        model.updateFilteredFlashCardList(new RatingContainsKeywordPredicate(\"easy\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        int numEasy \u003d model.getFilteredFlashCardList().size();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        int value \u003d ((numEasy + numGood) * 100) / (numEasy + numGood + numHard);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        performance.add(value);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void resetPerformance(Model model) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        performance.clear();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void deleteDeadline(Deadline target) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        keyboardFlashCards.removeDeadline(target);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void setDeadline(Deadline target, Deadline editedDeadline) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        requireAllNonNull(target, editedDeadline);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        keyboardFlashCards.setDeadline(target, editedDeadline);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered FlashCard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code FlashCard} backed by the internal list of"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e getFilteredFlashCardList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        return filteredFlashCards;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void updateFilteredFlashCardList(Predicate\u003cFlashCard\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        filteredFlashCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deadline List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deadline} backed by the internal list of"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public ObservableList\u003cDeadline\u003e getFilteredDeadlineList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        return filteredDeadlines;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void updateFilteredDeadlineList(Predicate\u003cDeadline\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        filteredDeadlines.setPredicate(predicate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author keiteo"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e getFlashCardList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return keyboardFlashCards.getFlashcardList();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashCardTestModel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void initializeTestModel(List\u003cFlashCard\u003e testList) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        flashCardTestModel \u003d new FlashCardTestModel(testList);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public boolean hasTestFlashCard() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return !flashCardTestModel.isEmpty();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void setTestFlashCard() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        flashCardTestModel.setFlashcard();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public String getTestQuestion() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return flashCardTestModel.getQuestion();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public String getTestAnswer() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return flashCardTestModel.getAnswer();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public FlashCard getCurrentTestFlashCard() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return flashCardTestModel.getCurrentFlashCard();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public TestFlashCardPanel getTestFlashCardPanel() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return flashCardTestModel.getTestFlashCardPanel();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void showAnswer() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCardTestModel.showAnswer();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    //@@author LeowWB"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e getFilteredFlashCardListNoCommit(Predicate\u003cFlashCard\u003e predicate) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        FilteredList\u003cFlashCard\u003e simulatedList \u003d new FilteredList\u003cFlashCard\u003e(filteredFlashCards);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        simulatedList.setPredicate(predicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return simulatedList;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return categoryList;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@author shutingy"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void updateFilteredCategoryList(Predicate\u003cCategory\u003e predicate) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryList.setPredicate(predicate);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCards.equals(other.keyboardFlashCards)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 filteredFlashCards.equals(other.filteredFlashCards)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 categoryList.equals(other.categoryList)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 filteredDeadlines.equals(other.filteredDeadlines)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 flashCardTestModel.equals(other.flashCardTestModel);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 110,
      "LeowWB": 9,
      "LeonardTay748": 89,
      "dalsontws": 3,
      "keiteo": 41,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyKeyboardFlashCards.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public interface ReadOnlyKeyboardFlashCards {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns an unmodifiable view of the flashcard list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * This list will not contain any duplicate flashcard."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    ObservableList\u003cFlashCard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns an unmodifiable view of the deadline list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    ObservableList\u003cDeadline\u003e getDeadlineList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns an unmodifiable view of the category list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    ObservableList\u003cCategory\u003e getCategoryList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 11,
      "dalsontws": 6,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Path getKeyboardFlashCardsFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Path keyboardFlashCardsFilePath \u003d Paths.get(\"data\" , \"keyboardFlashCards.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        setKeyboardFlashCardsFilePath(newUserPrefs.getKeyboardFlashCardsFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setStyleSheet(String styleSheet) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        guiSettings.setStyleSheet(styleSheet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getStyleSheet() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return guiSettings.getStyleSheets();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Path getKeyboardFlashCardsFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCardsFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setKeyboardFlashCardsFilePath(Path keyboardFlashCardsFilePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(keyboardFlashCardsFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keyboardFlashCardsFilePath \u003d keyboardFlashCardsFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 keyboardFlashCardsFilePath.equals(o.keyboardFlashCardsFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return Objects.hash(guiSettings, keyboardFlashCardsFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + keyboardFlashCardsFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 16,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/category/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Represents a Category in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategoryName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Categories names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param categoryName A valid category name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.categoryName \u003d categoryName.toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static boolean isValidCategoryName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \u0027[\u0027 + categoryName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/category/CategoryContainsAnyKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Tests that a {@code FlashCard}\u0027s {@code Category} matches all of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class CategoryContainsAnyKeywordsPredicate implements Predicate\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public CategoryContainsAnyKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean test(FlashCard flashCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .anyMatch(keyword -\u003e flashCard.getCategories().contains(new Category(keyword)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof CategoryContainsAnyKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 keywords.equals(((CategoryContainsAnyKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 32,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/category/UniqueCategoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A list of categories that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A category is considered unique by comparing using the value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class UniqueCategoryList implements Iterable\u003cCategory\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final ObservableList\u003cCategory\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final ObservableList\u003cCategory\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final HashMap\u003cCategory, Integer\u003e categoryMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if the list contains an equivalent category as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean contains(Category toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //use hashMap to check the existence of the category"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return categoryMap.containsKey(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Adds a category to the list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * the category must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void add(Category toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            // increase the value by 1 if toAdd is already added to the list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            categoryMap.put(toAdd, categoryMap.get(toAdd) + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            //first occurrence of toAdd"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            categoryMap.put(toAdd, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Adds a category to the list from a set"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * the category must not already exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void add(Set\u003cCategory\u003e categorySet) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(categorySet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categorySet.forEach(category -\u003e add(category));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Removes the equivalent flashCard from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void remove(Category toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (canRemove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            categoryMap.remove(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            internalList.remove(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            categoryMap.put(toRemove, categoryMap.get(toRemove) - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void remove(Set\u003cCategory\u003e categorySet) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categorySet.forEach(category -\u003e remove(category));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Return true if the {@code toRemove} is last occurrence"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private boolean canRemove(Category toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return categoryMap.get(toRemove) \u003d\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *  clear the entire list and map"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryMap.clear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ObservableList\u003cCategory\u003e asUnmodifiableObservablelist() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Iterator\u003cCategory\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof UniqueCategoryList"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCategoryList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deadline/BadQuestions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * BadQuestions class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Contains a Hashmap with questions that are rated as \u0027bad\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Each Question will be tagged to a specific DueDate, which will be referred to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * in the list of Deadlines"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class BadQuestions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private HashMap\u003cString, String\u003e internalMap \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //private JsonBadDeadlines jsonBadDeadlines;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public BadQuestions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //TODO: add initialisation of bad deadline list - load json"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public HashMap\u003cString, String\u003e getBadQuestionsList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return internalMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setBadQuestionsList(HashMap\u003cString, String\u003e map) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        internalMap \u003d map;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void addBadQuestion(DueDate d, Question q) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        internalMap.put(d.toString(), q.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void loadBadQuestions() throws FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //internalMap \u003d jsonBadDeadlines.loadJsonBadDeadlines();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static DueDate getBadDeadline() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        LocalDate due \u003d today.plusDays(3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String formattedDate \u003d due.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DueDate d \u003d new DueDate(formattedDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setBadQuestionsAsDeadline(Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Task task \u003d new Task(\"Bad Questions\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline deadline \u003d new Deadline(task, getBadDeadline());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        model.addDeadline(deadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Using Google\u0027s Gson library, save HashMap as a JSON Object and store it"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * in BadQuestions.json. This can later be used to fetch the \u0027bad\u0027 questions"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * to test in a future date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void saveAsJson(BadQuestions badQuestions) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String json \u003d gson.toJson(badQuestions.getBadQuestionsList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            //TODO: fix load and save json, json save replace file instead of appending"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            FileWriter writer \u003d new FileWriter(\"data/BadDeadlines.json\", true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            writer.write(json);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deadline/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Represents a FlashCard in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deadlines are of dd/MM/yyyy Format.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // TODO: for comparison of deadlines for each flashcard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //public static LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //public static String dateStr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //public static LocalDate localDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final DueDate dueDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Deadline(Task task, DueDate dueDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireAllNonNull(task, dueDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DueDate getDueDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns true if both Deadlines have the same task and due date fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!(other instanceof Deadline)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline otherDeadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return otherDeadline !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u0026\u0026 otherDeadline.toString().equals(this.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return Objects.hash(task, dueDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        builder.append(getTask())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                .append(\" Due Date: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                .append(getDueDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deadline/DueDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Represents a Deadline\u0027s Due Date in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DueDate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deadlines are of dd/MM/yyyy Format.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            + \"E.g.: 12/01/2019.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //private static LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final String dateStr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final LocalDate localDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param deadline A valid DueDate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DueDate(String deadline) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.dateStr \u003d deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(deadline, formatter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        checkArgument(isValidDate(deadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.localDate \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            dateFormat.parse(test.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return this.dateStr;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return dateStr.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deadline/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Represents a Deadline\u0027s Question in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTask(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \"Task can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * The first character of the question must not be a whitespace"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public final String fullTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param task A valid Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        checkArgument(isValidTask(task), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        fullTask \u003d task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static boolean isValidTask(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return fullTask;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                || (other instanceof Task // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u0026\u0026 fullTask.equals(((Task) other).fullTask)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return fullTask.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deadline/TaskContainsAllKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Tests that a {@code Deadline}\u0027s {@code Task} matches all of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class TaskContainsAllKeywordsPredicate implements Predicate\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public TaskContainsAllKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean test(Deadline deadline) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(deadline.getTask().fullTask, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                || (other instanceof TaskContainsAllKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u0026\u0026 keywords.equals(((TaskContainsAllKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deadline/UniqueDeadlineList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.exceptions.DeadlineNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.exceptions.DuplicateDeadlineException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashCardNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * A list of Deadlines that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * A Deadline is considered unique by comparing using {@code Deadline#equals(Deadline)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * As such, adding and updating of deadlines uses Deadline#equals(Deadline) for equality"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * so as to ensure that the flash card being added or updated"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * is unique in terms of identity in the UniqueDeadlineList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class UniqueDeadlineList implements Iterable\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final ObservableList\u003cDeadline\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final ObservableList\u003cDeadline\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns true if the list contains an equivalent Deadline as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean contains(Deadline toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Adds a deadline to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void add(Deadline toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DuplicateDeadlineException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Replaces the deadline {@code target} in the list with {@code editedDeadline}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * The flashCard identity of {@code editedDeadline} must not be the same as another"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * existing deadline in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setDeadline(Deadline target, Deadline editedDeadline) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireAllNonNull(target, editedDeadline);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new FlashCardNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!target.equals(editedDeadline) \u0026\u0026 contains(editedDeadline)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DuplicateDeadlineException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        internalList.set(index, editedDeadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setDeadline(UniqueDeadlineList replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Removes the equivalent Deadline from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * The Deadline must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void remove(Deadline toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DeadlineNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Replaces the contents of this list with {@code flashCards}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * {@code flashCards} must not contain duplicate flashCards."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setDeadlines(List\u003cDeadline\u003e deadlines) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        requireAllNonNull(deadlines);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!deadlinesAreUnique(deadlines)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DuplicateDeadlineException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        internalList.setAll(deadlines);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public ObservableList\u003cDeadline\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Iterator\u003cDeadline\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                || (other instanceof UniqueDeadlineList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueDeadlineList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns true if {@code flashCards} contains only unique flashCards."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private boolean deadlinesAreUnique(List\u003cDeadline\u003e deadlines) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (int i \u003d 0; i \u003c deadlines.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            for (int j \u003d i + 1; j \u003c deadlines.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                if (deadlines.get(i).equals(deadlines.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deadline/exceptions/DeadlineNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Signals that the operation is unable to find the specified flashCard."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DeadlineNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deadline/exceptions/DuplicateDeadlineException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Signals that the operation will result in duplicate Deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * (Deadline are considered duplicates if they have the same"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DuplicateDeadlineException extends RuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DuplicateDeadlineException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(\"Operation would result in duplicate deadlines\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/DirectoryPath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Represents a directory path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class DirectoryPath {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"Directory path may only consist of alphanumeric characters, spaces, and the following characters:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    + \"~\\\\/-_!:[]()\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * The following characters are allowed (in addition to alphanumeric):"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * ~\\/-_!:[]()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Space is allowed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[~.\\\\w\\\\-!:\\\\[\\\\]()/\\\\\\\\ ]+\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static final String CURRENT_DIRECTORY_PATH_STRING \u003d \"./\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Constructs a {@code DirectoryPath}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param directoryPath A valid DirectoryPath."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public DirectoryPath(Path directoryPath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (directoryPath \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            path \u003d Paths.get(CURRENT_DIRECTORY_PATH_STRING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        checkArgument(isValid(directoryPath.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        path \u003d directoryPath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Returns true if a given string is a valid DirectoryPath."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Creates this DirectoryPath if it is not yet present."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws IOException If there is an error in creating the DirectoryPath."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void createIfNotPresent() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            Files.createDirectories(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || (other instanceof DirectoryPath // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 path.equals(((DirectoryPath) other).path)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path.hashCode();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/DocumentExportUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.apache.poi.xwpf.usermodel.XWPFDocument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.apache.poi.xwpf.usermodel.XWPFParagraph;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.apache.poi.xwpf.usermodel.XWPFRun;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Utility class that handles exporting of FlashCards to an external document file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class DocumentExportUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Exports a List of FlashCards to a file at the given DocumentPath."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param cards List of FlashCards"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param documentPath DocumentPath to export the FlashCards to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws IOException If an error arises in writing to the File."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static void exportFlashCardsToDocument(List\u003cFlashCard\u003e cards, DocumentPath documentPath) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireAllNonNull(cards, documentPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert DocumentPath.isValid(documentPath.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert cards.size() \u003e 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        XWPFDocument doc \u003d new XWPFDocument();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (FlashCard card : cards) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            addFlashCardToDocument(card, doc);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            writeDocumentToFile(doc, documentPath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Adds a String representation of the given FlashCard to the given XWPFDocument."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Also handles related concerns (such as formatting and line breaks)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param card The FlashCard to add to the XWPFDocument."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param doc The XWPFDocument to which the FlashCard will be added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static void addFlashCardToDocument(FlashCard card, XWPFDocument doc) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireAllNonNull(card, doc);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        Question question \u003d card.getQuestion();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        Answer answer \u003d card.getAnswer();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        XWPFParagraph paragraph \u003d doc.createParagraph();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        addRun(paragraph, question.toString(), true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        addLineBreak(paragraph);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        addRun(paragraph, answer.toString(), false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Adds a run to the given XWPFParagraph, containing the specified text and with the specified boldface."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param paragraph Paragraph that we will add a run to."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param text Text to add in paragraph"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param isBold Whether the run should be bold"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static void addRun(XWPFParagraph paragraph, String text, boolean isBold) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireAllNonNull(paragraph, text);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        XWPFRun run \u003d paragraph.createRun();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        run.setText(text);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        run.setBold(isBold);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Adds a line break to the given XWPFParagraph."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param paragraph XWPFParagraph to add line break to."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static void addLineBreak(XWPFParagraph paragraph) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(paragraph);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        XWPFRun run \u003d paragraph.createRun();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        run.addCarriageReturn();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Writes a given XWPFDocument to a File at the given DocumentPath."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param doc XWPFDocument to write."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param documentPath File to write the document to."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws IOException If there is an error in writing to the File."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static void writeDocumentToFile(XWPFDocument doc, DocumentPath documentPath) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireAllNonNull(doc, documentPath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert DocumentPath.isValid(documentPath.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            FileOutputStream out \u003d new FileOutputStream(documentPath.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            doc.write(out);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            doc.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/DocumentFilePath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Represents the path to a document from its immediate parent directory."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class DocumentFilePath {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"Document file path may only consist of alphanumeric characters, spaces, and the following characters:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    + \"-_![]()\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    + \"It must also end with \\\".docx\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\w\\\\-!\\\\[\\\\]() ]+\\\\.[Dd][Oo][Cc][Xx]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Constructs a {@code DocumentFilePath}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param documentFilePath A valid document file path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public DocumentFilePath(String documentFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(documentFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        checkArgument(isValid(documentFilePath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        path \u003d Paths.get(documentFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Returns true if a given string is a valid document file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || (other instanceof DocumentFilePath // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 path.equals(((DocumentFilePath) other).path)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/DocumentPath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Represents the full path to a document, including parent directories."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class DocumentPath extends ExportPath {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"Document path may only consist of alphanumeric characters, spaces, and the following characters:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"~\\\\/-_!:[]()\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"It must also end with \\\".docx\\\".\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * The following characters are allowed (in addition to alphanumeric):"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * ~\\/-_!:[]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Space is allowed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * DocumentPath is required to end with the String: \".docx\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[.~\\\\w\\\\-!:\\\\[\\\\]()/\\\\\\\\ ]+\\\\.[Dd][Oo][Cc][Xx]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final DirectoryPath directoryPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final DocumentFilePath documentFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Constructs a {@code DocumentPath}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param documentPath A valid document path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public DocumentPath(String documentPath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(documentPath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        checkArgument(isValid(documentPath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        this.directoryPath \u003d extractDirectoryPath(documentPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        this.documentFilePath \u003d extractDocumentFilePath(documentPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Returns true if a given string is a valid document path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper method to get the document file path from a given String."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param documentFilePathString String representing the full path of a document"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return DocumentFilePath representing the path of the document, relative to its immediate parent directory"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static DocumentFilePath extractDocumentFilePath(String documentFilePathString) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(documentFilePathString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return new DocumentFilePath("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                ExportPath.extractFilePathNoDirectoryString("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        documentFilePathString"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                )"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        Path dirPath \u003d directoryPath.getPath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        Path docFilePath \u003d documentFilePath.getPath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return dirPath.resolve(docFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return directoryPath.toString() + File.separator + documentFilePath.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void export(List\u003cFlashCard\u003e list) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            directoryPath.createIfNotPresent();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            DocumentExportUtil.exportFlashCardsToDocument(list, this);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || (other instanceof DocumentPath // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 directoryPath.equals(((DocumentPath) other).directoryPath)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 documentFilePath.equals(((DocumentPath) other).documentFilePath)); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return directoryPath.hashCode() + documentFilePath.hashCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public Optional\u003cList\u003cFlashCard\u003e\u003e importFrom() throws UnsupportedOperationException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        throw new UnsupportedOperationException("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \"Importing from document file is not supported.\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/ExportPath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Abstract class from which all export paths inherit. A subclass of this would store the path to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * an export file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Please note: the word \"export\" is used in the capacity of a noun, and not a verb. This is not \"the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * path that we export to\", but rather \"the path of one of our exports\". As such, this same class is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * used by both the {@code export} and {@code import} commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public abstract class ExportPath {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public abstract Path getPath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public abstract void export(List\u003cFlashCard\u003e list) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public abstract Optional\u003cList\u003cFlashCard\u003e\u003e importFrom()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throws DataConversionException, UnsupportedOperationException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper method to get the directory path from a given String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param exportPathString String representing the full path of a document"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return DirectoryPath representing the path of the most nested directory within the given String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    static DirectoryPath extractDirectoryPath(String exportPathString) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(exportPathString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return new DirectoryPath("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                Paths.get("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        exportPathString"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                )"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .getParent()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Converts the ExportPath to a String representing the absolute path. Note that this is not the same as calling"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * toString()."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return String representing the absolute path of this ExportPath"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public String toAbsolutePathString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return this"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .getPath()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .toAbsolutePath()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .normalize()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Given a String representing a file path, extract the portion of the String that corresponds to the path"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * to the file from its immediate parent directory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * e.g. {@code extractFilePathNoDirectoryString(\"folder/directory/file.ext\")} will return {@code \"file.ext\"}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param fullPathString String representing the full file path"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return String representing path to the file from its immediate parent directory"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    static String extractFilePathNoDirectoryString(String fullPathString) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(fullPathString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        Path fullPath \u003d Paths.get(fullPathString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        int nameCount \u003d fullPath.getNameCount();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return fullPath"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .subpath(nameCount - 1, nameCount)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/ExportPathFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Class used for creating of {@code ExportPath}s. Follows the factory pattern."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class ExportPathFactory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_PATH \u003d \"The file path you have provided is not allowed.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"File paths must consist entirely of alphanumeric characters, spaces, and the following:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"~\\\\/-_!:[]()\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"It must also have one of the following extensions:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"\u0027.docx\u0027, \u0027.json\u0027\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Creates an {@code ExportPath} from a given String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param exportPath String representing the path of the file that we plan to export to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return ExportPath that represents the same path as the given String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws IllegalArgumentException if the given String does not match the format of any of the ExportPaths"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static ExportPath getExportPath(String exportPath) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(exportPath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (DocumentPath.isValid(exportPath)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return new DocumentPath(exportPath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } else if (JsonExportPath.isValid(exportPath)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return new JsonExportPath(exportPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_ILLEGAL_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/JsonExportFilePath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Represents the path to a JSON export file from its immediate parent directory."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class JsonExportFilePath {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"JSON export file path may only consist of alphanumeric characters, spaces, and the following characters:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    + \"-_![]()\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    + \"It must also end with \\\".json\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\w\\\\-!\\\\[\\\\]() ]+\\\\.[Jj][Ss][Oo][Nn]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Constructs a {@code JsonExportFilePath}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param jsonExportFilePath A valid JSON export file path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public JsonExportFilePath(String jsonExportFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(jsonExportFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        checkArgument(isValid(jsonExportFilePath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        path \u003d Paths.get(jsonExportFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Returns true if a given string is a valid jsonExport file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || (other instanceof JsonExportFilePath // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 path.equals(((JsonExportFilePath) other).path)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return path.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/JsonExportPath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Represents the full path to a JSON export file, including parent directories."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class JsonExportPath extends ExportPath {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"JSON export file path may only consist of alphanumeric characters, spaces, and the following characters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"~\\\\/-_!:[]()\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            + \"It must also end with \\\".json\\\".\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * The following characters are allowed (in addition to alphanumeric):"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * ~\\/-_!:[]()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Space is allowed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Required to end with the String: \".json\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[.~\\\\w\\\\-!:\\\\[\\\\]()/\\\\\\\\ ]+\\\\.[Jj][Ss][Oo][Nn]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final DirectoryPath directoryPath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private final JsonExportFilePath jsonExportFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Constructs a {@code JsonExportPath}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param jsonExportPath A valid JSON export path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public JsonExportPath(String jsonExportPath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(jsonExportPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        checkArgument(isValid(jsonExportPath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        this.directoryPath \u003d extractDirectoryPath(jsonExportPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        this.jsonExportFilePath \u003d extractJsonExportFilePath(jsonExportPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Returns true if a given string is a valid json export path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper method to get the JSON export file path from a given String."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param jsonExportPathString String representing the full path of a JSON export file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return JsonExportFilePath representing the path of the JSON export file,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * relative to its immediate parent directory"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static JsonExportFilePath extractJsonExportFilePath(String jsonExportPathString) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(jsonExportPathString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return new JsonExportFilePath("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                ExportPath.extractFilePathNoDirectoryString(jsonExportPathString)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        Path dirPath \u003d directoryPath.getPath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        Path jsonFilePath \u003d jsonExportFilePath.getPath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return dirPath.resolve(jsonFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return directoryPath.toString() + File.separator + jsonExportFilePath.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void export(List\u003cFlashCard\u003e list) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(list);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            directoryPath.createIfNotPresent();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            JsonExportUtil.exportFlashCardsToJson(list, this);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public Optional\u003cList\u003cFlashCard\u003e\u003e importFrom() throws DataConversionException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return JsonImportUtil.importFlashCardsFromJson("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                this"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                || (other instanceof JsonExportPath // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 directoryPath.equals(((JsonExportPath) other).directoryPath)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                \u0026\u0026 jsonExportFilePath.equals(((JsonExportPath) other).jsonExportFilePath)); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return directoryPath.hashCode() + jsonExportFilePath.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/JsonExportUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.storage.JsonKeyboardFlashCardsStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Utility class that handles exporting of FlashCards to an external json file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class JsonExportUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Exports a List of FlashCards to a file at the given JsonExportPath."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param cards List of FlashCards"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param jsonExportPath JsonExportPath to export the FlashCards to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws IOException If an error arises in writing to the File."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static void exportFlashCardsToJson(List\u003cFlashCard\u003e cards, JsonExportPath jsonExportPath) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireAllNonNull(cards, jsonExportPath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert cards.size() \u003e 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert JsonExportPath.isValid(jsonExportPath.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        KeyboardFlashCards exportKfc \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        exportKfc.setFlashCards(cards);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        JsonKeyboardFlashCardsStorage jsonStorage \u003d new JsonKeyboardFlashCardsStorage("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                jsonExportPath.getPath()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        jsonStorage.saveAddressBook(exportKfc);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/export/JsonImportUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.storage.JsonKeyboardFlashCardsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Utility class that handles importing of FlashCards from an external json file (not the data save file)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class JsonImportUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Imports a List of FlashCards from a file at the given JsonExportPath"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param jsonExportPath Path of the file to import from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return Optional List of FlashCards that were imported from the given file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws IOException If there is an error in accessing or reading from the file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @throws DataConversionException If there is an error in converting the data from the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static Optional\u003cList\u003cFlashCard\u003e\u003e importFlashCardsFromJson(JsonExportPath jsonExportPath)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(jsonExportPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assert JsonExportPath.isValid(jsonExportPath.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return readFromOptionalKfc("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                getOptionalKfc("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        jsonExportPath"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                )"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static Optional\u003cReadOnlyKeyboardFlashCards\u003e getOptionalKfc(JsonExportPath jsonExportPath)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(jsonExportPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        JsonKeyboardFlashCardsStorage jsonStorage \u003d new JsonKeyboardFlashCardsStorage("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                jsonExportPath.getPath()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return jsonStorage.readKeyboardFlashCards();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Reads an Optional {@code KeyboardFlashCards}. Returns an Optional {@code List} of {@code FlashCard}s. If the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * provided Optional is empty, the returned Optional will also be empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param optionalKfc Optional KeyboardFlashCards"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return Optional List of {@code FlashCard}s, representing all the {@code FlashCard}s in the provided"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * {@code KeyboardFlashCards} Optional."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private static Optional\u003cList\u003cFlashCard\u003e\u003e readFromOptionalKfc(Optional\u003cReadOnlyKeyboardFlashCards\u003e optionalKfc) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        requireNonNull(optionalKfc);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (!optionalKfc.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        ReadOnlyKeyboardFlashCards importedKfc \u003d optionalKfc.get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return Optional.of("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                importedKfc.getFlashcardList()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Represents a FlashCard\u0027s answer in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \"Answer can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public final String fullAnswer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        fullAnswer \u003d answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if a given string is a valid answer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return fullAnswer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 fullAnswer.equals(((Answer) other).fullAnswer)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return fullAnswer.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/AnswerContainsAnyKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//@@author ShuTingY"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Tests that a {@code FlashCard}\u0027s {@code Answer} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class AnswerContainsAnyKeywordsPredicate implements Predicate\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public AnswerContainsAnyKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean test (FlashCard flashcard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(flashcard.getAnswer().fullAnswer, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof AnswerContainsAnyKeywordsPredicate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 keywords.equals(((AnswerContainsAnyKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Represents a FlashCard\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/FlashCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Represents a FlashCard in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FlashCard {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCard(Question question, Answer answer, Rating rating, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireAllNonNull(question, answer, rating, categories);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns an immutable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if both flash cards of the same question have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * This defines a weaker notion of equality between two flash cards."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean isSameFlashCard(FlashCard otherFlashCard) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (otherFlashCard \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return otherFlashCard !\u003d null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 otherFlashCard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 (otherFlashCard.getAnswer().equals(getAnswer()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if both flash cards have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * This defines a stronger notion of equality between two flash cards."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!(other instanceof FlashCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard otherFlashCard \u003d (FlashCard) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return otherFlashCard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 otherFlashCard.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 otherFlashCard.getRating().equals(getRating())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 otherFlashCard.getCategories().equals(getCategories());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return Objects.hash(question, answer, rating, categories);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        builder.append(\"Question: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .append(\" Answer: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .append(getAnswer());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!getCategories().isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            builder.append(\" Categories: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 47,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Represents a FlashCard\u0027s Question in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \"Question can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The first character of the question must not be a whitespace"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public final String fullQuestion;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        fullQuestion \u003d question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return fullQuestion;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 fullQuestion.equals(((Question) other).fullQuestion)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return fullQuestion.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 20,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/QuestionContainsAllKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//@@author ShuTingY"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Tests that a {@code FlashCard}\u0027s {@code Question} matches all of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class QuestionContainsAllKeywordsPredicate implements Predicate\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public QuestionContainsAllKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean test(FlashCard flashCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(flashCard.getQuestion().fullQuestion, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof QuestionContainsAllKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsAllKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/QuestionContainsAnyKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Tests that a {@code FlashCard}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class QuestionContainsAnyKeywordsPredicate implements Predicate\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public QuestionContainsAnyKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean test(FlashCard flashCard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(flashCard.getQuestion().fullQuestion, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof QuestionContainsAnyKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsAnyKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/QuestionOrAnswerContainsAnyKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Tests that a {@code FlashCard}\u0027s {@code Question/Answer} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class QuestionOrAnswerContainsAnyKeywordsPredicate implements Predicate\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public QuestionOrAnswerContainsAnyKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean test(FlashCard flashCard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(flashCard.getQuestion().fullQuestion, keyword)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || StringUtil.containsWordIgnoreCase(flashCard.getAnswer().fullAnswer, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof QuestionOrAnswerContainsAnyKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionOrAnswerContainsAnyKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Rating.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Represents a FlashCard\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Rating can only be good, hard or easy\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String GOOD \u003d \"good\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String EASY \u003d \"easy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String NULL \u003d \"null\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Constructs an {@code Rating}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        value \u003d rating;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if a given string is a valid rating."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return test.matches(GOOD) || test.matches(EASY) || test.matches(HARD) || test.matches(NULL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 21,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/UniqueFlashCardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashCardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashCardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A list of flash cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A flash card is considered unique by comparing using {@code FlashCard#isSameFlashCard(FlashCard)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * As such, adding and updating of flash cards uses FlashCard#isSameFlashCard(FlashCard) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * so as to ensure that the flash card being added or updated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * is unique in terms of identity in the UniqueFlashCardList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * However, the removal of a flashCard uses FlashCard#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * as to ensure that the flashCard with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see FlashCard#isSameFlashCard(FlashCard)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class UniqueFlashCardList implements Iterable\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final ObservableList\u003cFlashCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final ObservableList\u003cFlashCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if the list contains an equivalent flashCard as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean contains(FlashCard toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashCard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Adds a flashCard to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void add(FlashCard toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DuplicateFlashCardException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Replaces the flashCard {@code target} in the list with {@code editedFlashCard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard identity of {@code editedFlashCard} must not be the same as another existing flashCard in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashcard(FlashCard target, FlashCard editedFlashCard) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireAllNonNull(target, editedFlashCard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new FlashCardNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!target.isSameFlashCard(editedFlashCard) \u0026\u0026 contains(editedFlashCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DuplicateFlashCardException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        internalList.set(index, editedFlashCard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Removes the equivalent flashCard from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * The flashCard must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void remove(FlashCard toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new FlashCardNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCards(UniqueFlashCardList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Replaces the contents of this list with {@code flashCards}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * {@code flashCards} must not contain duplicate flashCards."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCards(List\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireAllNonNull(flashCards);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!flashCardsAreUnique(flashCards)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DuplicateFlashCardException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        internalList.setAll(flashCards);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Iterator\u003cFlashCard\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                || (other instanceof UniqueFlashCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFlashCardList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns true if {@code flashCards} contains only unique flashCards."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private boolean flashCardsAreUnique(List\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (int i \u003d 0; i \u003c flashCards.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashCards.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                if (flashCards.get(i).isSameFlashCard(flashCards.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashCardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Signals that the operation will result in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * duplicate flashcards (Flashcards are considered duplicates"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class DuplicateFlashCardException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public DuplicateFlashCardException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 7,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/FlashCardNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Signals that the operation is unable to find the specified flashCard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FlashCardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.deadline.DueDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.deadline.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Contains utility methods for populating {@code KeyboardFlashCards} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static FlashCard[] getSampleFlashcards() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new FlashCard[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCard(new Question(\"What is pointer in C\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    new Answer(\"A pointer variable stores the address of a memory location\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new Rating(\"easy\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                getCategorySet(\"CS2100\", \"C\", \"POINTER\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCard(new Question(\"How to declare a pointer in C\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    new Answer(\"\u0026 + variable name\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    new Rating(\"easy\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                getCategorySet(\"CS2100\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCard(new Question(\"What is internet \"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    new Answer(\"The Internet is a network of connected computing devices\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    new Rating(\"easy\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                getCategorySet(\"CS2105\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCard(new Question(\"How is data transmitted through net\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    new Answer(\"Circuit switching / Packet switching\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new Rating(\"good\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                getCategorySet()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCard(new Question(\"What is link transmission rate\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    new Answer(\"It is aka link capacity or link bandwidth\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new Rating(\"easy\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                getCategorySet())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static Deadline[] getSampleDeadline() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new Deadline[]{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new Deadline(new Task(\"CS2103 Final Project Submission\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        new DueDate(\"10/11/2019\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new Deadline(new Task(\"CS2101 User Guide Submission\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        new DueDate(\"12/11/2019\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static ReadOnlyKeyboardFlashCards getSampleAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards sampleAb \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (FlashCard sampleFlashCard : getSampleFlashcards()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            sampleAb.addFlashcard(sampleFlashCard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (Deadline sampleDeadline: getSampleDeadline()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            sampleAb.addDeadline(sampleDeadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static Set\u003cCategory\u003e getCategorySet(String... strings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 48,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Constructs a {@code JsonAdaptedCategory} with the given {@code categoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public JsonAdaptedCategory(String categoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Converts a given {@code Category} into this class for Json use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryName \u003d source.categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code Category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!Category.isValidCategoryName(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new Category(categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDeadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.DueDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@author dalsontws"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Jackson-friendly version of {@link Deadline}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class JsonAdaptedDeadline {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deadline\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final String task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeadline} with the given deadline details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public JsonAdaptedDeadline(@JsonProperty(\"task\") String task,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                               @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Converts a given {@code Deadline} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public JsonAdaptedDeadline(Deadline source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        task \u003d source.getTask().fullTask;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        date \u003d source.getDueDate().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Converts this Jackson-friendly adapted deadline object into the model\u0027s {@code Deadline} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashCard."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Deadline toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                            Task.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!Task.isValidTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new IllegalValueException(Task.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        final Task modelTask \u003d new Task(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, DueDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!DueDate.isValidDate(date)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new IllegalValueException(DueDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        final DueDate modelDueDate \u003d new DueDate(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new Deadline(modelTask, modelDueDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFlashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Jackson-friendly version of {@link FlashCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FlashCard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashCard details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                                @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                                @JsonProperty(\"rating\") String rating,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                                @JsonProperty(\"categories\") List\u003cJsonAdaptedCategory\u003e categories) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (categories !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.categories.addAll(categories);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Converts a given {@code FlashCard} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public JsonAdaptedFlashcard(FlashCard source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        question \u003d source.getQuestion().fullQuestion;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answer \u003d source.getAnswer().fullAnswer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Converts this Jackson-friendly adapted flashCard object into the model\u0027s {@code FlashCard} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashCard."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final List\u003cCategory\u003e flashCardCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (JsonAdaptedCategory category : categories) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            flashCardCategories.add(category.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                            Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(flashCardCategories);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new FlashCard(modelQuestion, modelAnswer, modelRating, modelCategories);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 55,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonKeyboardFlashCardsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A class to access KeyboardFlashCards data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class JsonKeyboardFlashCardsStorage implements KeyboardFlashCardsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonKeyboardFlashCardsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public JsonKeyboardFlashCardsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Path getKeyboardFlashCardsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Optional\u003cReadOnlyKeyboardFlashCards\u003e readKeyboardFlashCards() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return readKeyboardFlashCards(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Similar to {@link #readKeyboardFlashCards()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Optional\u003cReadOnlyKeyboardFlashCards\u003e readKeyboardFlashCards(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Optional\u003cJsonSerializableKeyboardFlashCards\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                filePath, JsonSerializableKeyboardFlashCards.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyKeyboardFlashCards)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableKeyboardFlashCards(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 16,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableKeyboardFlashCards.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * An Immutable KeyboardFlashCards that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "class JsonSerializableKeyboardFlashCards {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcards list contains duplicate flashCard(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DEADLINE \u003d \"Deadlines list contains duplicate Deadline(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final List\u003cJsonAdaptedDeadline\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public JsonSerializableKeyboardFlashCards(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                                              @JsonProperty(\"deadlines\") List\u003cJsonAdaptedDeadline\u003e deadlines) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.deadlines.addAll(deadlines);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Converts a given {@code ReadOnlyKeyboardFlashCards} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableKeyboardFlashCards}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public JsonSerializableKeyboardFlashCards(ReadOnlyKeyboardFlashCards source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashcards.addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                source.getFlashcardList()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .map(JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlines.addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                source.getDeadlineList()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                .map(JsonAdaptedDeadline::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Converts this address book into the model\u0027s {@code KeyboardFlashCards} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public KeyboardFlashCards toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards keyboardFlashCards \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            FlashCard flashCard \u003d jsonAdaptedFlashcard.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (keyboardFlashCards.hasFlashcard(flashCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            keyboardFlashCards.addFlashcard(flashCard);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (JsonAdaptedDeadline jsonAdaptedDeadline : deadlines) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            Deadline deadline \u003d jsonAdaptedDeadline.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (keyboardFlashCards.hasDeadline(deadline)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DEADLINE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            keyboardFlashCards.addDeadline(deadline);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCards;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 28,
      "dalsontws": 17,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/KeyboardFlashCardsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Represents a storage for {@link KeyboardFlashCards}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public interface KeyboardFlashCardsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Path getKeyboardFlashCardsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns KeyboardFlashCards data as a {@link ReadOnlyKeyboardFlashCards}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Optional\u003cReadOnlyKeyboardFlashCards\u003e readKeyboardFlashCards() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @see #getKeyboardFlashCardsFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Optional\u003cReadOnlyKeyboardFlashCards\u003e readKeyboardFlashCards(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Saves the given {@link ReadOnlyKeyboardFlashCards} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyKeyboardFlashCards)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public interface Storage extends KeyboardFlashCardsStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Path getKeyboardFlashCardsFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Optional\u003cReadOnlyKeyboardFlashCards\u003e readKeyboardFlashCards() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Manages storage of KeyboardFlashCards data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private KeyboardFlashCardsStorage keyboardFlashCardsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public StorageManager(KeyboardFlashCardsStorage keyboardFlashCardsStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keyboardFlashCardsStorage \u003d keyboardFlashCardsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d KeyboardFlashCards methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Path getKeyboardFlashCardsFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCardsStorage.getKeyboardFlashCardsFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Optional\u003cReadOnlyKeyboardFlashCards\u003e readKeyboardFlashCards() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return readKeyboardFlashCards(keyboardFlashCardsStorage.getKeyboardFlashCardsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Optional\u003cReadOnlyKeyboardFlashCards\u003e readKeyboardFlashCards(Path filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCardsStorage.readKeyboardFlashCards(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        saveAddressBook(addressBook, keyboardFlashCardsStorage.getKeyboardFlashCardsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCardsStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 17,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CategoryListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Panel containing the list of Categories"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class CategoryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String FXML \u003d \"CategoryListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CategoryListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private ListView\u003cCategory\u003e categoryListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public CategoryListPanel(ObservableList\u003cCategory\u003e categoryList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryListView.setItems(categoryList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryListView.setCellFactory(listview -\u003e new CategoryListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Category} using a {@code Category}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    class CategoryListViewCell extends ListCell\u003cCategory\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        protected void updateItem(Category category, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            super.updateItem(category, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (empty || category \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                setGraphic(new CategoryPanel(category, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CategoryPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * An UI component that displays information of a {@code Category}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class CategoryPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String FXML \u003d \"CategoryListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public final Category category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Label categoryFx;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public CategoryPanel(Category category, int displayedIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryFx.setText(category.categoryName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!(other instanceof CategoryPanel)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryPanel card \u003d (CategoryPanel) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return category.equals(card.category);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeadlineListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DeadlineListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String FXML \u003d \"DeadlineListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeadlineListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private ListView\u003cDeadline\u003e deadlineListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DeadlineListPanel(ObservableList\u003cDeadline\u003e deadlineList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlineListView.setItems(deadlineList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlineListView.setCellFactory(listView -\u003e new DeadlineListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code FlashCard} using a {@code DeadlinePanel}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    class DeadlineListViewCell extends ListCell\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        protected void updateItem(Deadline deadline, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            super.updateItem(deadline, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            if (empty || deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                setGraphic(new DeadlinePanel(deadline, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeadlinePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author dalsontws"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * An UI component that displays information of a {@code FlashCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DeadlinePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String FXML \u003d \"DeadlineListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public final Deadline deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private HBox deadlineCardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private TextFlow task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Label dueDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DeadlinePanel(Deadline deadline, int displayedIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Text deadlineText \u003d new Text (deadline.getTask().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlineText.setId(\"deadlinetext\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        task.getChildren().add(deadlineText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //TODO: use date to colour code each deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //deadline.getDueDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dueDate.setText(\"Due Date: \" + deadline.getDueDate().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        /*todo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (false) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            deadlineText.setFill(Paint.valueOf(\"red\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (!(other instanceof DeadlinePanel)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DeadlinePanel card \u003d (DeadlinePanel) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u0026\u0026 deadline.equals(card.deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "dalsontws": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashCardListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FlashCardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String FXML \u003d \"FlashCardListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashCardListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private ListView\u003cFlashCard\u003e flashCardListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardListPanel(ObservableList\u003cFlashCard\u003e flashCardList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCardListView.setItems(flashCardList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCardListView.setCellFactory(listView -\u003e new FlashCardListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code FlashCard} using a {@code FlashCardPanel}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    class FlashCardListViewCell extends ListCell\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        protected void updateItem(FlashCard flashCard, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            super.updateItem(flashCard, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (empty || flashCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                setGraphic(new FlashCardPanel(flashCard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashCardPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * An UI component that displays information of a {@code FlashCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FlashCardPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String FXML \u003d \"FlashCardListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public final FlashCard flashCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardPanel(FlashCard flashCard, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.flashCard \u003d flashCard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        question.setText(flashCard.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answer.setText(\"Answer: \" + flashCard.getAnswer().fullAnswer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCard.getCategories().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.categoryName))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.categoryName)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (!(other instanceof FlashCardPanel)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCardPanel card \u003d (FlashCardPanel) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u0026\u0026 flashCard.equals(card.flashCard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 18,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import seedu.address.Main;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final InputStream x \u003d Main.class.getResourceAsStream(\"/images/Commands.png\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private final Image image \u003d new Image(x, 637, 886, true, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        super(FXML, stage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        imageView.setImage(image);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        FlowPane root \u003d new FlowPane(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        root.getChildren().addAll(imageView);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        ScrollPane sp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        sp.setContent(root);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        Scene scene \u003d new Scene(sp, 550, 400);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.ui.calendar.CalendarWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static String stylesheet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private FlashCardListPanel flashCardListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private DeadlineListPanel deadlineListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatsWindow statsWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private CategoryListPanel categoryListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private CalendarWindow calendarWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private StackPane flashcardListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private StackPane categoryListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private StackPane deadlineListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        setStyleSheet(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        statsWindow \u003d new StatsWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCardListPanel \u003d new FlashCardListPanel(logic.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashCardListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryListPanel \u003d new CategoryListPanel(logic.getCategoryList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryListPanelPlaceholder.getChildren().add(categoryListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlineListPanel \u003d new DeadlineListPanel(logic.getFilteredDeadlineList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlineListPanelPlaceholder.getChildren().add(deadlineListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getKeyboardFlashCardsFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@ author shutingy"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static void setStyleSheet(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        stylesheet \u003d guiSettings.getStyleSheets();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(stylesheet);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@ author shutingy"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static void setStylesheet(String newStylesheet) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        primaryStage.getScene().getStylesheets().remove(stylesheet);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        stylesheet \u003d newStylesheet;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(stylesheet);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@ author shutingy"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * modified the flashcardList for test mode"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void updateScene(TestFlashCardPanel testFlashCardPanel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        requireNonNull(testFlashCardPanel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(testFlashCardPanel.getRoot());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //@@ author shutingy"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * update the scene when test mode ended."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void handleEndTest() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashCardListPanel.getRoot());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the stats window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleStats() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!statsWindow.isShowing()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            statsWindow.show(logic.getModel());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            statsWindow.focus();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY(),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                 stylesheet);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        statsWindow.hide();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardListPanel getFlashCardListPanel() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return flashCardListPanel;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                handleStats();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (commandResult.isTestMode()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                updateScene(commandResult.getTestFlashCardPanel());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (commandResult.isEndTest()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                handleEndTest();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 61,
      "dalsontws": 7,
      "-": 202
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "//@@author LeonardTay748"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "import seedu.address.model.flashcard.RatingContainsKeywordPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": " * Displays Statistics as Bar Chart"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "public class StatsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatsWindow.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final String FXML \u003d \"StatsWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final String good \u003d \"Good\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final String hard \u003d \"Hard\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    private static final String easy \u003d \"Easy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Creates a new StatsWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public StatsWindow() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        super(FXML, stage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Shows the stats window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void show(Model model) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        logger.fine(\"Showing stats page about the application.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        buildStatsWindow(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Scene Builder."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void buildStatsWindow(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final CategoryAxis xAxisA \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final NumberAxis yAxisA \u003d new NumberAxis();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final CategoryAxis xAxisB \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final NumberAxis yAxisB \u003d new NumberAxis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final NumberAxis xAxisC \u003d new NumberAxis();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final NumberAxis yAxisC \u003d new NumberAxis();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final BarChart\u003cString, Number\u003e bc1 \u003d new BarChart\u003c\u003e(xAxisA, yAxisA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final BarChart\u003cString, Number\u003e bc2 \u003d new BarChart\u003c\u003e(xAxisB, yAxisB);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        final LineChart\u003cNumber, Number\u003e lc \u003d new LineChart\u003c\u003e(xAxisC, yAxisC);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        bc1.setTitle(\"Total\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        bc2.setTitle(\"Completed in tests\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        lc.setTitle(\"Performance Chart\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        xAxisA.setLabel(\"Rating\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        yAxisA.setLabel(\"Number of FlashCards\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        xAxisB.setLabel(\"Rating\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        yAxisB.setLabel(\"Number of FlashCards\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        xAxisC.setLabel(\"Test Number\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        yAxisC.setLabel(\"Percentage\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        int numGood \u003d model.getFilteredFlashCardListNoCommit(new RatingContainsKeywordPredicate(\"good\")).size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        int numHard \u003d model.getFilteredFlashCardListNoCommit(new RatingContainsKeywordPredicate(\"hard\")).size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        int numEasy \u003d model.getFilteredFlashCardListNoCommit(new RatingContainsKeywordPredicate(\"easy\")).size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        int[] stats \u003d model.getTestStats();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        XYChart.Series seriesA \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        seriesA.getData().add(new XYChart.Data(good, numGood));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        seriesA.getData().add(new XYChart.Data(hard, numHard));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        seriesA.getData().add(new XYChart.Data(easy, numEasy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        XYChart.Series seriesB \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        seriesB.getData().add(new XYChart.Data(good, stats[0]));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        seriesB.getData().add(new XYChart.Data(hard, stats[1]));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        seriesB.getData().add(new XYChart.Data(easy, stats[2]));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        XYChart.Series seriesC \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        ArrayList\u003cInteger\u003e perform \u003d model.getPerformance();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        if (perform.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            seriesC.getData().add(new XYChart.Data(0, 0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            for (int i \u003d 0; i \u003c perform.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "                seriesC.getData().add(new XYChart.Data(i + 1, perform.get(i).intValue()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        bc1.getData().addAll(seriesA);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        bc2.getData().addAll(seriesB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        lc.getData().add(seriesC);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        removeLegend(bc1, bc2, lc);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        setColour(bc1, bc2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        FlowPane root \u003d new FlowPane(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        root.getChildren().addAll(bc1, bc2, lc);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        ScrollPane sp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        sp.setContent(root);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        Scene scene \u003d new Scene(sp, 550, 500);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        stage.setTitle(\"STATISTICS\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Removes the legend from bar charts since they are not required."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void removeLegend(BarChart\u003cString, Number\u003e bc1, BarChart\u003cString, Number\u003e bc2, LineChart\u003cNumber, Number\u003e lc) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        bc1.setLegendVisible(false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        bc2.setLegendVisible(false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        lc.setLegendVisible(false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Sets the bar chart colours to red, blue and green."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void setColour(BarChart\u003cString, Number\u003e bc1, BarChart\u003cString, Number\u003e bc2) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        Node n \u003d bc1.lookup(\".data0.chart-bar\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n.setStyle(\"-fx-bar-fill: blue\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n \u003d bc1.lookup(\".data1.chart-bar\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n.setStyle(\"-fx-bar-fill: red\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n \u003d bc1.lookup(\".data2.chart-bar\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n.setStyle(\"-fx-bar-fill: green\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        Node n2 \u003d bc2.lookup(\".data0.chart-bar\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n2.setStyle(\"-fx-bar-fill: blue\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n2 \u003d bc2.lookup(\".data1.chart-bar\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n2.setStyle(\"-fx-bar-fill: red\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n2 \u003d bc2.lookup(\".data2.chart-bar\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        n2.setStyle(\"-fx-bar-fill: green\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Returns true if the stats window is currently being shown."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Hides the stats window."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     * Focuses on the stats window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TestFlashCardPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.Separator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * An UI component that displays information of a {@code FlashCard}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class TestFlashCardPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String FXML \u003d \"FlashCardPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private HBox flashcardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private HBox questionBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private HBox answerBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Separator separator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public TestFlashCardPanel(FlashCard flashCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answer.setText(flashCard.getAnswer().fullAnswer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        question.setText(flashCard.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        setAnswerInvisible();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setAnswerInvisible() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answerBox.setVisible(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        separator.setVisible(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * display the answer in the gui"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void showAnswer() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answerBox.setVisible(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        separator.setVisible(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static String theme \u003d \"view/DarkTheme.css\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(theme);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 3,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/CalendarPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@author dalsontws"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Create an Calendar anchor pane that can store additional data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class CalendarPane extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // Date associated with this pane"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Create a anchor pane node. Date is not assigned in the constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param children children of the anchor pane"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public CalendarPane(Node... children) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(children);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Add action handler for mouse clicked"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.setOnMouseClicked(e -\u003e System.out.println(\"This pane\u0027s date is: \" + date));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dalsontws": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/CalendarWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@author dalsontws"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Controller for a calender page"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class CalendarWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CalendarWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String FXML \u003d \"fullCalendar.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Pane calendarPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Creates a new calendar Window."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public CalendarWindow(Stage primaryStage) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader(getClass().getResource(\"fullCalendar.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        primaryStage.setTitle(\"KeyboardFlashCards Calendar\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Scene scene \u003d new Scene(loader.load());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //scene.getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Get the controller and add the calendar view to it"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        calendarPane.getChildren().add(new FullCalendarView(YearMonth.now()).getView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 11,
      "dalsontws": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/FullCalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@author dalsontws"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Create FullCalendarView GUI"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * TODO: Replace calendar placeholder"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class FullCalendarView {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private ArrayList\u003cCalendarPane\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(35);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private VBox view;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Create a calendar view"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param yearMonth year month to create the calendar"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public FullCalendarView(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        currentYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Create the calendar grid pane"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        GridPane calendar \u003d new GridPane();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        calendar.setPrefSize(600, 400);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        calendar.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Create rows and columns with anchor panes for the calendar"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                CalendarPane ap \u003d new CalendarPane();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                ap.setPrefSize(200, 200);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                calendar.add(ap, j, i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                allCalendarDays.add(ap);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Days of the week labels"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Text[] dayNames \u003d new Text[]{new Text(\"Sunday\"), new Text(\"Monday\"), new Text(\"Tuesday\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            new Text(\"Wednesday\"), new Text(\"Thursday\"), new Text(\"Friday\"), new Text(\"Saturday\")};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        GridPane dayLabels \u003d new GridPane();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dayLabels.setPrefWidth(600);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Integer col \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (Text txt : dayNames) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            AnchorPane ap \u003d new AnchorPane();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ap.setPrefSize(200, 10);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ap.setBottomAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            dayLabels.add(ap, col++, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Create calendarTitle and buttons to change current month"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        calendarTitle \u003d new Text();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Button previousMonth \u003d new Button(\"\u003c\u003c\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        previousMonth.setOnAction(e -\u003e previousMonth());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Button nextMonth \u003d new Button(\"\u003e\u003e\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        nextMonth.setOnAction(e -\u003e nextMonth());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        HBox titleBar \u003d new HBox(previousMonth, calendarTitle, nextMonth);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        titleBar.setAlignment(Pos.BASELINE_CENTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Populate calendar with the appropriate day numbers"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        populateCalendar(yearMonth);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Create the calendar view"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        view \u003d new VBox(titleBar, dayLabels, calendar);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Set the days of the calendar to correspond to the appropriate date"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param yearMonth year and month of month to render"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void populateCalendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Get the date we want to start with on the calendar"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Dial back the day until it is SUNDAY (unless the month starts on a sunday)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Populate the calendar with day numbers"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (CalendarPane ap : allCalendarDays) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            if (ap.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                ap.getChildren().remove(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            Text txt \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ap.setDate(calendarDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ap.setTopAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ap.setLeftAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Change the title of the calendar"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        calendarTitle.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Move the month back by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private void previousMonth() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        populateCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Move the month forward by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private void nextMonth() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        populateCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public ArrayList\u003cCalendarPane\u003e getAllCalendarDays() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return allCalendarDays;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setAllCalendarDays(ArrayList\u003cCalendarPane\u003e allCalendarDays) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.allCalendarDays \u003d allCalendarDays;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 128
    }
  },
  {
    "path": "src/main/resources/view/BlueTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/* @@ author shutingy */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#e0f3ff, 20%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    background-color: #80d0ff; /* Used in the default.html file */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-base: #e0f3ff;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-control-inner-background: #e0f3ff;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #e0f3ff;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#e0f3ff, 20%);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: transparent transparent transparent black;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius:20;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#e0f3ff, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".separator *.line {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#e0f3ff, 20%);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius:30;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #cceeff;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #f0f8fc;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(#e0f3ff, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-color: derive(#f0ffff, 10%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#e0f3ff, 30%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#e0f3ff, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#f0ffff, 25%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#80d0ff, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#f0ffff, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#80d0ff, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#80d0ff, 50%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#80d0ff, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #80d0ff;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #80d0ff;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-text-fill: #80d0ff;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #80d0ff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #e0f3ff;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #e0f3ff;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#e0f3ff, 25%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f0f8fc, 20%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#80d0ff, 50%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#flashcardPane {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #e0f3ff;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#filterField, #flashcardListPanel, #categoriesListPanel {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent, #e0f3ff, transparent, #e0f3ff;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 6;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #1f4fad;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 40;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating .label {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #191c9a;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resulttext {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlinetext {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill:black"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categoryTitle {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #191970;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlineTitle {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #FF0000;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 400
    }
  },
  {
    "path": "src/main/resources/view/CategoryListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  \u003cleft\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "   \u003cLabel fx:id \u003d \"categoryFx\" text\u003d\"\\$category\" textAlignment\u003d\"CENTER\" styleClass\u003d\"cell_big_label\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  \u003c/left\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 12,
      "LeowWB": 1
    }
  },
  {
    "path": "src/main/resources/view/CategoryListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                  \u003cLabel fx:id \u003d \"categoryTitle\" text\u003d\"Categories\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                         wrapText\u003d\"false\" alignment\u003d\"CENTER\" layoutX\u003d\"14\" layoutY\u003d\"14\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                   styleClass\u003d\"cell_big_label\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      \u003cListView fx:id\u003d\"categoryListView\" prefHeight\u003d\"20\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 21
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius:30;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#flashcardPane {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#filterField, #flashCardListPanel, #personWebpage {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 6;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 40;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resulttext {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlinetext {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill:white;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating .label {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #191c9a;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categoryTitle {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #00bfff;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "#deadlineTitle {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    -fx-text-fill: #FF0000;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 40,
      "dalsontws": 5,
      "keiteo": 1,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/DeadlineListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003cHBox id\u003d\"deadlineCardPane\" fx:id\u003d\"deadlineCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"task\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003cSeparator\u003e\u003c/Separator\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003cLabel fx:id\u003d\"dueDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "dalsontws": 31,
      "keiteo": 2
    }
  },
  {
    "path": "src/main/resources/view/DeadlineListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                  \u003cLabel fx:id \u003d \"deadlineTitle\" text\u003d\"Deadlines\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                         wrapText\u003d\"false\" alignment\u003d\"CENTER\" layoutX\u003d\"14\" layoutY\u003d\"14\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                   styleClass\u003d\"cell_big_label\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "      \u003cListView fx:id\u003d\"deadlineListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 21
    }
  },
  {
    "path": "src/main/resources/view/FlashCardListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      \u003cSeparator\u003e\u003c/Separator\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 5,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/FlashCardListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  \u003cListView fx:id\u003d\"flashCardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/FlashCardPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003cHBox id\u003d\"flashcardPane\" fx:id\u003d\"flashcardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"200\" prefWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003cInsets top\u003d\"20\" right\u003d\"20\" bottom\u003d\"20\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cHBox fx:id\u003d\"questionBox\" spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003cLabel fx:id\u003d\"questionId\" text \u003d \"Question:\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cSeparator fx:id\u003d\"separator\" \u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    \u003cInsets top\u003d\"20\" bottom \u003d \"20\"\u003e\u003c/Insets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003c/Separator\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cHBox fx:id \u003d \"answerBox\" spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003cLabel fx:id\u003d\"answerId\" text \u003d\"Answer:\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 46
    }
  },
  {
    "path": "src/main/resources/view/HackerTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius:30;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00 !important;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/*"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#flashcardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"monospace\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#filterField, #flashCardListPanel, #personWebpage {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 6;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #5a7067;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 40;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resulttext {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: #26ff00;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlinetext {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill:#26ff00;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating .label {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #26ff00;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #191c9a;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categoryTitle {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #00bfff;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlineTitle {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #FF0000;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 392
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003cfx:root resizable\u003d\"true\" title\u003d\"Help\" maxWidth\u003d\"555\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\" maxWidth\u003d\"555\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cImageView"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                        fx:id\u003d\"imageView\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                        fitHeight\u003d\"762.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        fitWidth\u003d\"550.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                        layoutX\u003d\"61.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        layoutY\u003d\"83.0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        preserveRatio\u003d\"true\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/* @@ author shutingy */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f4f4f4, 20%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    background-color: #d0d0d0; /* Used in the default.html file */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-base: #f4f4f4;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-control-inner-background: #f4f4f4;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #f4f4f4;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f4f4f4, 20%);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: transparent transparent transparent black;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius:20;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f4f4f4, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".separator *.line {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f4f4f4, 20%);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #f4f4f4;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius:30;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ebebeb;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #fcfcfc;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(#f4f4f4, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-color: derive(#f0ffff, 10%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f4f4f4, 30%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f4f4f4, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#f0ffff, 25%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#d0d0d0, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#f0ffff, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#d0d0d0, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#d0d0d0, 50%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#d0d0d0, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #d0d0d0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #d0d0d0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-text-fill: #d0d0d0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #d0d0d0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #f4f4f4;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #f4f4f4;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f4f4f4, 25%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ededed, 20%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#d0d0d0, 50%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#flashcardPane {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ededed;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#filterField, #flashcardListPanel, #categoriesListPanel {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent, #f4f4f4, transparent, #f4f4f4;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 6;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #1f4fad;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 40;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating .label {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #191c9a;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resulttext {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlinetext {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill:black"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categoryTitle {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #191970;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlineTitle {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #FF0000;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 401
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "         title\u003d\"KeyboardFlashCards\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003cImage url\u003d\"@/images/icon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "           \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                 \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                 \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "             \u003cSplitPane dividerPositions\u003d\"0.2505567928730512, 0.7505567928730512\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        focusTraversable\u003d\"true\" prefHeight\u003d\"-1.0\" prefWidth\u003d\"-1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "               \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                 \u003cVBox fx:id\u003d\"categoryList\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" prefHeight\u003d\"50\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                     \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"categoryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                 \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                 \u003cVBox fx:id \u003d \"centreBlock\" minWidth\u003d\"300\" prefWidth\u003d\"300\" \u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                       \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"100\" maxHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                       \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                   \u003cVBox fx:id\u003d\"flashCardList\" minWidth\u003d\"300.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                       \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                 \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                 \u003cVBox fx:id\u003d\"deadlineList\" alignment\u003d\"CENTER\" minWidth\u003d\"150.0\" prefWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                     \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"deadlineListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                 \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "               \u003c/items\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "             \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keiteo"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keiteo"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 26,
      "LeowWB": 1,
      "dalsontws": 1,
      "keiteo": 12,
      "-": 45
    }
  },
  {
    "path": "src/main/resources/view/NUSTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/* @@ author shutingy */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffce8e, 20%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    background-color: #f07a01; /* Used in the default.html file */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-base: #ffce8e;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-control-inner-background: #ffce8e;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffce8e;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffce8e, 20%);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: transparent transparent transparent #f07a01;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius:20;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffce8e, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".separator *.line {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffce8e, 20%);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius:30;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffbe6a;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffeed7;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(#ffce8e, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-color: derive(#f07a01, 10%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffce8e, 30%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffce8e, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#f07a01, 25%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f07a01, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#f07a01, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f07a01, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f07a01, 50%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f07a01, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #f07a01;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #f07a01;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-text-fill: #f07a01;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #f07a01;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffce8e;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffce8e;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffce8e, 25%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: #003d7a;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffebcc, 20%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#f07a01, 50%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#flashcardPane {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffce8e;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #003d7a;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#filterField, #flashcardListPanel, #categoriesListPanel {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-effect: innershadow(gaussian, #003d7a, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent, #ffce8e, transparent, #ffce8e;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 6;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #1f4fad;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 40;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating .label {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #191c9a;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resulttext {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: #003d7a;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlinetext {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill:#003d7a"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categoryTitle {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #191970;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlineTitle {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #d60000;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 400
    }
  },
  {
    "path": "src/main/resources/view/PinkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/* @@ author shutingy */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive( #ffe4e1, 20%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    background-color: #ff69b4; /* Used in the default.html file */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #55555;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-base:  #ffe4e1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-control-inner-background:  #ffe4e1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color:  #ffe4e1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive( #ffe4e1, 20%);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: transparent transparent transparent black;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius:20;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive( #ffe4e1, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".separator *.line {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive( #ffe4e1, 20%);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: rgba(0,0,0,0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius:30;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-transparent: 50;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffb6c1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #fff0f5;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-background-color: derive( #ffe4e1, 20%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-color: derive(#f0ffff, 10%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive( #ffe4e1, 30%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive( #ffe4e1, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#f0ffff, 25%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffb6c1, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: derive(#f0ffff, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffb6c1, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffb6c1, 50%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffb6c1, 20%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffb6c1;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffb6c1;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  -fx-text-fill: #ffb6c1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffb6c1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color:  #ffe4e1;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color:  #ffe4e1;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive( #ffe4e1, 25%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ededed, 20%);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: derive(#ffb6c1, 50%);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#flashcardPane {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #ffe4e1;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#filterField, #flashcardListPanel, #categoriesListPanel {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: transparent, #ffe4e1, transparent, #ffe4e1;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 6;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #7b68ee;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 40;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#resulttext {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlinetext {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-fill:black"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#rating .label {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-color: #191c9a;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#categoryTitle {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #191970;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "#deadlineTitle {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-text-fill: #FF0000;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 400
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/fullCalendar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003cPane fx:id\u003d\"calendarPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"447.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.60\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"Controller\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final Index fifthFlashCardIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(fifthFlashCardIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(fifthFlashCardIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(fifthFlashCardIndex.equals(fifthFlashCardIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(fifthFlashCardIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(fifthFlashCardIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(fifthFlashCardIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.WWII;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.ListAllCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.storage.JsonKeyboardFlashCardsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonKeyboardFlashCardsStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new JsonKeyboardFlashCardsStorage(temporaryFolder.resolve(\"keyboardFlashCards.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String listCommand \u003d ListAllCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(listCommand, ListAllCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Setup LogicManager with JsonKeyboardFlashCardsIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonKeyboardFlashCardsStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new JsonKeyboardFlashCardsIoExceptionThrowingStub("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionKeyboardFlashCards.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_1 + ANSWER_DESC_1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard expectedFlashCard \u003d new FlashCardBuilder(WWII).withCatgeories().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.addFlashCard(expectedFlashCard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void getFilteredFlashCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashCardList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKeyboardFlashCards(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static class JsonKeyboardFlashCardsIoExceptionThrowingStub extends JsonKeyboardFlashCardsStorage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        private JsonKeyboardFlashCardsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 27,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_newFlashCard_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard validFlashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKeyboardFlashCards(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.addFlashCard(validFlashCard);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(new AddCommand(validFlashCard), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validFlashCard), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_duplicateFlashCards_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCardInList \u003d model.getKeyboardFlashCards().getFlashcardList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandFailure(new AddCommand(flashCardInList), model, AddCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 12,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.ui.TestFlashCardPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void constructor_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_flashCardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ModelStubAcceptingFlashCardAdded modelStub \u003d new ModelStubAcceptingFlashCardAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard validFlashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFlashCard).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFlashCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Arrays.asList(validFlashCard), modelStub.flashCardsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_duplicateFlashCard_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard validFlashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFlashCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashCard(validFlashCard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard alice \u003d new FlashCardBuilder().withQuestion(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard bob \u003d new FlashCardBuilder().withQuestion(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //same question different answer"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard aliceCopy \u003d new FlashCardBuilder(alice).withAnswer(\"123098\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        addAliceCommandCopy \u003d new AddCommand(aliceCopy);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //same question different category"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        aliceCopy \u003d new FlashCardBuilder(alice).withCatgeories(\"1234123\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        addAliceCommandCopy \u003d new AddCommand(aliceCopy);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //same question different rating"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        aliceCopy \u003d new FlashCardBuilder(alice).withRating(\"hard\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        addAliceCommandCopy \u003d new AddCommand(aliceCopy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //diff question others the same"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        aliceCopy \u003d new FlashCardBuilder(alice).withQuestion(\"sky\").build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        addAliceCommandCopy \u003d new AddCommand(aliceCopy);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard validFlashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFlashCard);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(addCommand.toString().equals(addCommand.toString()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //same value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AddCommand addComandCopy \u003d new AddCommand(validFlashCard);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(addCommand.toString().equals(addComandCopy.toString()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //same question diff answer"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        addComandCopy \u003d new AddCommand(new FlashCardBuilder(validFlashCard).withAnswer(\"wrong\").build());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(addCommand.toString().equals(addComandCopy.toString()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setStyleSheet(String string) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public String getStyleSheet() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public Path getKeyboardFlashCardsFilePath() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setKeyboardFlashCardsFilePath(Path keyboardFlashCardsFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void addFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setKeyboardFlashCards(ReadOnlyKeyboardFlashCards newData) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public ReadOnlyKeyboardFlashCards getKeyboardFlashCards() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public boolean hasFlashcard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void deleteFlashCard(FlashCard target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        public boolean hasDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        public void deleteDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setFlashCard(FlashCard target, FlashCard editedFlashCard) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public ObservableList\u003cFlashCard\u003e getFilteredFlashCardList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void updateFilteredFlashCardList(Predicate\u003cFlashCard\u003e predicate) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //@@author shutingy"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void updateFilteredCategoryList(Predicate\u003cCategory\u003e predicate) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setDeadline(Deadline target, Deadline editedDeadline) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public ObservableList\u003cDeadline\u003e getFilteredDeadlineList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void updateFilteredDeadlineList(Predicate\u003cDeadline\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        //@@author LeonardTay748"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        public int[] getTestStats() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        public void editStats(int type) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        public ArrayList\u003cInteger\u003e getPerformance() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        public void updatePerformance(Model model) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        public void resetPerformance(Model model) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        //@@author keiteo-reused"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        public void initializeTestModel(List\u003cFlashCard\u003e testList) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        public boolean hasTestFlashCard() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void setTestFlashCard() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        public String getTestQuestion() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        public String getTestAnswer() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public TestFlashCardPanel getTestFlashCardPanel() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        public ObservableList\u003cFlashCard\u003e getFlashCardList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        public FlashCard getCurrentTestFlashCard() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void showAnswer() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        //@@author LeowWB"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        public ObservableList\u003cFlashCard\u003e getFilteredFlashCardListNoCommit(Predicate\u003cFlashCard\u003e predicate) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * A Model stub that contains a single flashCard."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private class ModelStubWithFlashCard extends ModelStub {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        private final FlashCard flashCard;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ModelStubWithFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            requireNonNull(flashCard);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.flashCard \u003d flashCard;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public boolean hasFlashcard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            requireNonNull(flashCard);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return this.flashCard.isSameFlashCard(flashCard);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * A Model stub that always accept the flashCard being added."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private class ModelStubAcceptingFlashCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final ArrayList\u003cFlashCard\u003e flashCardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public boolean hasFlashcard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            requireNonNull(flashCard);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return flashCardsAdded.stream().anyMatch(flashCard::isSameFlashCard);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public void addFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            requireNonNull(flashCard);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            flashCardsAdded.add(flashCard);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public ReadOnlyKeyboardFlashCards getKeyboardFlashCards() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new KeyboardFlashCards();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 129,
      "LeowWB": 7,
      "LeonardTay748": 26,
      "dalsontws": 16,
      "keiteo": 14,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.setKeyboardFlashCards(new KeyboardFlashCards());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.TaskContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALID_QUESTION_1 \u003d \"When is WWII?\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALID_QUESTION_2 \u003d \"Where is NUS?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALID_ANSWER_1 \u003d \"1 September 1939 – 2 September 1945\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALID_ANSWER_2 \u003d \"Kent Ridge\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALID_RATING_1 \u003d \"good\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALID_RATING_2 \u003d \"easy\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALID_CATEGORY_HISTORY \u003d \"history\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String VALID_CATEGORY_LOCATION \u003d \"location\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String VALID_DOCUMENT_PATH_1 \u003d \"cheat_sheet.docx\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String VALID_DOCUMENT_PATH_2 \u003d \"cs2105.docx\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final String VALID_JSON_EXPORT_PATH_1 \u003d \"flashcards.json\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String QUESTION_DESC_1 \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_QUESTION + VALID_QUESTION_1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String QUESTION_DESC_2 \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_QUESTION + VALID_QUESTION_2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String ANSWER_DESC_1 \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_ANSWER + VALID_ANSWER_1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String ANSWER_DESC_2 \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_ANSWER + VALID_ANSWER_2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String RATING_DESC_1 \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_RATING + VALID_RATING_1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String RATING_DESC_2 \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_RATING + VALID_RATING_2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String CATEGORY_DESC_HISTORY \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_CATEGORY + VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String CATEGORY_DESC_LOCATION \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_CATEGORY + VALID_CATEGORY_LOCATION;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_QUESTION + \" \"; // \u0027 \u0027 not allowed in questions"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_ANSWER + \" \"; // \u0027 \u0027 not allowed in answers"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_RATING + \"fly\"; // empty string not allowed for rating"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \" \" + PREFIX_CATEGORY + \"hubby*\"; // \u0027*\u0027 not allowed in categories"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final EditFlashCardDescriptor DESC_1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final EditFlashCardDescriptor DESC_2;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        DESC_1 \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withQuestion(VALID_QUESTION_1)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withAnswer(VALID_ANSWER_1)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withRating(VALID_RATING_1)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withCategories(VALID_CATEGORY_LOCATION)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        DESC_2 \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withQuestion(VALID_QUESTION_2)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withRating(VALID_RATING_2)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withCategories(VALID_CATEGORY_HISTORY, VALID_CATEGORY_LOCATION)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * - the address book, filtered flashCard list and selected flashCard in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards expectedKeyboardFlashCards \u003d new KeyboardFlashCards(actualModel.getKeyboardFlashCards());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cFlashCard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedKeyboardFlashCards, actualModel.getKeyboardFlashCards());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the flashCard at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static void showFlashCardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCard \u003d model.getFilteredFlashCardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final String[] question \u003d flashCard.getQuestion().fullQuestion.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.updateFilteredFlashCardList(new QuestionContainsAllKeywordsPredicate(Arrays.asList(question)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(1, model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    //@@author dalsontws"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the deadline at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static void showDeadlineAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDeadlineList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline deadline \u003d model.getFilteredDeadlineList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        final String[] task \u003d deadline.getTask().fullTask.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        model.updateFilteredDeadlineList(new TaskContainsAllKeywordsPredicate(Arrays.asList(task)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(1, model.getFilteredDeadlineList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 77,
      "LeowWB": 3,
      "dalsontws": 18,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeadlineCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeadlineCommand(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline test \u003d new DeadlineBuilder().withTask(\"Test\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline exam \u003d new DeadlineBuilder().withTask(\"Exam\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DeadlineCommand addTestCommand \u003d new DeadlineCommand(test);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DeadlineCommand addExamCommand \u003d new DeadlineCommand(exam);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(addTestCommand.equals(addTestCommand));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DeadlineCommand addTestCommandCopy \u003d new DeadlineCommand(test);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(addTestCommand.equals(addTestCommandCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(addTestCommand.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(addTestCommand.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(addTestCommand.equals(addExamCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //same question different answer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline testCopy \u003d new DeadlineBuilder(test).withDueDate(\"22/12/2019\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        addTestCommandCopy \u003d new DeadlineCommand(testCopy);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(addTestCommandCopy.equals(testCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline validDeadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(validDeadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(deadlineCommand.toString().equals(deadlineCommand.toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //same value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        DeadlineCommand deadlineCommandCopy \u003d new DeadlineCommand(validDeadline);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(deadlineCommand.toString().equals(deadlineCommandCopy.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //same question diff answer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        deadlineCommandCopy \u003d new DeadlineCommand(new DeadlineBuilder(validDeadline).withDueDate(\"10/10/2019\").build());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(deadlineCommand.toString().equals(deadlineCommandCopy.toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashCardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCardToDelete \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashCardToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getKeyboardFlashCards(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.deleteFlashCard(flashCardToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashCardList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        showFlashCardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCardToDelete \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashCardToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKeyboardFlashCards(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.deleteFlashCard(flashCardToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        showFlashCardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getKeyboardFlashCards().getFlashcardList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        model.updateFilteredFlashCardList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(model.getFilteredFlashCardList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 28,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashCardAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedFlashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder(editedFlashCard).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KeyboardFlashCards(model.getKeyboardFlashCards()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.setFlashCard(model.getFilteredFlashCardList().get(0), editedFlashCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index indexLastFlashCard \u003d Index.fromOneBased(model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard lastFlashCard \u003d model.getFilteredFlashCardList().get(indexLastFlashCard.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCardBuilder flashCardInList \u003d new FlashCardBuilder(lastFlashCard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedFlashCard \u003d flashCardInList.withQuestion(VALID_QUESTION_2).withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withCatgeories(VALID_CATEGORY_HISTORY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder().withQuestion(VALID_QUESTION_2)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withAnswer(VALID_ANSWER_2).withCategories(VALID_CATEGORY_HISTORY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastFlashCard, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KeyboardFlashCards(model.getKeyboardFlashCards()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.setFlashCard(lastFlashCard, editedFlashCard);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, new EditFlashCardDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedFlashCard \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KeyboardFlashCards(model.getKeyboardFlashCards()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        showFlashCardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCardInFilteredList \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedFlashCard \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder(flashCardInFilteredList).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new EditFlashCardDescriptorBuilder().withQuestion(VALID_QUESTION_2).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KeyboardFlashCards(model.getKeyboardFlashCards()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.setFlashCard(model.getFilteredFlashCardList().get(0), editedFlashCard);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_duplicateFlashCardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard firstFlashCard \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder(firstFlashCard).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_duplicateFlashCardFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        showFlashCardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // edit flashCard in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCardInList \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                model.getKeyboardFlashCards().getFlashcardList().get(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new EditFlashCardDescriptorBuilder(flashCardInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_invalidFlashCardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashCardList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new EditFlashCardDescriptorBuilder().withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_invalidFlashCardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        showFlashCardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getKeyboardFlashCards().getFlashcardList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new EditFlashCardDescriptorBuilder().withQuestion(VALID_QUESTION_2).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, DESC_1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor copyDescriptor \u003d new EditFlashCardDescriptor(DESC_1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_FLASHCARD, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_FLASHCARD, DESC_1)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_FLASHCARD, DESC_2)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 75,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditFlashCardDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class EditFlashCardDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptorWithSameValues \u003d new EditFlashCardDescriptor(DESC_1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(DESC_1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(DESC_1.equals(DESC_1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(DESC_1.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(DESC_1.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(DESC_1.equals(DESC_2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new EditFlashCardDescriptorBuilder(DESC_1).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(DESC_1.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedAmy \u003d new EditFlashCardDescriptorBuilder(DESC_1).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(DESC_1.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedAmy \u003d new EditFlashCardDescriptorBuilder(DESC_1).withRating(VALID_RATING_2).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(DESC_1.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedAmy \u003d new EditFlashCardDescriptorBuilder(DESC_1).withCategories(VALID_CATEGORY_HISTORY).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(DESC_1.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 26,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOCUMENT_PATH_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOCUMENT_PATH_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JSON_EXPORT_PATH_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.deleteFileIfExists;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.isFilePresent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.NUS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.DocumentPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.JsonExportPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private DocumentPath firstDocumentPath \u003d new DocumentPath(VALID_DOCUMENT_PATH_1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private DocumentPath secondDocumentPath \u003d new DocumentPath(VALID_DOCUMENT_PATH_2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private DocumentPath thirdDocumentPath \u003d new DocumentPath(VALID_DOCUMENT_PATH_2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private JsonExportPath firstJsonExportPath \u003d new JsonExportPath(VALID_JSON_EXPORT_PATH_1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private Category firstCategory \u003d new Category(VALID_CATEGORY_HISTORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private Category secondCategory \u003d new Category(VALID_CATEGORY_LOCATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private Category thirdCategory \u003d new Category(VALID_CATEGORY_LOCATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private ExportCommand firstCommand \u003d new ExportCommand(firstCategory, firstDocumentPath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private ExportCommand secondCommand \u003d new ExportCommand(secondCategory, secondDocumentPath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private ExportCommand thirdCommand \u003d new ExportCommand(thirdCategory, thirdDocumentPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private ExportCommand fourthCommand \u003d new ExportCommand(firstCategory, secondDocumentPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private ExportCommand fifthCommand \u003d new ExportCommand(secondCategory, firstJsonExportPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        // returns true if same instance"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        // returns true if all fields identical (even if different instance)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertTrue(secondCommand.equals(thirdCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        // returns false if even one field not the same"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertFalse(firstCommand.equals(fourthCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertFalse(secondCommand.equals(fourthCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        // returns false if argument is of a different type"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertFalse(firstCommand.equals(new String()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        // returns false if argument is null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        // returns false if both fields not the same"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void execute_validInputDocument_fileCreated() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        model.addFlashCard(NUS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                ExportCommand.MESSAGE_EXPORT_SUCCESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                secondDocumentPath.toAbsolutePathString()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(secondDocumentPath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertCommandSuccess(secondCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertTrue(isFilePresent(secondDocumentPath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(secondDocumentPath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void execute_validInputJson_fileCreated() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        model.addFlashCard(NUS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                ExportCommand.MESSAGE_EXPORT_SUCCESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                1,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                firstJsonExportPath.toAbsolutePathString()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(firstJsonExportPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertCommandSuccess(fifthCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertTrue(isFilePresent(firstJsonExportPath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(firstJsonExportPath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void execute_nonExistentCategory_exceptionThrown() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                fifthCommand.execute("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        model"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                )"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeonardTay748"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeonardTay748": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListAllCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashCardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListAllCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class ListAllCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getKeyboardFlashCards(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(new ListAllCommand(), model, ListAllCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        showFlashCardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(new ListAllCommand(), model, ListAllCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCategoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.PROP_DELAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.TRANS_DELAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.CategoryContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class ListCategoryCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new CategoryContainsAnyKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new CategoryContainsAnyKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ListCategoryCommand findFirstCommand \u003d new ListCategoryCommand(firstPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ListCategoryCommand findSecondCommand \u003d new ListCategoryCommand(secondPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ListCategoryCommand findFirstCommandCopy \u003d new ListCategoryCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_zeroKeywords_noFlashCardFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARD_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ListCategoryCommand command \u003d new ListCategoryCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_multipleKeywords_multipleFlashCardFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARD_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate predicate \u003d preparePredicate(\"C delay\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ListCategoryCommand command \u003d new ListCategoryCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Arrays.asList(PROP_DELAY, TRANS_DELAY), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses {@code userInput} into a {@code CategoryContainsAnyKeywordsPredicate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private CategoryContainsAnyKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new CategoryContainsAnyKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeadlineAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DEADLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DEADLINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author: dalsontws"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Contains unit tests for {@code RemoveCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class RemoveCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline deadlineToDelete \u003d model.getFilteredDeadlineList().get(INDEX_FIRST_DEADLINE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_FIRST_DEADLINE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_DELETE_DEADLINE_SUCCESS, deadlineToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getKeyboardFlashCards(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        expectedModel.deleteDeadline(deadlineToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeadlineList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_DEADLINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        showDeadlineAtIndex(model, INDEX_FIRST_DEADLINE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline deadlineToDelete \u003d model.getFilteredDeadlineList().get(INDEX_FIRST_DEADLINE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(INDEX_FIRST_DEADLINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_DELETE_DEADLINE_SUCCESS, deadlineToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKeyboardFlashCards(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        expectedModel.deleteDeadline(deadlineToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        showDeadlineAtIndex(model, INDEX_FIRST_DEADLINE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DEADLINE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getKeyboardFlashCards().getDeadlineList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_DEADLINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        RemoveCommand removeFirstCommand \u003d new RemoveCommand(INDEX_FIRST_DEADLINE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        RemoveCommand removeSecondCommand \u003d new RemoveCommand(INDEX_SECOND_DEADLINE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(removeFirstCommand.equals(removeFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        RemoveCommand removeFirstCommandCopy \u003d new RemoveCommand(INDEX_FIRST_DEADLINE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(removeFirstCommand.equals(removeFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(removeFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(removeFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(removeFirstCommand.equals(removeSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        model.updateFilteredDeadlineList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(model.getFilteredDeadlineList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchAnswerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.DELAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.STORE_AND_FORWARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.THROUGHPUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.AnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchAnswerCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchAnswerCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AnswerContainsAnyKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AnswerContainsAnyKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchAnswerCommand findFirstCommand \u003d new SearchAnswerCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchAnswerCommand findSecondCommand \u003d new SearchAnswerCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchAnswerCommand findFirstCommandCopy \u003d new SearchAnswerCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_zeroKeywords_noFlashCardFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARD_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchAnswerCommand command \u003d new SearchAnswerCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_multipleKeywords_multipleFlashCardFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARD_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate predicate \u003d preparePredicate(\"transmitted other\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchAnswerCommand command \u003d new SearchAnswerCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Arrays.asList(STORE_AND_FORWARD, DELAY, THROUGHPUT), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses {@code userInput} into a {@code AnswerContainsAnyKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private AnswerContainsAnyKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new AnswerContainsAnyKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.PROTOCOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.SOURCE_DELAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.THROUGHPUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionOrAnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionOrAnswerContainsAnyKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionOrAnswerContainsAnyKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchCommand findFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchCommand findSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchCommand findFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_zeroKeywords_noFlashCardFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARD_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_multipleKeywords_multipleFlashCardFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARD_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate predicate \u003d preparePredicate(\"sources protocol throughput\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Arrays.asList(SOURCE_DELAY, THROUGHPUT, PROTOCOL), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses {@code userInput} into a {@code QuestionContainsAnyKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private QuestionOrAnswerContainsAnyKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new QuestionOrAnswerContainsAnyKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 31,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchQuestionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARD_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.PROTOCOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.SOURCE_DELAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.THROUGHPUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchQuestionCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchQuestionCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAnyKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAnyKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchQuestionCommand findFirstCommand \u003d new SearchQuestionCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchQuestionCommand findSecondCommand \u003d new SearchQuestionCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchQuestionCommand findFirstCommandCopy \u003d new SearchQuestionCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_zeroKeywords_noFlashCardFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARD_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchQuestionCommand command \u003d new SearchQuestionCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void execute_multipleKeywords_multipleFlashCardFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARD_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate predicate \u003d preparePredicate(\"sources protocol throughput\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchQuestionCommand command \u003d new SearchQuestionCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedModel.updateFilteredFlashCardList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Arrays.asList(SOURCE_DELAY, THROUGHPUT, PROTOCOL), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses {@code userInput} into a {@code QuestionContainsAnyKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private QuestionContainsAnyKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new QuestionContainsAnyKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StartCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.parser.KeyboardFlashCardsParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class StartCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private KeyboardFlashCardsParser keyboardFlashCardsParser \u003d new KeyboardFlashCardsParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void execute_noFlashCards_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        Command startCommand \u003d new StartCommand(keyboardFlashCardsParser, \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            CommandResult result \u003d startCommand.execute(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            assertEquals(StartCommand.MESSAGE_NO_FLASHCARDS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void execute_unableToFindTag_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        String tagToFind \u003d \"thisTagDoesNotExist\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        Command startCommand \u003d new StartCommand(keyboardFlashCardsParser, tagToFind);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            CommandResult result \u003d startCommand.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            assertEquals(StartCommand.MESSAGE_NO_FLASHCARDS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // assertTrue/False is used instead of assertEquals/NotEquals to specifically test equals()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // but please correct me if assertEquals is actually using the class equals method"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        Command noTag \u003d new StartCommand(keyboardFlashCardsParser, \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        Command tag \u003d new StartCommand(keyboardFlashCardsParser, \"tag\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertTrue(noTag.equals(noTag));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertTrue(tag.equals(tag));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        Command noTagCopy \u003d new StartCommand(keyboardFlashCardsParser, \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        Command tagCopy \u003d new StartCommand(keyboardFlashCardsParser, \"tag\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertTrue(noTag.equals(noTagCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertTrue(tag.equals(tagCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(noTag.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(tag.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(noTag.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(tag.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        Command anotherTag \u003d new StartCommand(keyboardFlashCardsParser, \"anotherTag\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(tag.equals(noTag));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(tag.equals(anotherTag));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        // different abp object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        Command diffAbp \u003d new StartCommand(new KeyboardFlashCardsParser(), \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(noTag.equals(diffAbp));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "keiteo": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_HISTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_LOCATION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.NORATING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.NUS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.WWII;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard expectedFlashCard \u003d new FlashCardBuilder(NUS).withCatgeories(VALID_CATEGORY_LOCATION).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_DESC_2 + ANSWER_DESC_2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_LOCATION, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // multiple questions - last question accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_1 + QUESTION_DESC_2 + ANSWER_DESC_2"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_LOCATION, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // multiple answers - last answer accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_2 + ANSWER_DESC_1 + ANSWER_DESC_2"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_LOCATION, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // multiple ratings - last rating accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_2 + ANSWER_DESC_2"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_LOCATION, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard expectedFlashCardMultipleCategories \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder(NUS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withCatgeories(VALID_CATEGORY_LOCATION, VALID_CATEGORY_HISTORY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_2 + ANSWER_DESC_2"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_LOCATION + CATEGORY_DESC_HISTORY, new AddCommand(expectedFlashCardMultipleCategories));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // zero categories"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard expectedFlashCard \u003d new FlashCardBuilder(WWII).withCatgeories().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_1 + ANSWER_DESC_1,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //no inital rating"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedFlashCard \u003d NORATING;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_1 + ANSWER_DESC_1 + CATEGORY_DESC_LOCATION,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_2 + ANSWER_DESC_2,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_2 + VALID_ANSWER_2,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_2 + VALID_ANSWER_2,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_2"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_LOCATION + CATEGORY_DESC_HISTORY, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_2 + INVALID_ANSWER_DESC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_LOCATION + CATEGORY_DESC_HISTORY, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_2 + ANSWER_DESC_2"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + INVALID_CATEGORY_DESC + VALID_CATEGORY_LOCATION, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_2,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_2 + ANSWER_DESC_2"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_LOCATION + CATEGORY_DESC_HISTORY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 64,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_HISTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_LOCATION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS); // invalid question"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS); // invalid answer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // valid answer followed by invalid answer. The test case for invalid answer followed by valid answer"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"1\" + ANSWER_DESC_2 + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the categories of the {@code FlashCard} being edited,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \"1\" + CATEGORY_DESC_HISTORY + CATEGORY_DESC_LOCATION"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        + TAG_EMPTY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \"1\" + CATEGORY_DESC_HISTORY + TAG_EMPTY + CATEGORY_DESC_LOCATION,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \"1\" + TAG_EMPTY + CATEGORY_DESC_HISTORY + CATEGORY_DESC_LOCATION,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + RATING_DESC_1"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_2 + CATEGORY_DESC_LOCATION"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                 + RATING_DESC_1 + QUESTION_DESC_1 + CATEGORY_DESC_HISTORY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder().withQuestion(VALID_QUESTION_1)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withAnswer(VALID_ANSWER_2).withRating(VALID_RATING_1)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withCategories(VALID_CATEGORY_HISTORY, VALID_CATEGORY_LOCATION).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_2;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder().withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new EditFlashCardDescriptorBuilder().withQuestion(VALID_QUESTION_1).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // answer"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptorBuilder().withAnswer(VALID_ANSWER_1).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptorBuilder().withRating(VALID_RATING_1).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // categories"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_HISTORY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptorBuilder().withCategories(VALID_CATEGORY_HISTORY).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_1 + RATING_DESC_1"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + CATEGORY_DESC_HISTORY + ANSWER_DESC_1 + RATING_DESC_1 + CATEGORY_DESC_HISTORY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + ANSWER_DESC_2 + RATING_DESC_2 + CATEGORY_DESC_LOCATION;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder().withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withRating(VALID_RATING_2).withCategories(VALID_CATEGORY_LOCATION, VALID_CATEGORY_HISTORY)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ANSWER_DESC + ANSWER_DESC_2;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder().withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_ANSWER_DESC + RATING_DESC_2"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + ANSWER_DESC_2;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptorBuilder().withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withRating(VALID_RATING_2).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder().withCategories().build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 88,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/KeyboardFlashCardsParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_TEST_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.EndTestCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.ListAllCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.ListCategoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.RateQuestionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchAnswerCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchQuestionCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.CategoryContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.AnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionOrAnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class KeyboardFlashCardsParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final KeyboardFlashCardsParser parser \u003d new KeyboardFlashCardsParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FlashCardUtil.getAddCommand(flashCard));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new AddCommand(flashCard), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder(flashCard).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        EditCommand command \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                (EditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                                + INDEX_FIRST_FLASHCARD.getOneBased() + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                                + FlashCardUtil.getEditFlashCardDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_FLASHCARD, descriptor), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                SearchCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new SearchCommand(new QuestionOrAnswerContainsAnyKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCommand_findCategory() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"C\", \"cs2101\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ListCategoryCommand command \u003d (ListCategoryCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ListCategoryCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new ListCategoryCommand(new CategoryContainsAnyKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCommand_findQuestion() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"what\", \"cs2101\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchQuestionCommand command \u003d (SearchQuestionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            SearchQuestionCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new SearchQuestionCommand(new QuestionContainsAnyKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCommand_findAnswer() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"C\", \"cs2101\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchAnswerCommand command \u003d (SearchAnswerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                SearchAnswerCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new SearchAnswerCommand(new AnswerContainsAnyKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(parser.parseCommand(ListAllCommand.COMMAND_WORD) instanceof ListAllCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(parser.parseCommand(ListAllCommand.COMMAND_WORD + \" 3\") instanceof ListAllCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author keiteo"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void parseCommand_startNoParameter_success() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        StartCommand command \u003d (StartCommand) parser.parseCommand(\"start\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertEquals(new StartCommand(parser, \"\"), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void parseCommand_startAlreadyInTestMode_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        parser.startTestMode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                String.format(MESSAGE_UNKNOWN_TEST_COMMAND, \"\"), () -\u003e parser.parseCommand(\"start\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void parseCommand_rateQuestionInTestMode_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        parser.startTestMode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        RateQuestionCommand command \u003d (RateQuestionCommand) parser.parseCommand(\"rate good\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertEquals(new RateQuestionCommand(parser, new Rating(\"good\")), command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void parseCommand_rateQuestionNotInTestMode_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"rate good\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void parseCommand_endInTestMode_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        parser.startTestMode();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        EndTestCommand command \u003d (EndTestCommand) parser.parseCommand(\"end\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertEquals(new EndTestCommand(parser), command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void parseCommand_endNotInTestMode_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"ans\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 67,
      "keiteo": 44,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCategoryCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//@@author shutingy reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.ListCategoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.CategoryContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class ListCategoryCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private FindCategoryCommandParser parser \u003d new FindCategoryCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        ListCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parse_validArgs_returnsFindCategoryCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ListCategoryCommand expectedListCategoryCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new ListCategoryCommand(new CategoryContainsAnyKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedListCategoryCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedListCategoryCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String INVALID_RATING \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"2 + 2\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String VALID_ANSWER \u003d \"4\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String VALID_RATING \u003d \"good\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String VALID_CATEGORY_1 \u003d \"math\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String VALID_CATEGORY_2 \u003d \"science\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            -\u003e ParserUtil.parseIndex(\"-10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseQuestion_validValueWithoutWhitespace_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        questionWithWhitespace \u003d WHITESPACE + WHITESPACE + VALID_QUESTION + WHITESPACE + WHITESPACE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        questionWithWhitespace \u003d VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseAnswer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseAnswer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseAnswer_validValueWithoutWhitespace_returnsAnswer() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseAnswer_validValueWithWhitespace_returnsTrimmedAnswer() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answerWithWhitespace \u003d WHITESPACE + WHITESPACE + VALID_ANSWER + WHITESPACE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answerWithWhitespace \u003d VALID_ANSWER + WHITESPACE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ratingWithWhitespace \u003d WHITESPACE + WHITESPACE + VALID_RATING + WHITESPACE + WHITESPACE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ratingWithWhitespace \u003d WHITESPACE + VALID_RATING;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ratingWithWhitespace \u003d VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryWithWhitespace \u003d WHITESPACE + WHITESPACE + VALID_CATEGORY_1 + WHITESPACE + WHITESPACE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY_1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categoryWithWhitespace \u003d VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategories(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCategories_collectionWithInvalidCategories_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, INVALID_CATEGORY)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseCategories_collectionWithValidCategories_returnsCategorySet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Set\u003cCategory\u003e actualCategorySet \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, VALID_CATEGORY_2));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Set\u003cCategory\u003e expectedCategorySet \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new HashSet\u003cCategory\u003e("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        Arrays.asList(new Category(VALID_CATEGORY_1), new Category(VALID_CATEGORY_2)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedCategorySet, actualCategorySet);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 101,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemoveCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@@author: dalsontws"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * outside of the RemoveCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * same path through the RemoveCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class RemoveCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private RemoveCommandParser parser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void parse_validArgs_returnsRemoveCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RemoveCommand(INDEX_FIRST_DEADLINE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchAnswerCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchAnswerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.AnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchAnswerCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private FindAnswerCommandParser parser \u003d new FindAnswerCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        SearchAnswerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parse_validArgs_returnsFindAnswerCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchAnswerCommand expectedSearchAnswerCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new SearchAnswerCommand(new AnswerContainsAnyKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedSearchAnswerCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedSearchAnswerCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionOrAnswerContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new SearchCommand(new QuestionOrAnswerContainsAnyKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedSearchCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedSearchCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 9,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchQuestionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.SearchQuestionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class SearchQuestionCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private FindQuestionCommandParser parser \u003d new FindQuestionCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        SearchQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parse_validArgs_returnsFindQuestionCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        SearchQuestionCommand expectedSearchQuestionCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new SearchQuestionCommand(new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedSearchQuestionCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedSearchQuestionCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 37,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/FlashCardTestModelTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.testutil.FlashCardTestListBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class FlashCardTestModelTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private FlashCardTestModel flashCardTestModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private List\u003cFlashCard\u003e testList \u003d new FlashCardTestListBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void isEmpty_emptyList_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        flashCardTestModel \u003d new FlashCardTestModel(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertTrue(flashCardTestModel.isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void isEmpty_nonEmptyList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        flashCardTestModel \u003d new FlashCardTestModel(testList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(flashCardTestModel.isEmpty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void getQuestion_validTestList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        flashCardTestModel \u003d new FlashCardTestModel(testList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCardTestModel.setFlashcard();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        String expectedOutput \u003d \"0 + 10\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertEquals(expectedOutput, flashCardTestModel.getQuestion());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        flashCardTestModel \u003d new FlashCardTestModel(testList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        FlashCardTestModel anotherFlashCardTestModel \u003d new FlashCardTestModel(testList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertTrue(flashCardTestModel.equals(anotherFlashCardTestModel));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "keiteo": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/KeyboardFlashCardsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.STORE_AND_FORWARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashCardException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class KeyboardFlashCardsTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final KeyboardFlashCards keyboardFlashCards \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(Collections.emptyList(), keyboardFlashCards.getFlashcardList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e keyboardFlashCards.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(newData, keyboardFlashCards);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void resetData_withDuplicateFlashCards_throwsDuplicateFlashCardException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Two flashCards with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedCard \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder(STORE_AND_FORWARD)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withRating(VALID_RATING_2)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withCatgeories(VALID_CATEGORY_HISTORY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cFlashCard\u003e newFlashCards \u003d Arrays.asList(STORE_AND_FORWARD, editedCard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCardsStub newData \u003d new KeyboardFlashCardsStub(newFlashCards);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(DuplicateFlashCardException.class, () -\u003e keyboardFlashCards.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void hasFlashCard_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e keyboardFlashCards.hasFlashcard(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void hasFlashCard_flashCardNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(keyboardFlashCards.hasFlashcard(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void hasFlashCard_flashCardInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards.addFlashcard(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(keyboardFlashCards.hasFlashcard(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void hasFlashCard_flashCardWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards.addFlashcard(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedAlice \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder(STORE_AND_FORWARD)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withRating(VALID_RATING_2)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withCatgeories(VALID_CATEGORY_HISTORY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(keyboardFlashCards.hasFlashcard(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void getFlashCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e keyboardFlashCards.getFlashcardList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * A stub ReadOnlyKeyboardFlashCards whose flashCards list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static class KeyboardFlashCardsStub implements ReadOnlyKeyboardFlashCards {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        private final ObservableList\u003cFlashCard\u003e flashCards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCardsStub(Collection\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.flashCards.setAll(flashCards);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public ObservableList\u003cFlashCard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return flashCards;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        public ObservableList\u003cDeadline\u003e getDeadlineList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        public ObservableList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 52,
      "dalsontws": 6,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.DELAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.PROTOCOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.STORE_AND_FORWARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.QuestionContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.testutil.FlashCardTestListBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new KeyboardFlashCards(), new KeyboardFlashCards(modelManager.getKeyboardFlashCards()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userPrefs.setKeyboardFlashCardsFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userPrefs.setKeyboardFlashCardsFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setKeyboardFlashCardsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setKeyboardFlashCardsFilePath(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setKeyboardFlashCardsFilePath_validPath_setsKeyboardFlashCardsFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        modelManager.setKeyboardFlashCardsFilePath(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(path, modelManager.getKeyboardFlashCardsFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void hasFlashCard_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void hasFlashCard_flashCardNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(modelManager.hasFlashcard(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void hasFlashCard_flashCardInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        modelManager.addFlashCard(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(modelManager.hasFlashcard(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void getFilteredFlashCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFlashCardList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards keyboardFlashCards \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AddressBookBuilder().withFlashCard(STORE_AND_FORWARD).withFlashCard(DELAY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards differentKeyboardFlashCards \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        modelManager \u003d new ModelManager(keyboardFlashCards, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(keyboardFlashCards, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different keyboardFlashCards -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentKeyboardFlashCards, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String[] keywords \u003d PROTOCOL.getQuestion().fullQuestion.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        modelManager.updateFilteredFlashCardList(new QuestionContainsAnyKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(keyboardFlashCards, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        modelManager.updateFilteredFlashCardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        differentUserPrefs.setKeyboardFlashCardsFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(keyboardFlashCards, differentUserPrefs)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    //@@author keiteo"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void hasTestFlashCard_containsFlashCards_returnTrue() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        List\u003cFlashCard\u003e testList \u003d new FlashCardTestListBuilder().build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        modelManager.initializeTestModel(testList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertTrue(modelManager.hasTestFlashCard());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void hasTestFlashCard_noFlashCards_returnFalse() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        List\u003cFlashCard\u003e testList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        modelManager.initializeTestModel(testList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertFalse(modelManager.hasTestFlashCard());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void hasTestFlashCard_nullList_nullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        modelManager.initializeTestModel(null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            modelManager.hasTestFlashCard();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void getTestQuestion_containsFlashCards_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        List\u003cFlashCard\u003e testList \u003d new FlashCardTestListBuilder().build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        List\u003cFlashCard\u003e dummyList \u003d new FlashCardTestListBuilder().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        modelManager.initializeTestModel(testList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        for (FlashCard fc : dummyList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            String qn \u003d fc.getQuestion().toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            modelManager.setTestFlashCard();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            assertEquals(qn, modelManager.getTestQuestion());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public void getTestAnswer_containsFlashCards_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        List\u003cFlashCard\u003e testList \u003d new FlashCardTestListBuilder().build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        List\u003cFlashCard\u003e dummyList \u003d new FlashCardTestListBuilder().build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        modelManager.initializeTestModel(testList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        for (FlashCard fc : dummyList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            String qn \u003d fc.getAnswer().toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            modelManager.setTestFlashCard();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            assertEquals(qn, modelManager.getTestAnswer());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 35,
      "keiteo": 52,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setKeyboardFlashCardsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setKeyboardFlashCardsFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/category/CategoryContainsAnyKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//original code is from NameContainsKeywordsPredicateTest.java by si jie"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//reused with minor changes"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class CategoryContainsAnyKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordsList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordsList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new CategoryContainsAnyKeywordsPredicate(firstPredicateKeywordsList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new CategoryContainsAnyKeywordsPredicate(secondPredicateKeywordsList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new CategoryContainsAnyKeywordsPredicate(firstPredicateKeywordsList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_categoryContainsAnyKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //One keyword match"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new CategoryContainsAnyKeywordsPredicate(Collections.singletonList(\"testing\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withCatgeories(\"testing\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new CategoryContainsAnyKeywordsPredicate(Arrays.asList(\"testing\", \"category\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withCatgeories(\"category\", \"testing\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // only one matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new CategoryContainsAnyKeywordsPredicate(Arrays.asList(\"123\", \"cs\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withCatgeories(\"cs\", \"testing\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new CategoryContainsAnyKeywordsPredicate(Arrays.asList(\"cS1232\", \"laLa\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withCatgeories(\"CS1232\", \"LALA\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_categoryDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        CategoryContainsAnyKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new CategoryContainsAnyKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withCatgeories(\"cs\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new CategoryContainsAnyKeywordsPredicate(Arrays.asList(\"addition\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withCatgeories(\"quotient\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 79,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/category/CategoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void constructor_invalidCateigoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String invalidCategoryName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategoryName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null category name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deadline/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.COMPLETE_CALENDAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.COMPLETE_SCHEDULER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_DUEDATE_STR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.TypicalDeadlines.VALID_TASK_STR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void isSameDeadline() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(COMPLETE_SCHEDULER.equals(COMPLETE_SCHEDULER));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(COMPLETE_SCHEDULER.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // same deadline -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline editedDeadline \u003d new DeadlineBuilder(COMPLETE_SCHEDULER).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(COMPLETE_SCHEDULER.equals(editedDeadline));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline editedDeadline \u003d new DeadlineBuilder(COMPLETE_CALENDAR).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(COMPLETE_CALENDAR.equals(editedDeadline));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(COMPLETE_CALENDAR.equals(COMPLETE_CALENDAR));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(COMPLETE_CALENDAR.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(COMPLETE_CALENDAR.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline otherDeadline \u003d new DeadlineBuilder(COMPLETE_SCHEDULER).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(COMPLETE_CALENDAR.equals(otherDeadline));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline editedDeadlineTask \u003d new DeadlineBuilder(COMPLETE_CALENDAR).withTask(VALID_TASK_STR).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertNotEquals(COMPLETE_CALENDAR.toString(), editedDeadlineTask.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // different due date -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Deadline editedDeadlineDueDate \u003d new DeadlineBuilder(COMPLETE_CALENDAR).withDueDate(VALID_DUEDATE_STR).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertNotEquals(COMPLETE_CALENDAR.toString(), editedDeadlineDueDate.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deadline/DueDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DueDateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DueDate(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void constructor_invalidDueDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String invalidDueDate \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e new DueDate(invalidDueDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void isValidDueDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DueDate.isValidDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(DueDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(DueDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(DueDate.isValidDate(\"40/10/2019\")); // day element is invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(DueDate.isValidDate(\"10/40/2019\")); // month element is invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(Task.isValidTask(\"10/10/2019\")); // a valid date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deadline/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.model.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Task(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void constructor_invalidTask_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String invalidTask \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Task(invalidTask));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void isValidTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // null task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Task.isValidTask(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // invalid task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(Task.isValidTask(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertFalse(Task.isValidTask(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // valid task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(Task.isValidTask(\"123\")); // an integer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(Task.isValidTask(\"Homework\")); // a word"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertTrue(Task.isValidTask(\"Today\u0027s Homework for all Modules\")); // a sentence"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/DirectoryPathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class DirectoryPathTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void directoryPath_invalidPath_throwsException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] invalidDirectoryPathStrings \u003d {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory\\\\?????\\\\directory2\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory/?????/directory2\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory/*****/directory2\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory\\\\*****\\\\directory2\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String invalidDirectoryPathString : invalidDirectoryPathStrings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    new DirectoryPath("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                            Paths.get(invalidDirectoryPathString)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void directoryPath_validPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] validDirectoryPathStrings \u003d {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"/directory/\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"\\\\directory\\\\\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"\\\\b c\\\\d\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"/b c/d\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"C:\\\\Users\\\\User\\\\Desktop\\\\\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"~/Desktop/\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"../\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"..\\\\\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"/\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"\\\\\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"GitHub\\\\main\\\\.git\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String validDirectoryPathString : validDirectoryPathStrings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                new DirectoryPath("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        Paths.get(validDirectoryPathString)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                fail(\"Valid directory file path was not recognized as being valid\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/DocumentExportUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.deleteFileIfExists;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.isFilePresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.testutil.TypicalExportPaths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.testutil.TypicalFlashCards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class DocumentExportUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void exportFlashCardsToDocument_valid_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        List\u003cList\u003cFlashCard\u003e\u003e listsToTest \u003d Arrays.asList("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                TypicalFlashCards.getTypicalFlashCards(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                TypicalFlashCards.getSingletonFlashCardList()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (List\u003cFlashCard\u003e list : listsToTest) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            tryExport(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper method that tries to export a List of {@code FlashCard}s to a specific Document path."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Will clean up after the test is done by deleting the file if it was created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param list List of {@code FlashCard}s to be exported."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private void tryExport(List\u003cFlashCard\u003e list) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(TypicalExportPaths.CHEATSHEET_DOCX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            DocumentExportUtil.exportFlashCardsToDocument("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    list,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    TypicalExportPaths.CHEATSHEET_DOCX"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertTrue(isFilePresent(TypicalExportPaths.CHEATSHEET_DOCX));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            fail(\"IOException when trying to export document\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(TypicalExportPaths.CHEATSHEET_DOCX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/DocumentFilePathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class DocumentFilePathTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void documentFilePath_invalidPath_throwsException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] invalidDocumentFilePathStrings \u003d {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory/file.docx\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory\\\\file.docx\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"file.txt\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"file.do cx\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String invalidDocumentFilePathString : invalidDocumentFilePathStrings) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                     new DocumentFilePath("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        invalidDocumentFilePathString"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void documentFilePath_validPath_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] validDocumentFilePathStrings \u003d {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheat_sheet.docx\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheat-sheet.docx\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"ChEAtShEAT.doCx\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"() [].docx\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"[CS2105] Midterm Cheat Sheet (v2).docx\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String validDocumentFilePathString : validDocumentFilePathStrings) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                new DocumentFilePath(validDocumentFilePathString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                fail(\"Valid document file path was not recognized as being valid\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/DocumentPathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.isRunningOnWindows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class DocumentPathTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void documentPath_invalidPath_throwsException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] invalidDocumentPathStrings \u003d {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"C:\\\\Users\\\\User\\\\Documents\\\\cheatsheet\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheatsheet.txt\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheatsheet.docxx\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheat.sheet.docx\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheatsheet。docx\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheatsheetdotdocx\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheat|sheet.docx\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"*cheatsheet*.docx\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheatsheet.json\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String invalidDocumentPathString : invalidDocumentPathStrings) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    -\u003e new DocumentPath("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        invalidDocumentPathString"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void documentPath_validPath_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] validDocumentPathStrings \u003d {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheat_sheet.docx\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cheat-sheet.docx\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory/cheatsheet.docx\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"ChEAtShEAT.doCx\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"../cheatsheet.docx\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"~/Desktop/[CS2105] Midterm Cheat Sheet (v3).docx\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String validDocumentPathString : validDocumentPathStrings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                new DocumentPath(validDocumentPathString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                fail(\"Valid document path was not recognized as being valid: \" + validDocumentPathString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void documentPath_validWindowsPath_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String pathString \u003d \"C:\\\\Users\\\\User\\\\Desktop\\\\[CS2105] Midterm Cheat Sheet (v2).docx\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (isRunningOnWindows()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                new DocumentPath(pathString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                fail(\"Valid document path was not recognized as being valid: \" + pathString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/ExportPathFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.isRunningOnWindows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class ExportPathFactoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private String[] filePathsNoExtensions \u003d {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \"cheat_sheet\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \"cheat-sheet\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \"directory/cheatsheet\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \"ChEAtShEAT\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \"../cheatsheet\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \"~/Desktop/[CS2105] Midterm Cheat Sheet (v3)\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private String[] validExtensions \u003d {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".json\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".docx\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".JsOn\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".DocX\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private String[] invalidExtensions \u003d {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".html\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".png\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".txt\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".jsonn\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        \".\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void getExportPath_valid_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String filePathNoExtension : filePathsNoExtensions) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            for (String validExtension : validExtensions) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                String filePath \u003d filePathNoExtension + validExtension;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                ExportPath exportPath \u003d ExportPathFactory.getExportPath(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                switch (validExtension.toLowerCase()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                case \".docx\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    assertTrue("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                            exportPath instanceof DocumentPath"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                case \".json\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    assertTrue("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                            exportPath instanceof JsonExportPath"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    fail(\"Valid export path not recognized as valid: \" + filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void getExportPath_invalidPath_exceptionThrown() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String filePathNoExtension : filePathsNoExtensions) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            for (String invalidExtension : invalidExtensions) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                String filePath \u003d filePathNoExtension + invalidExtension;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        ExportPathFactory.getExportPath(filePath)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void getExportPath_validWindowsPath_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (isRunningOnWindows()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            String filePathNoExtension \u003d \"C:\\\\Users\\\\User\\\\Desktop\\\\[CS2105] Midterm Cheat Sheet (v2)\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            for (String validExtension : validExtensions) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                String filePath \u003d filePathNoExtension + validExtension;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                ExportPath exportPath \u003d ExportPathFactory.getExportPath(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                switch (validExtension.toLowerCase()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                case \".docx\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    assertTrue("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                            exportPath instanceof DocumentPath"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                case \".json\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    assertTrue("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                            exportPath instanceof JsonExportPath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    fail(\"Valid export path not recognized as valid: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/JsonExportFilePathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class JsonExportFilePathTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void jsonExportFilePath_invalidPath_throwsException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] invalidJsonExportFilePathStrings \u003d {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105.txt\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105.jsonn\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs.2105.json\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105。json\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105dotjson\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs|2105.json\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"*cs2105*.json\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105.docx\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String invalidJsonExportFilePathString : invalidJsonExportFilePathStrings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    -\u003e new JsonExportFilePath("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        invalidJsonExportFilePathString"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void jsonExportFilePath_validPath_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] validJsonExportFilePathStrings \u003d {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs_2105.json\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs-2105.json\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105.json\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cS2105.JsOn\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105.json\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"[CS2105] exported flashcards.json\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"[CS2105] exported flashcards.json\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String validJsonExportFilePathString : validJsonExportFilePathStrings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                new JsonExportFilePath(validJsonExportFilePathString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                fail(\"Valid JSON export file path was not recognized as being valid\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/JsonExportPathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.isRunningOnWindows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class JsonExportPathTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void jsonExportPath_invalidPath_throwsException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] invalidJsonExportPathStrings \u003d {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"C:\\\\Users\\\\User\\\\Documents\\\\cs2105\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory/cs2105\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105.txt\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105.jsonn\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs.2105.json\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105。json\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105dotjson\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs|2105.json\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"*cs2105*.json\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs2105.docx\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String invalidJsonExportPathString : invalidJsonExportPathStrings) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertThrows("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    -\u003e new JsonExportPath("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                        invalidJsonExportPathString"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void jsonExportPath_validPath_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String[] validJsonExportPathStrings \u003d {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs_2105.json\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cs-2105.json\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"directory/cs2105.json\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"cS2105.JsOn\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"../cs2105.json\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            \"~/Desktop/[CS2105] exported flashcards.json\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (String validJsonExportPathString : validJsonExportPathStrings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                new JsonExportPath(validJsonExportPathString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                fail(\"Valid JSON export path was not recognized as being valid: \" + validJsonExportPathString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void jsonExportPath_validWindowsPath_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        String pathString \u003d \"C:\\\\Users\\\\User\\\\Desktop\\\\[CS2105] Midterm Cheat Sheet (v2).json\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (isRunningOnWindows()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                new JsonExportPath(pathString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                fail(\"Valid JSON export path was not recognized as being valid: \" + pathString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/JsonExportUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.deleteFileIfExists;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.isFilePresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.testutil.TypicalExportPaths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.testutil.TypicalFlashCards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class JsonExportUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void exportFlashCardsToJson_valid_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        List\u003cList\u003cFlashCard\u003e\u003e listsToTest \u003d Arrays.asList("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                TypicalFlashCards.getTypicalFlashCards(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                TypicalFlashCards.getSingletonFlashCardList()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (List\u003cFlashCard\u003e list : listsToTest) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            tryExport(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper method that tries to export a List of {@code FlashCard}s to a specific Json export path."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Will clean up after the test is done by deleting the file if it was created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param list List of {@code FlashCard}s to be exported."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private void tryExport(List\u003cFlashCard\u003e list) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(TypicalExportPaths.CS2105_JSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            JsonExportUtil.exportFlashCardsToJson("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    list,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                    TypicalExportPaths.CS2105_JSON"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertTrue(isFilePresent(TypicalExportPaths.CS2105_JSON));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            fail(\"IOException when trying to export json export\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(TypicalExportPaths.CS2105_JSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/export/JsonImportUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.model.export;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.deleteFileIfExists;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.testutil.ExportTestUtil.isFilePresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.testutil.TypicalExportPaths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.testutil.TypicalFlashCards;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class JsonImportUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public void importFlashCardsFromJson_valid_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        List\u003cList\u003cFlashCard\u003e\u003e listsToTest \u003d Arrays.asList("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                TypicalFlashCards.getSingletonFlashCardList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                TypicalFlashCards.getTypicalFlashCards()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        for (List\u003cFlashCard\u003e list : listsToTest) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            tryImportFrom(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper function to attempt an import from a specific JsonExportPath. Will first export the {@code FlashCard}s to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * that path, before importing them back in. Verifies the import works as expected."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param list List of {@code FlashCard}s to test the import function with."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    private void tryImportFrom(List\u003cFlashCard\u003e list) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        JsonExportPath path \u003d TypicalExportPaths.CS2105_JSON;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            JsonExportUtil.exportFlashCardsToJson(list, path);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            Optional\u003cList\u003cFlashCard\u003e\u003e optionalList \u003d JsonImportUtil.importFlashCardsFromJson(path);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertTrue(optionalList.isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertEquals(optionalList.get(), list);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            assertTrue(isFilePresent(path));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            fail(\"IOException when importing from json\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            fail(\"DataConversionException when importing from json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        deleteFileIfExists(path);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/AnswerContainsAnyKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class AnswerContainsAnyKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AnswerContainsAnyKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AnswerContainsAnyKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AnswerContainsAnyKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_answerContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AnswerContainsAnyKeywordsPredicate(Collections.singletonList(\"remainder\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new AnswerContainsAnyKeywordsPredicate(Arrays.asList(\"remainder\", \"quotient\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new AnswerContainsAnyKeywordsPredicate(Arrays.asList(\"remainder\", \"divide\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new AnswerContainsAnyKeywordsPredicate(Arrays.asList(\"reMaInDeR\", \"QuoTiEnT\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_answerDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        AnswerContainsAnyKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new AnswerContainsAnyKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withAnswer(\"remainder\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new AnswerContainsAnyKeywordsPredicate(Arrays.asList(\"addition\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Keywords match answer and rating, but does not match Answer"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new AnswerContainsAnyKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"good\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withQuestion(\"addition\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withAnswer(\"1234\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withRating(\"good\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/AnswerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // valid answer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"2\")); // an integer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"hello\")); // a word"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Today\u0027s weather is good\")); // a sentence"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/FlashCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.NUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.STORE_AND_FORWARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FlashCardTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard flashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e flashCard.getCategories().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void isSameFlashcard() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(STORE_AND_FORWARD.isSameFlashCard(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.isSameFlashCard(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedCard \u003d new FlashCardBuilder(STORE_AND_FORWARD).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.isSameFlashCard(editedCard));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedCard \u003d new FlashCardBuilder(STORE_AND_FORWARD).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.isSameFlashCard(editedCard));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedCard \u003d new FlashCardBuilder(STORE_AND_FORWARD).withRating(VALID_RATING_2)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withCatgeories(VALID_CATEGORY_HISTORY).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(STORE_AND_FORWARD.isSameFlashCard(editedCard));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same name, same answer, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedCard \u003d new FlashCardBuilder(STORE_AND_FORWARD).withRating(VALID_RATING_2)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withCatgeories(VALID_CATEGORY_HISTORY).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(STORE_AND_FORWARD.isSameFlashCard(editedCard));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard aliceCopy \u003d new FlashCardBuilder(STORE_AND_FORWARD).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(STORE_AND_FORWARD.equals(aliceCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(STORE_AND_FORWARD.equals(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.equals(NUS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedAlice \u003d new FlashCardBuilder(STORE_AND_FORWARD).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedAlice \u003d new FlashCardBuilder(STORE_AND_FORWARD).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedAlice \u003d new FlashCardBuilder(STORE_AND_FORWARD).withRating(VALID_RATING_2).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        editedAlice \u003d new FlashCardBuilder(STORE_AND_FORWARD).withCatgeories(VALID_CATEGORY_HISTORY).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(STORE_AND_FORWARD.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 46,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/QuestionContainsAllKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutingy-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//original code is from NameContainsKeywordsPredicateTest.java by si jie"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//reused with minor changes"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class QuestionContainsAllKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAllKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAllKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAllKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAllKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAllKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAllKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_questionContainsAllKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // One keyword all match"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAllKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAllKeywordsPredicate(Collections.singletonList(\"remainder\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Multiple keywords all match"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAllKeywordsPredicate(Arrays.asList(\"remainder\", \"quotient\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Mixed-case keywords all match"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAllKeywordsPredicate(Arrays.asList(\"reMaInDeR\", \"QuoTiEnT\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_questionDoesNotAllContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAllKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAllKeywordsPredicate(Arrays.asList(\"addition\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAllKeywordsPredicate(Arrays.asList(\"remainder\", \"divide\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Keywords match answer and rating, but does not match question"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAllKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"good\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withQuestion(\"addition\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withAnswer(\"12345\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withRating(\"good\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 84,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/QuestionContainsAnyKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class QuestionContainsAnyKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAnyKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAnyKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAnyKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_questionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAnyKeywordsPredicate(Collections.singletonList(\"remainder\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"remainder\", \"quotient\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"remainder\", \"divide\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"reMaInDeR\", \"QuoTiEnT\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_questionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionContainsAnyKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionContainsAnyKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withQuestion(\"remainder\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"addition\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Keywords match answer and rating, but does not match question"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"good\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withQuestion(\"addition\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withAnswer(\"12345\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withRating(\"good\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/QuestionOrAnswerContainsAnyKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author shutiny-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class QuestionOrAnswerContainsAnyKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionOrAnswerContainsAnyKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionOrAnswerContainsAnyKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionOrAnswerContainsAnyKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_questionOrAnswerContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // One keyword in question"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionOrAnswerContainsAnyKeywordsPredicate(Collections.singletonList(\"remainder\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // one keyword in answer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // one keyword in both question and answer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withQuestion(\"remainder quotient\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withAnswer(\"remainder quotient\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Multiple keywords in question"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionOrAnswerContainsAnyKeywordsPredicate(Arrays.asList(\"remainder\", \"quotient\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Multiple keywords in answer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Multiple keywords in both question and answer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withAnswer(\"remainder quotient\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withQuestion(\"remainder quotient\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Only one matching keyword in question"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionOrAnswerContainsAnyKeywordsPredicate(Arrays.asList(\"remainder\", \"divide\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Only one matching keyword in answer"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Mixed-case keywords in question"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionOrAnswerContainsAnyKeywordsPredicate(Arrays.asList(\"reMaInDeR\", \"QuoTiEnT\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withQuestion(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Mixed-case keywords in answer"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Mixed-case keywords in both question and answer"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withQuestion(\"remainder quotient\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withAnswer(\"remainder quotient\").build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void test_questionOrAnswerDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        QuestionOrAnswerContainsAnyKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new QuestionOrAnswerContainsAnyKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withQuestion(\"remainder\").build()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withAnswer(\"remainder\").build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Non-matching keyword in question and answer"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionOrAnswerContainsAnyKeywordsPredicate(Arrays.asList(\"addition\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withQuestion(\"remainder quotient\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .withAnswer(\"re\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // Keywords match  rating, but does not match question and answer"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        predicate \u003d new QuestionOrAnswerContainsAnyKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"good\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withQuestion(\"addition\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withAnswer(\"1235\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withRating(\"good\").build()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 119,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/QuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"1 + 1 \u003d\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"39 + 40 \u003d\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is time\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is environmental model\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Who is the fastest runner in the history\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/RatingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(Rating.isValidRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(Rating.isValidRating(\"play\")); //wrong keyword;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        // valid rating"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Rating.isValidRating(\"good\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Rating.isValidRating(\"hard\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Rating.isValidRating(\"easy\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(Rating.isValidRating(\"null\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 19,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/UniqueFlashCardListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.NUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.STORE_AND_FORWARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashCardException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashCardNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class UniqueFlashCardListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final UniqueFlashCardList uniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void contains_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void contains_flashCardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(uniqueFlashCardList.contains(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void contains_flashCardInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(uniqueFlashCardList.contains(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void contains_flashCardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedAlice \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder(STORE_AND_FORWARD)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withRating(VALID_RATING_2)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withCatgeories(VALID_CATEGORY_HISTORY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertTrue(uniqueFlashCardList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void add_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void add_duplicateFlashCard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(DuplicateFlashCardException.class, () -\u003e uniqueFlashCardList.add(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCard_nullTargetFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.setFlashcard(null, STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCard_nullEditedFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.setFlashcard(STORE_AND_FORWARD, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCard_targetFlashCardNotInList_throwsFlashCardNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(FlashCardNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                uniqueFlashCardList.setFlashcard(STORE_AND_FORWARD, STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCard_editedFlashCardIsSameFlashCard_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.setFlashcard(STORE_AND_FORWARD, STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedUniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCard_editedFlashCardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FlashCard editedAlice \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new FlashCardBuilder(STORE_AND_FORWARD)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withRating(VALID_RATING_2)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        .withCatgeories(VALID_CATEGORY_HISTORY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                         .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.setFlashcard(STORE_AND_FORWARD, editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedUniqueFlashCardList.add(editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCard_editedFlashCardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.setFlashcard(STORE_AND_FORWARD, NUS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedUniqueFlashCardList.add(NUS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCard_editedFlashCardHasNonUniqueIdentity_throwsDuplicateFlashCardException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(NUS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(DuplicateFlashCardException.class, () -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                uniqueFlashCardList.setFlashcard(STORE_AND_FORWARD, NUS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void remove_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.remove(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void remove_flashCardDoesNotExist_throwsFlashCardNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(FlashCardNotFoundException.class, () -\u003e uniqueFlashCardList.remove(STORE_AND_FORWARD));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void remove_existingFlashCard_removesFlashCard() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.remove(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCards_nullUniqueFlashCardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.setFlashCards((UniqueFlashCardList) null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCards_uniqueFlashCardList_replacesOwnListWithProvidedUniqueFlashCardList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedUniqueFlashCardList.add(NUS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.setFlashCards(expectedUniqueFlashCardList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.setFlashCards((List\u003cFlashCard\u003e) null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.add(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cFlashCard\u003e flashCardList \u003d Collections.singletonList(NUS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        uniqueFlashCardList.setFlashCards(flashCardList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        expectedUniqueFlashCardList.add(NUS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setFlashCards_listWithDuplicateFlashCards_throwsDuplicateFlashCardException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cFlashCard\u003e listWithDuplicateFlashCards \u003d Arrays.asList(STORE_AND_FORWARD, STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(DuplicateFlashCardException.class, () -\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                uniqueFlashCardList.setFlashCards(listWithDuplicateFlashCards));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            -\u003e uniqueFlashCardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDeadline.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.DueDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class JsonAdaptedDeadlineTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String INVALID_TASK_STR \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String INVALID_DUEDATE_STR \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String VALID_TASK_STR \u003d \"Complete Deadline Scheduler.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String VALID_DUEDATE_STR \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final Task VALID_TASK \u003d new Task(VALID_TASK_STR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final DueDate VALID_DUEDATE \u003d new DueDate(VALID_DUEDATE_STR);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final Deadline DEADLINE \u003d new Deadline(VALID_TASK, VALID_DUEDATE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void toModelType_validDeadlineDetails_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(DEADLINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(DEADLINE.toString(), deadline.toModelType().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void toModelType_invalidTask_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(INVALID_TASK_STR, VALID_DUEDATE_STR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expectedMessage \u003d Task.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deadline::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void toModelType_nullTask_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(null, VALID_DUEDATE_STR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Task.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deadline::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void toModelType_invalidDueDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(VALID_TASK_STR, INVALID_DUEDATE_STR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expectedMessage \u003d DueDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deadline::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void toModelType_nullDueDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(VALID_TASK_STR, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DueDate.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deadline::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedFlashCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.DELAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class JsonAdaptedFlashCardTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String INVALID_RATING \u003d \"bad\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String VALID_QUESTION \u003d DELAY.getQuestion().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String VALID_ANSWER \u003d DELAY.getAnswer().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final String VALID_ADDRESS \u003d DELAY.getRating().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final List\u003cJsonAdaptedCategory\u003e VALID_TAGS \u003d DELAY.getCategories().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_validFlashCardDetails_returnsFlashCard() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonAdaptedFlashcard flashCard \u003d new JsonAdaptedFlashcard(DELAY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(DELAY, flashCard.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_invalidQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonAdaptedFlashcard flashCard \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new JsonAdaptedFlashcard(INVALID_QUESTION, VALID_ANSWER, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashCard::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonAdaptedFlashcard flashCard \u003d new JsonAdaptedFlashcard(null, VALID_ANSWER, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashCard::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_invalidAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonAdaptedFlashcard flashCard \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_QUESTION, INVALID_ANSWER, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashCard::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonAdaptedFlashcard flashCard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashCard::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_invalidRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonAdaptedFlashcard flashCard \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, INVALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashCard::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_nullRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonAdaptedFlashcard flashCard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashCard::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        List\u003cJsonAdaptedCategory\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        invalidTags.add(new JsonAdaptedCategory(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonAdaptedFlashcard flashCard \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, flashCard::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 49,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonKeyboardFlashCardsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.GREETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.STORE_AND_FORWARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.SUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class JsonKeyboardFlashCardsStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonKeyboardFlashCardsStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readKeyboardFlashCards(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private java.util.Optional\u003cReadOnlyKeyboardFlashCards\u003e readKeyboardFlashCards (String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new JsonKeyboardFlashCardsStorage("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Paths.get(filePath)).readKeyboardFlashCards(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertFalse(readKeyboardFlashCards(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                DataConversionException.class, () -\u003e readKeyboardFlashCards(\"notJsonFormatKeyboardFlashCards.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void readAddressBook_invalidFlashCardAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                DataConversionException.class, () -\u003e readKeyboardFlashCards(\"invalidFlashCardKeyboardFlashCards.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void readKeyboardFlashCards_invalidAndValidKeyboardFlashCards_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                DataConversionException.class, () -\u003e readKeyboardFlashCards("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        \"invalidAndValidFlashCardKeyboardFlashCards.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempKeyboardFlashCards.json\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonKeyboardFlashCardsStorage jsonAddressBookStorage \u003d new JsonKeyboardFlashCardsStorage(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ReadOnlyKeyboardFlashCards readBack \u003d jsonAddressBookStorage.readKeyboardFlashCards(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(original, new KeyboardFlashCards(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        original.addFlashcard(GREETING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        original.removeFlashCard(STORE_AND_FORWARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readKeyboardFlashCards(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(original, new KeyboardFlashCards(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        original.addFlashcard(SUM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readKeyboardFlashCards().get(); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(original, new KeyboardFlashCards(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private void saveAddressBook(ReadOnlyKeyboardFlashCards addressBook, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new JsonKeyboardFlashCardsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new KeyboardFlashCards(), null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 37,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableKeyboardFlashCardsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.testutil.TypicalFlashCards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class JsonSerializableKeyboardFlashCardsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableKeyboardFlashCardsTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final Path TYPICAL_FLASHCARD_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalFlashCardKeyboardFlashCards.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final Path INVALID_FLASHCARD_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidFlashCardKeyboardFlashCards.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARD_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateFlashCardKeyboardFlashCards.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final Path INVALID_DEADLINE_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidDeadlineKeyboardFlashCards.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static final Path DUPLICATE_DEADLINE_FILE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateDeadlineKeyboardFlashCards.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_typicalFlashCardFile_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonSerializableKeyboardFlashCards dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                JsonSerializableKeyboardFlashCards.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards keyboardFlashCardsFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards typicalFlashCardsKeyboardFlashCards \u003d TypicalFlashCards.getTypicalAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(keyboardFlashCardsFromFile, typicalFlashCardsKeyboardFlashCards);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_invalidFlashCardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonSerializableKeyboardFlashCards dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                JsonSerializableKeyboardFlashCards.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void toModelType_duplicateFlashCards_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonSerializableKeyboardFlashCards dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                JsonSerializableKeyboardFlashCards.class).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableKeyboardFlashCards.MESSAGE_DUPLICATE_FLASHCARD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void toModelType_invalidDeadlineFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonSerializableKeyboardFlashCards dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DEADLINE_FILE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                JsonSerializableKeyboardFlashCards.class).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void toModelType_duplicateDeadlines_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonSerializableKeyboardFlashCards dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_DEADLINE_FILE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                JsonSerializableKeyboardFlashCards.class).get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableKeyboardFlashCards.MESSAGE_DUPLICATE_DEADLINE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 33,
      "dalsontws": 10,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userPrefs.setKeyboardFlashCardsFilePath(Paths.get(\"data/keyboardFlashCards.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.testutil.TypicalFlashCards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.ReadOnlyKeyboardFlashCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        JsonKeyboardFlashCardsStorage addressBookStorage \u003d new JsonKeyboardFlashCardsStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         * {@link JsonKeyboardFlashCardsStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonKeyboardFlashCardsStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ReadOnlyKeyboardFlashCards retrieved \u003d storageManager.readKeyboardFlashCards().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(original, new KeyboardFlashCards(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void getKeyboardFlashCardsFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertNotNull(storageManager.getKeyboardFlashCardsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 11,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " *     {@code KeyboardFlashCards ab \u003d new AddressBookBuilder().withFlashCard(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private KeyboardFlashCards keyboardFlashCards;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public AddressBookBuilder(KeyboardFlashCards keyboardFlashCards) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.keyboardFlashCards \u003d keyboardFlashCards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Adds a new {@code FlashCard} to the {@code KeyboardFlashCards} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public AddressBookBuilder withFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        keyboardFlashCards.addFlashcard(flashCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public KeyboardFlashCards build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return keyboardFlashCards;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 12,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeadlineBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.DueDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * A utility class to help with building FlashCard objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DeadlineBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String VALID_TASK_STR \u003d \"Complete Deadline Scheduler.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String VALID_TASK_STR_2 \u003d \"Complete Calendar GUI.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String VALID_DUEDATE_STR \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String VALID_DUEDATE_STR_2 \u003d \"11/10/2019\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final Task VALID_TASK \u003d new Task(VALID_TASK_STR);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final DueDate VALID_DUEDATE \u003d new DueDate(VALID_DUEDATE_STR);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final Task VALID_TASK_2 \u003d new Task(VALID_TASK_STR_2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final DueDate VALID_DUEDATE_2 \u003d new DueDate(VALID_DUEDATE_STR_2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private DueDate dueDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DeadlineBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        task \u003d new Task(VALID_TASK_STR);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dueDate \u003d new DueDate(VALID_DUEDATE_STR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Initializes the FlashCardBuilder with the data of {@code flashCardToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DeadlineBuilder(Deadline deadlineToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        task \u003d deadlineToCopy.getTask();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dueDate \u003d deadlineToCopy.getDueDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Sets the {@code Question} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DeadlineBuilder withTask(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.task \u003d new Task(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Sets the {@code Answer} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DeadlineBuilder withDueDate(String date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.dueDate \u003d new DueDate(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Deadline build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new Deadline(task, dueDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditFlashCardDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A utility class to help with building EditFlashCardDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class EditFlashCardDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private EditFlashCardDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditFlashCardDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditFlashCardDescriptorBuilder(EditFlashCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.descriptor \u003d new EditFlashCardDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns an {@code EditFlashCardDescriptor} with fields containing {@code flashCard}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditFlashCardDescriptorBuilder(FlashCard flashCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.setQuestion(flashCard.getQuestion());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.setAnswer(flashCard.getAnswer());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.setRating(flashCard.getRating());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.setCategories(flashCard.getCategories());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Sets the {@code Question} of the {@code EditFlashCardDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditFlashCardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Sets the {@code Answer} of the {@code EditFlashCardDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditFlashCardDescriptorBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.setAnswer(new Answer(answer));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditFlashCardDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditFlashCardDescriptorBuilder withRating (String rating) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code EditFlashCardDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditFlashCardDescriptorBuilder withCategories(String... categories) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Set\u003cCategory\u003e categorySet \u003d Stream.of(categories).map(Category::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.setCategories(categorySet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public EditFlashCardDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 34,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExportTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isFileExists;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.ExportPath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * A utility class for export test cases."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class ExportTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Helper method to check if there\u0027s a file present at the given {@code ExportPath}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param exportPath ExportPath to check presence of a file at"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return True if a file is present at the given ExportPath; false otherwise."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static boolean isFilePresent(ExportPath exportPath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return isFileExists("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                exportPath.getPath()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Deletes a file at the given ExportPath. Behavior is undefined if there is no file at the specified path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param exportPath ExportPath of file to delete."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static void deleteFile(ExportPath exportPath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        File file \u003d new File(exportPath.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Deletes a file at the given ExportPath, iff it exists. Does not do anything otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @param exportPath ExportPath of file to delete."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static void deleteFileIfExists(ExportPath exportPath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        if (isFilePresent(exportPath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "            deleteFile(exportPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Checks the current operating system. Returns true if it is Windows, false otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * Rationale: Certain tests pertaining to ExportPaths will behave differently on Windows and Unix, due to both"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * having different definitions of what makes a legal file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     * @return true if the current OS is Windows, false otherwise"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static boolean isRunningOnWindows() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return System"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .getProperty(\"os.name\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                .contains(\"Windows\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashCardBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.model.flashcard.Rating.NULL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A utility class to help with building FlashCard objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FlashCardBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"1 + 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"2\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String DEFAULT_RATING \u003d NULL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Initializes the FlashCardBuilder with the data of {@code flashCardToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardBuilder(FlashCard flashCardToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        question \u003d flashCardToCopy.getQuestion();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        answer \u003d flashCardToCopy.getAnswer();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        rating \u003d flashCardToCopy.getRating();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(flashCardToCopy.getCategories());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Sets the {@code Question} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardBuilder withQuestion(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.question \u003d new Question(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * and set it to the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardBuilder withCatgeories(String ... categories) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Sets the {@code Rating} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardBuilder withRating (String rating) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Sets the {@code Answer} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FlashCard build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new FlashCard(question, answer, rating, categories);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 42,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashCardTestListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keiteo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.Answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.flashcard.Rating;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keiteo"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keiteo"
        },
        "content": "//@@author keiteo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keiteo"
        },
        "content": " * Creates an ArrayList of FlashCards to facilitate FlashCardTestMode tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keiteo"
        },
        "content": "public class FlashCardTestListBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private List\u003cFlashCard\u003e testList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    private final String[] tagList \u003d {\"cs2100\", \"cs1101s\", \"cs2040\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keiteo"
        },
        "content": "     * Returns an ArrayList containing 10000 simple flashcards."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    public List\u003cFlashCard\u003e build() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        final int constant \u003d 10;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        for (int i \u003d 0; i \u003c 10000; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            String question \u003d i + \" + \" + constant;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            String answer \u003d Integer.toString(i + constant);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            String tag \u003d tagList[i % 3];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keiteo"
        },
        "content": "            testList.add(new FlashCard(new Question(question), new Answer(answer), new Rating(\"good\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keiteo"
        },
        "content": "                    SampleDataUtil.getCategorySet(tag)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keiteo"
        },
        "content": "        return testList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keiteo": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashCardUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A utility class for FlashCard."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FlashCardUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns an add command string for adding the {@code flashCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String getAddCommand(FlashCard flashCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFlashCardDetails(flashCard);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the part of command string for the given {@code flashCard}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String getFlashCardDetails(FlashCard flashCard) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        sb.append(PREFIX_QUESTION + flashCard.getQuestion().fullQuestion + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        sb.append(PREFIX_ANSWER + flashCard.getAnswer().fullAnswer + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        flashCard.getCategories().stream().forEach("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            s -\u003e sb.append(PREFIX_CATEGORY + s.categoryName + \" \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the part of command string for the given {@code EditFlashCardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String getEditFlashCardDescriptorDetails(EditFlashCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.getQuestion().ifPresent(name -\u003e sb.append(PREFIX_QUESTION).append(name.fullQuestion).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.getAnswer().ifPresent(answer -\u003e sb.append(PREFIX_ANSWER).append(answer.fullAnswer).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        descriptor.getRating().ifPresent(address -\u003e sb.append(PREFIX_RATING).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (descriptor.getCategories().isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            Set\u003cCategory\u003e categories \u003d descriptor.getCategories().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                sb.append(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                categories.forEach(s -\u003e sb.append(PREFIX_CATEGORY).append(s.categoryName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 28,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the middle index of the flashCard in the {@code model}\u0027s flashCard list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashCardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the last index of the flashCard in the {@code model}\u0027s flashCard list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns the flashCard in the {@code model}\u0027s flashCard list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static FlashCard getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return model.getFilteredFlashCardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDeadlines.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * A utility class containing a list of {@code FlashCard} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class TypicalDeadlines {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String VALID_TASK_STR \u003d \"Complete Deadline Scheduler.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String VALID_TASK_STR_2 \u003d \"Complete Calendar GUI.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String VALID_DUEDATE_STR \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final String VALID_DUEDATE_STR_2 \u003d \"11/10/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final Deadline COMPLETE_SCHEDULER \u003d new DeadlineBuilder().withTask(VALID_TASK_STR)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            .withDueDate(VALID_DUEDATE_STR).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final Deadline COMPLETE_CALENDAR \u003d new DeadlineBuilder().withTask(VALID_TASK_STR_2)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            .withDueDate(VALID_DUEDATE_STR_2).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private TypicalDeadlines() {} // prevents instantiation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns an {@code KeyboardFlashCards} with all the typical flashcards."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static KeyboardFlashCards getTypicalAddressBook() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards ab \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (Deadline deadline : getTypicalDeadlines()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ab.addDeadline(deadline);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static List\u003cDeadline\u003e getTypicalDeadlines() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                Arrays.asList(COMPLETE_SCHEDULER, COMPLETE_CALENDAR));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 4,
      "dalsontws": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExportPaths.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "//@@author LeowWB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.DocumentPath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import seedu.address.model.export.JsonExportPath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " * A utility class containing a list of {@code ExportPath} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeowWB"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "public class TypicalExportPaths {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final DocumentPath CHEATSHEET_DOCX \u003d new DocumentPath(\"cheatsheet.docx\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static final JsonExportPath CS2105_JSON \u003d new JsonExportPath(\"cs2105.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeowWB": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFlashCards.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_HISTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.KeyboardFlashCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import seedu.address.model.deadline.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import seedu.address.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A utility class containing a list of {@code FlashCard} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class TypicalFlashCards {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard STORE_AND_FORWARD \u003d new FlashCardBuilder().withQuestion(\"Store-and-forward\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .withAnswer(\"Entire packet must arrive at a router before it can be transmitted on the next link\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .withCatgeories(\"CS2105\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard DELAY \u003d new FlashCardBuilder().withQuestion(\"End-to-end delay\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .withAnswer(\"2L/R (assuming no other delay)\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .withCatgeories(\"computerNetworking\", \"CS2105\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard SOURCE_DELAY \u003d new FlashCardBuilder().withQuestion(\"Sources of Packet Delay?\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .withAnswer(\"Nodal processing, queuing, transmission, propagation\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard PROP_DELAY \u003d new FlashCardBuilder().withQuestion(\"Formula for propagation delay\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .withAnswer(\"d, length of physical link (m) / s, propagation speed in medium (~2x10^8 m/sec) \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .withCatgeories(\"Delay\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard TRANS_DELAY \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCardBuilder().withQuestion(\"Formula for transmission delay\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withAnswer(\"L, packet length (bits) / R, link bandwidth (bps)\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withCatgeories(\"c\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard THROUGHPUT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCardBuilder().withQuestion(\"Throughput definition\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withAnswer(\"How many bits can be transmitted per unit time\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard PROTOCOL \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCardBuilder().withQuestion(\"What is a Protocol\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withAnswer(\"Protocols define format and order \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                            + \"of messages exchanged and the action taken after \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                            + \"messages are sent or received\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard GREETING \u003d new"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            FlashCardBuilder().withQuestion(\"How are you?\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .withAnswer(\"I am fine, thank you and you?\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard SUM \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCardBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withQuestion(\"1 + 1 \u003d \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withAnswer(\"2\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    // Manually added - FlashCard\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard WWII \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCardBuilder().withQuestion(VALID_QUESTION_1)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withAnswer(VALID_ANSWER_1)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withCatgeories(VALID_CATEGORY_LOCATION)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard NUS \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCardBuilder().withQuestion(VALID_QUESTION_2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withCatgeories(VALID_CATEGORY_HISTORY, VALID_CATEGORY_LOCATION)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final FlashCard NORATING \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            new FlashCardBuilder().withQuestion(VALID_QUESTION_1)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withAnswer(VALID_ANSWER_1)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .withCatgeories(VALID_CATEGORY_LOCATION)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String KEYWORD_MATCHING_SORT \u003d \"sort\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private TypicalFlashCards() {} // prevents instantiation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Returns an {@code KeyboardFlashCards} with all the typical flashcards."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static KeyboardFlashCards getTypicalAddressBook() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        KeyboardFlashCards ab \u003d new KeyboardFlashCards();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (FlashCard flashCard : getTypicalFlashCards()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            ab.addFlashcard(flashCard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static List\u003cFlashCard\u003e getTypicalFlashCards() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Arrays.asList(STORE_AND_FORWARD, DELAY, SOURCE_DELAY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        PROP_DELAY, TRANS_DELAY, THROUGHPUT, PROTOCOL));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static List\u003cFlashCard\u003e getEmptyFlashCardList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return Collections.emptyList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    public static List\u003cFlashCard\u003e getSingletonFlashCardList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        return Collections.singletonList("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "                GREETING"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeowWB"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeowWB"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static List\u003cDeadline\u003e getTypicalDeadlines() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                Arrays.asList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 72,
      "LeowWB": 11,
      "dalsontws": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final Index INDEX_FIRST_DEADLINE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static final Index INDEX_SECOND_DEADLINE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 3,
      "dalsontws": 2,
      "-": 9
    }
  }
]
